uint8_t find_volume_level(uint32_t fp28_num, uint8_t pn)
{
  // Instantiate some variables
  uint8_t return_code = 0;
  int start_index;
  int stop_index;
  int16_t diff = 10000;
  int16_t curDiff = 10000;
  uint32_t inputnum = fp28_num*10;
  uint16_t intval = (uint16_t)((inputnum)>>=16);
  int i;
  uint16_t return_value = 0;

  // Find the length of the array
  size_t n = sizeof(VolumeLevels)/sizeof(VolumeLevels[0]);

  // Set the start and stop search values depending on whether
  // a negative sign was detected
  if (pn == 1)
  {
    start_index = PN_INDEX;
    stop_index = n;
  }
  else
  {
    start_index = 0;
    stop_index = PN_INDEX - 1;
  }

  // Determine whether the negative dB bound has been exceeded
  if ((intval > VolumeLevels[0].value) && (pn == 0))
  {
    printk("Maximum attenuation exceeded.\n");
    printk("Setting attenuation to -100 dB.\n");
    return VolumeLevels[0].code;
  }

  // Determine whether the positive dB bound has been exceeded
  if ((intval > VolumeLevels[n-1].value) && (pn == 1))
  {
    printk("Maximum amplification exceeded.\n");
    printk("Setting amplification to 4 dB.\n");
    return VolumeLevels[n-1].code;
  }

  // Search for the closest value (above or below)
  for (i = start_index; i < stop_index; i++)
  {
    // calculate the difference values
    if (intval > VolumeLevels[i].value)
      diff = intval - VolumeLevels[i].value;
    else
      diff = VolumeLevels[i].value - intval;

    // If the calculated difference is smaller than the calculated
    // current best (smallest) difference set the new current difference
    if (diff < curDiff)
    {
      curDiff = diff;
      return_code = VolumeLevels[i].code;
      return_value = VolumeLevels[i].value;
    }
    // Otherwise, stop.  (it only gets worse from here)
    else
      break;
  }

  // Return the correct volume code
  return return_code;
}

uint32_t decode_volume(uint8_t code)
{
  // Initialize some variables
  int i;
  size_t n = sizeof(VolumeLevels)/sizeof(VolumeLevels[0]);
  uint32_t decodedDB = 0;

  // Find the correct volume level
  for (i=0;i<n;i++)
  {
    if (code == VolumeLevels[i].code)
      break;
  }

  // If it's in the negative portion, multiply by -1
  if (i < PN_INDEX)
  {
    decodedDB = VolumeLevels[i].value;
    decodedDB = (decodedDB<<=16)/10;
    return -1*decodedDB;
  }
  else
  {
    decodedDB = VolumeLevels[i].value;
    return (decodedDB<<=16)/10;
  }
}

