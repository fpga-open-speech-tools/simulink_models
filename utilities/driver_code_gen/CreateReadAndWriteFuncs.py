def CreateAttrReadWriteFuncs(inputParams):
    functionString = "/*****************************************************\n"
    functionString += "Generated by CreateAttrReadWriteFuncs\n"
    functionString += "****************************************************/\n"
    if inputParams.deviceType == 0:    # SPI device
        functionString += CreateSPIAttrReadWrite(inputParams)
    elif inputParams.deviceType == 1:  # I2C device
        functionString += CreateI2CAttrReadWrite(inputParams)
    elif inputParams.deviceType == 2:  # FPGA device
        functionString += CreateFPGAAttrReadWrite(inputParams)
    functionString += "/* End of CreateAttrReadWriteFuncs */\n\n\n"
    return functionString


def CreateSPIAttrReadWrite(inputParams):
    functionString = "// SPI Attribute functions\n"
    for i in range(len(inputParams.deviceAttributes)):
        functionString += "static ssize_t " + inputParams.deviceAttributes[i] + "_read(struct device *dev, struct device_attribute *attr, char *buf) {\n"
        if inputParams.attributeReadIsNormal[i]:
            functionString += "  fe_" + inputParams.deviceName + "_dev_t * devp = (fe_" + inputParams.deviceName + "_dev_t *)dev_get_drvdata(dev);\n"
            functionString += "  fp_to_string(buf, devp->" + inputParams.deviceAttributes[i] + ", 16, true, 9);\n"
            functionString += "  strcat2(buf,\"\\n\");\n"
            functionString += "  return strlen(buf);\n"
        else:
            functionString += "  // TODO: fill me in\n"
            functionString += "  return -1;\n"
        functionString += "}\n\n"
        functionString += "static ssize_t " + inputParams.deviceAttributes[i] + "_write(struct device *dev, struct device_attribute *attr, const char *buf, size_t count) {\n"
        if inputParams.attributeWriteIsNormal[i]:
            functionString += CreateSPIWriteFunc(inputParams, i)
        else:
            functionString += "  // TODO: Fill this in\n"
            functionString += "  return 0;\n"
        functionString += "}\n\n"
    functionString += "static ssize_t name_read(struct device *dev, struct device_attribute *attr, char *buf) {\n"
    functionString += "  // TODO: Fill this in\n"
    functionString += "  return 0;\n"
    functionString += "}\n"
    return functionString


def CreateI2CAttrReadWrite(inputParams):
    functionString = "// I2C Attribute functions\n"
    for i in range(len(inputParams.deviceAttributes)):
        functionString += "static ssize_t " + inputParams.deviceAttributes[i] + "_read(struct device *dev, struct device_attribute *attr, char *buf) {\n"
        if inputParams.attributeReadIsNormal[i]:
            functionString += "  fe_" + inputParams.deviceName + "_dev_t * devp = (fe_" + inputParams.deviceName + "_dev_t *)dev_get_drvdata(dev);\n"
            functionString += "  fp_to_string(buf, devp->" + inputParams.deviceAttributes[i] + ", 16, true, 9);\n"
            functionString += "  strcat2(buf,\"\\n\");\n"
            functionString += "  return strlen(buf);\n"
        else:
            functionString += "  // TODO: fill me in\n"
            functionString += "  return -1;\n"
        functionString += "}\n\n"
        functionString += "static ssize_t " + inputParams.deviceAttributes[i] + "_write(struct device *dev, struct device_attribute *attr, const char *buf, size_t count) {\n"
        if inputParams.attributeWriteIsNormal[i]:
            functionString += CreateI2CWriteFunc(inputParams, i)
        else:
            functionString += "  // TODO: Fill this in\n"
            functionString += "  return 0;\n"
        functionString += "}\n\n"
    functionString += "static ssize_t name_read(struct device *dev, struct device_attribute *attr, char *buf) {\n"
    functionString += "  // TODO: Fill this in\n"
    functionString += "  return 0;\n"
    functionString += "}\n"
    return functionString


def CreateFPGAAttrReadWrite(inputParams):
    functionString = "// FPGA Attribute functions\n"
    for i in range(len(inputParams.deviceAttributes)):
        functionString += "static ssize_t " + inputParams.deviceAttributes[i] + "_read(struct device *dev, struct device_attribute *attr, char *buf) {\n"
        if inputParams.attributeReadIsNormal[i]:
            functionString += "  fe_" + inputParams.deviceName + "_dev_t * devp = (fe_" + inputParams.deviceName + "_dev_t *)dev_get_drvdata(dev);\n"
            functionString += "  fp_to_string(buf, devp->" + inputParams.deviceAttributes[i] + ", " + inputParams.attributeDataTypes[i][-2:] + ", true, 9);\n"
            functionString += "  strcat2(buf,\"\\n\");\n"
            functionString += "  return strlen(buf);\n"
        else:
            functionString += "  // TODO: fill me in\n"
            functionString += "  return -1;\n"
        functionString += "}\n\n"
        functionString += "static ssize_t " + inputParams.deviceAttributes[i] + "_write(struct device *dev, struct device_attribute *attr, const char *buf, size_t count) {\n"
        if inputParams.attributeWriteIsNormal[i]:
            functionString += CreateFPGAWriteFunc(inputParams, i)
        else:
            functionString += "  // TODO: Fill this in\n"
            functionString += "  return 0;\n"
        functionString += "}\n\n"
    functionString += "static ssize_t name_read(struct device *dev, struct device_attribute *attr, char *buf) {\n"
    functionString += "  fe_" + inputParams.deviceName + "_dev_t *devp = (fe_" + inputParams.deviceName + "_dev_t *)dev_get_drvdata(dev);\n"
    functionString += "  sprintf(buf, \"%s\\n\", devp->name);\n"
    functionString += "  return strlen(buf);\n"
    functionString += "}\n"
    return functionString


def CreateSPIWriteFunc(inputParams, i):
    functionString = "  uint32_t tempValue = 0;\n"
    functionString += "  uint8_t volume_level;\n"
    functionString += "  char cmd[" + str(inputParams.attrWriteCommBytes) + "] = {"
    for j in range(inputParams.attrWriteCommBytes):
        functionString += " " + inputParams.attrWriteComm[i][j]
        if j != inputParams.attrWriteCommBytes - 1:
            functionString += ","
    functionString += "};\n"
    functionString += "  char substring[80];\n"
    functionString += "  int substring_count = 0;\n"
    functionString += "  int i;\n"
    functionString += "  fe_" + inputParams.deviceName + "_dev_t * devp = (fe_" + inputParams.deviceName + "_dev_t *) dev_get_drvdata(dev);\n"
    functionString += "  for (i = 0; i < count; i++) {\n"
    functionString += "    if ((buf[i] != ',') && (buf[i] != ' ') && (buf[i] != '\\0') && (buf[i] != '\\r') && (buf[i] != '\\n')) {\n"
    functionString += "      substring[substring_count] = buf[i];\n"
    functionString += "      substring_count ++;\n"
    functionString += "    }\n"
    functionString += "  }\n"
    functionString += "  substring[substring_count] = '\\0';\n"
    functionString += "  if (buf[0] == '-') {\n"
    functionString += "    for (i = 0; i < 79; i++) {\n"
    functionString += "      substring[i] = substring[i + 1];\n"
    functionString += "    }\n"
    functionString += "  }\n"
    functionString += "  tempValue = set_fixed_num(substring, 28, true);\n"
    functionString += "  volume_level = find_volume_level(tempValue);\n"
    functionString += "  tempValue = decode_volume(volume_level);\n"
    functionString += "  devp->" + inputParams.deviceAttributes[i] + " = -1 * tempValue;\n"
    functionString += "  cmd[" + str(inputParams.attrWriteCommBytes - 1) + "] = volume_level;\n"
    functionString += "  spi_write(spi_device, &cmd, sizeof(cmd));\n"
    functionString += "  return count;\n"
    return functionString


def CreateI2CWriteFunc(inputParams, i):
    functionString =  "  uint32_t tempValue = 0;\n"
    functionString += "  char substring[80];\n"
    functionString += "  int substring_count = 0;\n"
    functionString += "  int i;\n"
    functionString += "  char cmd[" + str(inputParams.attrWriteCommBytes) + "] = {"
    for j in range(inputParams.attrWriteCommBytes):
        functionString += " " + inputParams.attrWriteComm[i][j]
        if j != inputParams.attrWriteCommBytes - 1:
            functionString += ","
    functionString += "};\n"
    functionString += "  uint8_t code = 0x00;\n"
    functionString += "  fe_" + inputParams.deviceName + "_dev_t * devp = (fe_" + inputParams.deviceName + \
                      "_dev_t *) dev_get_drvdata(dev);\n"
    functionString += "  for (i = 0; i < count; i++) {\n"
    functionString += "    if ((buf[i] != ',') && (buf[i] != ' ') && (buf[i] != '\\0') && (buf[i] != '\\r') && (buf[i] != '\\n')) {\n"
    functionString += "      substring[substring_count] = buf[i];\n"
    functionString += "      substring_count ++;\n"
    functionString += "    }\n"
    functionString += "  }\n"
    functionString += "  substring[substring_count] = '\\0';\n"
    functionString += "  if (buf[0] == '-') {\n"
    functionString += "    for (i = 0; i < 79; i++) {\n"
    functionString += "      substring[i] = substring[i + 1];\n"
    functionString += "    }\n"
    functionString += "    tempValue = set_fixed_num(substring, 16, true);\n"
    functionString += "    code = find_volume_level(tempValue, 0);\n"
    functionString += "  } else {\n"
    functionString += "    tempValue = set_fixed_num(substring, 16, true);\n"
    functionString += "    code = find_volume_level(tempValue, 1);\n"
    functionString += "  }\n"
    functionString += "  tempValue = decode_volume(code);\n"
    functionString += "  devp->" + inputParams.deviceAttributes[i] + " = tempValue;\n"
    functionString += "  cmd[" + str(inputParams.attrWriteCommBytes - 1) + "] = code;\n"
    functionString += "  i2c_master_send(" + inputParams.deviceNameAbbrev + "_i2c_client, &cmd[0], " + str(inputParams.attrWriteCommBytes) + ");\n"
    functionString += "  return count;\n"
    return functionString


def CreateFPGAWriteFunc(inputParams, i):
    functionString =  "  uint32_t tempValue = 0;\n"
    functionString += "  char substring[80];\n"
    functionString += "  int substring_count = 0;\n"
    functionString += "  int i;\n"
    functionString += "  fe_" + inputParams.deviceName + "_dev_t *devp = (fe_" + inputParams.deviceName + \
                      "_dev_t *)dev_get_drvdata(dev);\n"
    functionString += "  for (i = 0; i < count; i++) {\n"
    functionString += "    if ((buf[i] != ',') && (buf[i] != ' ') && (buf[i] != '\\0') && (buf[i] != '\\r') && (buf[i] != '\\n')) {\n"
    functionString += "      substring[substring_count] = buf[i];\n"
    functionString += "      substring_count ++;\n"
    functionString += "    }\n"
    functionString += "  }\n"
    functionString += "  substring[substring_count] = 0;\n"
    is_signed = "false"
    if inputParams.attributeDataTypes[0] == 's':
        is_signed = "true"
    functionString += "  tempValue = set_fixed_num(substring, " + inputParams.attributeDataTypes[i][-2:] + ", " + is_signed + ");\n"
    functionString += "  devp->" + inputParams.deviceAttributes[i] + " = tempValue;\n"
    functionString += "  iowrite32(devp->" + inputParams.deviceAttributes[i] + ", (u32 *)devp->regs"
    for j in range(len(inputParams.attributeWriteOffsets[i])):
        functionString += " + " + inputParams.attributeWriteOffsets[i][j]
    functionString += ");\n"
    functionString += "  return count;\n"
    return functionString
