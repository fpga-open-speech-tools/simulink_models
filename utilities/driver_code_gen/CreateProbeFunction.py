def CreateProbeFunction(inputParams):
    functionString = "/************************************************\n"
    functionString += "Generated by CreateProbeFunction\n"
    functionString += "************************************************/\n"
    functionString += "static int " + inputParams.deviceName + "_probe(struct platform_device *pdev) {\n"
    functionString += "  int ret_val = -EBUSY;\n"
    functionString += ("  char deviceName[" + str(len(inputParams.deviceName) + 12) +"] = \"fe_" + inputParams.deviceName
                       + "_\";\n")  # adding 12 to len is arbitrary
    functionString += "  char deviceMinor[20];\n"
    functionString += "  int status;\n"
    functionString += "  struct device *device_obj;\n"
    devpString = "fe_" + inputParams.deviceName + "_devp"
    functionString += "  fe_" + inputParams.deviceName + "_dev_t * " + devpString + ";\n"
    functionString += "  pr_info(\"" + inputParams.deviceName + "_probe enter\\n\");\n"
    if inputParams.deviceType == 2:  # FPGA device
        functionString += "  struct resource *r = 0;\n"
        functionString += "  r = platform_get_resource(pdev, IORESOURCE_MEM, 0);\n"
        functionString += "  if (r == NULL) {\n"
        functionString += "    pr_err(\"IORESOURCE_MEM (register space) does not exist\\n\");\n"
        functionString += "    goto bad_exit_return;"
        functionString += "  }\n"
    functionString += ("  " + devpString + " = devm_kzalloc(&pdev->dev, sizeof(fe_" + inputParams.deviceName +
                       "_dev_t), GFP_KERNEL);\n")
    if inputParams.deviceType == 2:  # FPGA device type
        functionString += "  " + devpString + "->regs = devm_ioremap_resource(&pdev->dev, r);\n"
        functionString += "  if (IS_ERR(" + devpString + "->regs))\n"
        functionString += "    goto bad_ioremap;\n"
    functionString += "  platform_set_drvdata(pdev, (void *)" + devpString + ");\n"
    functionString += "  " + devpString + "->name = devm_kzalloc(&pdev->dev, 50, GFP_KERNEL);\n"
    functionString += "  if (" + devpString + "->name == NULL)\n"
    functionString += "    goto bad_mem_alloc;\n"
    functionString += "  strcpy(" + devpString + "->name, (char *)pdev->name);\n"
    functionString += "  pr_info(\"%s\\n\", (char *)pdev->name);\n"
    functionString += "  status = alloc_chrdev_region(&dev_num, 0, 1, \"fe_" + inputParams.deviceName + "_\");\n"
    functionString += "  if (status != 0)\n"
    functionString += "    goto bad_alloc_chrdev_region;\n"
    functionString += "  sprintf(deviceMinor, \"%d\", MAJOR(dev_num));\n"
    functionString += "  strcat(deviceName, deviceMinor);\n"
    functionString += "  pr_info(\"%s\\n\", deviceName);\n"
    functionString += "  cl = class_create(THIS_MODULE, deviceName);\n"
    functionString += "  if (cl == NULL)\n"
    functionString += "    goto bad_class_create;\n"
    functionString += "  cdev_init(&" + devpString + "->cdev, &fe_" + inputParams.deviceName + "_fops);\n"
    functionString += "  status = cdev_add(&" + devpString + "->cdev, dev_num, 1);\n"
    functionString += "  if (status != 0)\n"
    functionString += "    goto bad_cdev_add;\n"
    functionString += "  device_obj = device_create(cl, NULL, dev_num, NULL, deviceName);\n"
    functionString += "  if (device_obj == NULL)\n"
    functionString += "    goto bad_device_create;\n"
    functionString += "  dev_set_drvdata(device_obj, " + devpString + ");\n"
    functionString += CreateAttributeFilesAndErrorHandling(inputParams)
    functionString += "/* End of CreateProbeFunction */\n\n\n"
    return functionString


def CreateAttributeFilesAndErrorHandling(inputParams):
    functionString = "/* Beginning attribute file stuff */\n"
    for i in range(len(inputParams.deviceAttributes)):
        functionString += "  status = device_create_file(device_obj, &dev_attr_" + inputParams.deviceAttributes[i] + ");\n"
        functionString += "  if (status)\n"
        functionString += "    goto bad_device_create_file_" + str(i + 1) + ";\n"
        functionString += "\n"
    functionString += "  status = device_create_file(device_obj, &dev_attr_name);\n"
    functionString += "  if (status)\n"
    functionString += "    goto bad_device_create_file_" + str(len(inputParams.deviceAttributes) + 1) + ";\n"
    functionString += "  pr_info(\"HA_probe exit\\n\");\n"
    functionString += "  return 0;\n"
    functionString += "bad_device_create_file_" + str(len(inputParams.deviceAttributes) + 1) + ":\n"
    functionString += "  device_remove_file(device_obj, &dev_attr_name);\n"
    for i in range(len(inputParams.deviceAttributes) - 1, -1, -1):
        functionString += "bad_device_create_file_" + str(i + 1) + ":\n"
        functionString += "  device_remove_file(device_obj, &dev_attr_" + inputParams.deviceAttributes[i] + ");\n\n"
    if inputParams.deviceType == 2:
        functionString += "bad_device_create_file_0:\n"
        functionString += "  device_destroy(cl, dev_num);\n\n"
    functionString += "bad_device_create:\n"
    functionString += "  cdev_del(&fe_" + inputParams.deviceName + "_devp->cdev);\n"
    functionString += "bad_cdev_add:\n"
    functionString += "  class_destroy(cl);\n"
    functionString += "bad_class_create:\n"
    functionString += "  unregister_chrdev_region(dev_num, 1);\n"
    functionString += "bad_alloc_chrdev_region:\n"
    functionString += "bad_mem_alloc:\n"
    if inputParams.deviceType == 2: # FPGA
        functionString += "bad_ioremap:\n"
        functionString += "  ret_val = PTR_ERR(fe_" + inputParams.deviceName + "_devp->regs);\n"
        functionString += "bad_exit_return:\n"
        functionString += "  pr_info(\"" + inputParams.deviceName + "_probe bad exit\\n\");\n"
    functionString += "  return ret_val;\n"
    functionString += "}\n"
    return functionString