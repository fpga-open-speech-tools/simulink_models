-- -------------------------------------------------------------
-- 
-- File Name: /mnt/data/NIH/simulink_models/models/echo/hdlsrc/SE/SE_variable_delay.vhd
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SE_variable_delay
-- Source Path: SE/dataplane/Avalon Data Processing/Left Channel Processing/echo/variable delay
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SE_variable_delay IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
        delay                             :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
        Enable_out6                       :   IN    std_logic;
        data_out                          :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En28
        );
END SE_variable_delay;


ARCHITECTURE rtl OF SE_variable_delay IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT SE_read_address_generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          delay                           :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
          write_addr                      :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
          Enable_out6                     :   IN    std_logic;
          read_addr                       :   OUT   std_logic_vector(14 DOWNTO 0)  -- ufix15
          );
  END COMPONENT;

  COMPONENT SE_SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SE_read_address_generator
    USE ENTITY work.SE_read_address_generator(rtl);

  FOR ALL : SE_SimpleDualPortRAM_generic
    USE ENTITY work.SE_SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL write_address_generator_out1     : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL read_address_generator_out1      : std_logic_vector(14 DOWNTO 0);  -- ufix15
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Simple_Dual_Port_RAM_out1        : std_logic_vector(32 DOWNTO 0);  -- ufix33

BEGIN
  u_read_address_generator : SE_read_address_generator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              delay => delay,  -- ufix15
              write_addr => std_logic_vector(write_address_generator_out1),  -- ufix15
              Enable_out6 => Enable_out6,
              read_addr => read_address_generator_out1  -- ufix15
              );

  u_Simple_Dual_Port_RAM : SE_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 15,
                 DataWidth => 33
                 )
    PORT MAP( clk => clk,
              enb => enb_gated_1,
              wr_din => data_in,
              wr_addr => std_logic_vector(write_address_generator_out1),
              wr_en => Constant_out1,
              rd_addr => read_address_generator_out1,
              rd_dout => Simple_Dual_Port_RAM_out1
              );

  enb_gated <= Enable_out6 AND enb;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 32767
  -- 
  write_address_generator_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_address_generator_out1 <= to_unsigned(16#0000#, 15);
    ELSIF rising_edge(clk) THEN
      IF enb_gated = '1' THEN
        write_address_generator_out1 <= write_address_generator_out1 + to_unsigned(16#0001#, 15);
      END IF;
    END IF;
  END PROCESS write_address_generator_process;


  Constant_out1 <= '1';

  enb_gated_1 <= Enable_out6 AND enb;

  data_out <= Simple_Dual_Port_RAM_out1;

END rtl;

