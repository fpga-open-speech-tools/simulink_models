-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\mc_gr\Desktop\FPGA Open Speech Tools\simulink_models\models\pFIR_Testing\hdlsrc\pFIR_Testing\pFIR_Testing_MATLAB_Function.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: pFIR_Testing_MATLAB_Function
-- Source Path: pFIR_Testing/dataplane/Test FIR with Custom FIR Libraries Sample Based Filtering/MATLAB Function
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY pFIR_Testing_MATLAB_Function IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        leftData                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        leftValid                         :   IN    std_logic;
        rightData                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        rightValid                        :   IN    std_logic;
        sourceData                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        sourceChannel                     :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        sourceValid                       :   OUT   std_logic  -- ufix1
        );
END pFIR_Testing_MATLAB_Function;


ARCHITECTURE rtl OF pFIR_Testing_MATLAB_Function IS

  ATTRIBUTE multstyle : string;

  -- Signals
  SIGNAL leftData_signed                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL leftValid_1                      : std_logic;
  SIGNAL rightData_signed                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL rightValid_1                     : std_logic;
  SIGNAL sourceData_tmp                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL sourceChannel_tmp                : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  leftData_signed <= signed(leftData);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= leftValid;
        delayMatch_reg(1 TO 3) <= delayMatch_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  leftValid_1 <= delayMatch_reg(3);

  rightData_signed <= signed(rightData);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= rightValid;
        delayMatch1_reg(1 TO 3) <= delayMatch1_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  rightValid_1 <= delayMatch1_reg(3);

  MATLAB_Function_output : PROCESS (leftData_signed, leftValid_1, rightData_signed, rightValid_1)
  BEGIN
    --MATLAB Function 'dataplane/Test FIR with Custom FIR Libraries Sample Based Filtering/MATLAB Function': '<S10>:1'
    IF leftValid_1 = '1' THEN 
      --'<S10>:1:4'
      -- left channel ready
      --'<S10>:1:5'
      sourceData_tmp <= leftData_signed;
      --'<S10>:1:6'
      sourceChannel_tmp <= to_unsigned(16#0#, 2);
      --'<S10>:1:7'
      sourceValid <= '1';
    ELSIF rightValid_1 = '1' THEN 
      --'<S10>:1:8'
      -- right channel ready 
      --'<S10>:1:9'
      sourceData_tmp <= rightData_signed;
      --'<S10>:1:10'
      sourceChannel_tmp <= to_unsigned(16#1#, 2);
      --'<S10>:1:11'
      sourceValid <= '1';
    ELSE 
      -- neither channel output is ready
      --'<S10>:1:13'
      sourceData_tmp <= to_signed(0, 32);
      --'<S10>:1:14'
      sourceChannel_tmp <= to_unsigned(16#2#, 2);
      --'<S10>:1:15'
      sourceValid <= '0';
    END IF;
  END PROCESS MATLAB_Function_output;


  sourceData <= std_logic_vector(sourceData_tmp);

  sourceChannel <= std_logic_vector(sourceChannel_tmp);

END rtl;

