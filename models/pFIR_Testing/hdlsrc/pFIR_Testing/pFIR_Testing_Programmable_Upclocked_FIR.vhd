-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\mc_gr\Desktop\FPGA Open Speech Tools\simulink_models\models\pFIR_Testing\hdlsrc\pFIR_Testing\pFIR_Testing_Programmable_Upclocked_FIR.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: pFIR_Testing_Programmable_Upclocked_FIR
-- Source Path: pFIR_Testing/dataplane/Test FIR with Custom FIR Libraries Sample Based Filtering/Left Channel Processing/Programmable 
-- Upclocked FI
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY pFIR_Testing_Programmable_Upclocked_FIR IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        enb_1_4_1                         :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        Data_in                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Valid_in                          :   IN    std_logic;
        Wr_Data                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Wr_Addr                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Wr_En                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        Data_out                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Valid_out                         :   OUT   std_logic
        );
END pFIR_Testing_Programmable_Upclocked_FIR;


ARCHITECTURE rtl OF pFIR_Testing_Programmable_Upclocked_FIR IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT pFIR_Testing_Addr_Gen
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          Input_Addr                      :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          Data_History_Rd_addr            :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          End_of_sample_calc              :   OUT   std_logic;
          b_k_addr                        :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
          );
  END COMPONENT;

  COMPONENT pFIR_Testing_SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT pFIR_Testing_B_k_Memory_Block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          din_A                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          addr_A                          :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          we_A                            :   IN    std_logic;
          din_B                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          addr_B                          :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          we_B                            :   IN    std_logic;
          dout_A                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          dout_B                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT pFIR_Testing_Multiply_And_Sum
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          x_n_i                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          End_of_sample_calc              :   IN    std_logic;
          b_i                             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Filtered_Output                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Output_Valid                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : pFIR_Testing_Addr_Gen
    USE ENTITY work.pFIR_Testing_Addr_Gen(rtl);

  FOR ALL : pFIR_Testing_SimpleDualPortRAM_generic
    USE ENTITY work.pFIR_Testing_SimpleDualPortRAM_generic(rtl);

  FOR ALL : pFIR_Testing_B_k_Memory_Block2
    USE ENTITY work.pFIR_Testing_B_k_Memory_Block2(rtl);

  FOR ALL : pFIR_Testing_Multiply_And_Sum
    USE ENTITY work.pFIR_Testing_Multiply_And_Sum(rtl);

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL Addr_Gen_out1                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL Addr_Gen_out2                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL Addr_Gen_out3                    : std_logic;
  SIGNAL Addr_Gen_out4                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL Addr_Gen_out1_unsigned           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Rate_Transition1_out1            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Data_Type_Conversion4_out1       : std_logic;
  SIGNAL Addr_Gen_out2_unsigned           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Rate_Transition8_out1            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL x_n_i                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_n_i_signed                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Rate_Transition2_out1            : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Rate_Transition2_out1_1          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Alignment_Delay_out1             : std_logic;
  SIGNAL Wr_Data_signed                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Rate_Transition3_out1            : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Wr_Addr_unsigned                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Rate_Transition4_out1            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Wr_En_signed                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Rate_Transition5_out1            : signed(31 DOWNTO 0);  -- int32
  SIGNAL Rate_Transition3_out1_1          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Rate_Transition4_out1_1          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion2_out1       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Rate_Transition5_out1_1          : signed(31 DOWNTO 0);  -- int32
  SIGNAL Data_Type_Conversion3_out1       : std_logic;
  SIGNAL Never_write_B2_out1              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Always_read_B2_out1              : std_logic;
  SIGNAL B_k_Memory_Block2_out1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b_i                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Multiply_And_Sum_out1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Multiply_And_Sum_out2            : std_logic;
  SIGNAL Multiply_And_Sum_out2_1          : std_logic;
  SIGNAL Multiply_And_Sum_out1_signed     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Output_memory_out1               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Output_Stabalizer_out1           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Rate_Transition_out1             : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Deserializer1D_contl_cnt         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Deserializer1D_contl_validOutput : std_logic;
  SIGNAL Deserializer1D_innerRegEn        : std_logic;
  SIGNAL Deserializer1D_innerRegCtrolEn   : std_logic;
  SIGNAL Deserializer1D_outBypassEn       : std_logic;
  SIGNAL Deserializer1D_tapDelayEn        : std_logic;
  SIGNAL Deserializer1D_tapDelayEn_1      : std_logic;
  SIGNAL Deserializer1D_tapout            : std_logic_vector(0 TO 2);  -- boolean [3]
  SIGNAL Deserializer1D_muxOut            : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL Serializer1D_contl_cnt           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Serializer1D_invldSignal         : std_logic;
  SIGNAL Deserializer1D_out1              : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL serial_in_1                      : std_logic_vector(0 TO 3);  -- boolean [4]
  SIGNAL Serializer1D_data                : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Serializer1D_data_next           : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL serializer_PostProcessed         : std_logic;

BEGIN
  -- B_ks will be programmable eventually.
  -- For the Conference, they will be preset.
  -- 
  -- consider desired output rate
  -- 
  -- try delaying Valid_in by 3 in fast time, set that to Valid_out after rate transition
  -- 
  -- if any of the input set is 1, treat data line as valid
  -- 
  -- Try not using rate conversions for data/valid, just delay valid by one(four?) for the output valid
  -- 
  -- match delay of rate transitions

  u_Addr_Gen : pFIR_Testing_Addr_Gen
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              enb_1_2048_0 => enb_1_2048_0,
              Input_Addr => Addr_Gen_out1,  -- ufix9
              Data_History_Rd_addr => Addr_Gen_out2,  -- ufix9
              End_of_sample_calc => Addr_Gen_out3,
              b_k_addr => Addr_Gen_out4  -- ufix9
              );

  -- 
  u_Input_Data_Circular_Buffer : pFIR_Testing_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 32
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => Data_in,
              wr_addr => std_logic_vector(Rate_Transition1_out1),
              wr_en => Data_Type_Conversion4_out1,
              rd_addr => std_logic_vector(Rate_Transition8_out1),
              rd_dout => x_n_i
              );

  -- 
  u_B_k_Memory_Block2 : pFIR_Testing_B_k_Memory_Block2
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              din_A => std_logic_vector(Rate_Transition3_out1_1),  -- sfix32_En28
              addr_A => std_logic_vector(Data_Type_Conversion2_out1),  -- ufix9
              we_A => Data_Type_Conversion3_out1,
              din_B => std_logic_vector(Never_write_B2_out1),  -- sfix32_En28
              addr_B => Addr_Gen_out4,  -- ufix9
              we_B => Always_read_B2_out1,
              dout_A => B_k_Memory_Block2_out1,  -- sfix32_En28
              dout_B => b_i  -- sfix32_En28
              );

  u_Multiply_And_Sum : pFIR_Testing_Multiply_And_Sum
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              x_n_i => std_logic_vector(Rate_Transition2_out1_1),  -- sfix32_En28
              End_of_sample_calc => Alignment_Delay_out1,
              b_i => b_i,  -- sfix32_En28
              Filtered_Output => Multiply_And_Sum_out1,  -- sfix32_En28
              Output_Valid => Multiply_And_Sum_out2
              );

  Addr_Gen_out1_unsigned <= unsigned(Addr_Gen_out1);

  Rate_Transition1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition1_out1 <= to_unsigned(16#000#, 9);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        Rate_Transition1_out1 <= Addr_Gen_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_process;


  
  Data_Type_Conversion4_out1 <= '1' WHEN Valid_in /= '0' ELSE
      '0';

  Addr_Gen_out2_unsigned <= unsigned(Addr_Gen_out2);

  Rate_Transition8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition8_out1 <= to_unsigned(16#000#, 9);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        Rate_Transition8_out1 <= Addr_Gen_out2_unsigned;
      END IF;
    END IF;
  END PROCESS Rate_Transition8_process;


  x_n_i_signed <= signed(x_n_i);

  x_n_i_signed <= signed(x_n_i);

  Rate_Transition2_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition2_out1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_1 = '1' THEN
        Rate_Transition2_out1 <= x_n_i_signed;
      END IF;
    END IF;
  END PROCESS Rate_Transition2_output_process;


  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition2_out1_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        Rate_Transition2_out1_1 <= Rate_Transition2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Alignment_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Alignment_Delay_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        Alignment_Delay_out1 <= Addr_Gen_out3;
      END IF;
    END IF;
  END PROCESS Alignment_Delay_process;


  Wr_Data_signed <= signed(Wr_Data);

  Rate_Transition3_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition3_out1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_1 = '1' THEN
        Rate_Transition3_out1 <= Wr_Data_signed;
      END IF;
    END IF;
  END PROCESS Rate_Transition3_output_process;


  Wr_Addr_unsigned <= unsigned(Wr_Addr);

  Rate_Transition4_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition4_out1 <= to_unsigned(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_1 = '1' THEN
        Rate_Transition4_out1 <= Wr_Addr_unsigned;
      END IF;
    END IF;
  END PROCESS Rate_Transition4_output_process;


  Wr_En_signed <= signed(Wr_En);

  Rate_Transition5_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition5_out1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_1 = '1' THEN
        Rate_Transition5_out1 <= Wr_En_signed;
      END IF;
    END IF;
  END PROCESS Rate_Transition5_output_process;


  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition3_out1_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        Rate_Transition3_out1_1 <= Rate_Transition3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  PipelineRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition4_out1_1 <= to_unsigned(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        Rate_Transition4_out1_1 <= Rate_Transition4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  Data_Type_Conversion2_out1 <= Rate_Transition4_out1_1(8 DOWNTO 0);

  PipelineRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition5_out1_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        Rate_Transition5_out1_1 <= Rate_Transition5_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  
  Data_Type_Conversion3_out1 <= '1' WHEN Rate_Transition5_out1_1 /= to_signed(0, 32) ELSE
      '0';

  Never_write_B2_out1 <= to_signed(0, 32);

  Always_read_B2_out1 <= '0';

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply_And_Sum_out2_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        Multiply_And_Sum_out2_1 <= Multiply_And_Sum_out2;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Multiply_And_Sum_out1_signed <= signed(Multiply_And_Sum_out1);

  
  Output_Stabalizer_out1 <= Output_memory_out1 WHEN Multiply_And_Sum_out2_1 = '0' ELSE
      Multiply_And_Sum_out1_signed;

  Output_memory_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Output_memory_out1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        Output_memory_out1 <= Output_Stabalizer_out1;
      END IF;
    END IF;
  END PROCESS Output_memory_process;


  Rate_Transition_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition_out1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        Rate_Transition_out1 <= Output_memory_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition_process;


  Data_out <= std_logic_vector(Rate_Transition_out1);

  Deserializer1D_contl_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer1D_contl_cnt <= to_unsigned(16#0#, 3);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        IF Deserializer1D_contl_cnt = to_unsigned(16#3#, 3) THEN 
          Deserializer1D_contl_cnt <= to_unsigned(16#0#, 3);
        ELSE 
          Deserializer1D_contl_cnt <= Deserializer1D_contl_cnt + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS Deserializer1D_contl_process;

  Deserializer1D_tapDelayEn <= hdlcoder_to_stdlogic(Deserializer1D_contl_cnt < to_unsigned(16#3#, 3));
  
  Deserializer1D_contl_validOutput <= '1' WHEN Deserializer1D_contl_cnt = to_unsigned(16#3#, 3) ELSE
      '0';
  
  Deserializer1D_innerRegEn <= '1' WHEN Deserializer1D_contl_validOutput = '1' ELSE
      '0';
  
  Deserializer1D_innerRegCtrolEn <= '1' WHEN Deserializer1D_contl_validOutput = '1' ELSE
      '0';
  Deserializer1D_outBypassEn <= '1';

  Deserializer1D_tapDelayEn_1 <= enb AND Deserializer1D_tapDelayEn;

  Deserializer1D_tapDelayComp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer1D_tapout <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND Deserializer1D_tapDelayEn_1 = '1' THEN
        Deserializer1D_tapout(2) <= Data_Type_Conversion4_out1;
        Deserializer1D_tapout(0 TO 1) <= Deserializer1D_tapout(1 TO 2);
      END IF;
    END IF;
  END PROCESS Deserializer1D_tapDelayComp_process;


  Deserializer1D_muxOut(0) <= Deserializer1D_tapout(0);
  Deserializer1D_muxOut(1) <= Deserializer1D_tapout(1);
  Deserializer1D_muxOut(2) <= Deserializer1D_tapout(2);
  Deserializer1D_muxOut(3) <= Data_Type_Conversion4_out1;

  Serializer1D_contl_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Serializer1D_contl_cnt <= to_unsigned(16#0#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        IF Serializer1D_contl_cnt = to_unsigned(16#3#, 2) THEN 
          Serializer1D_contl_cnt <= to_unsigned(16#0#, 2);
        ELSE 
          Serializer1D_contl_cnt <= Serializer1D_contl_cnt + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS Serializer1D_contl_process;

  
  Serializer1D_invldSignal <= '1' WHEN Serializer1D_contl_cnt = to_unsigned(16#0#, 2) ELSE
      '0';

  Deserializer1D_regComp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer1D_out1 <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND Deserializer1D_innerRegEn = '1' THEN
        Deserializer1D_out1 <= Deserializer1D_muxOut;
      END IF;
    END IF;
  END PROCESS Deserializer1D_regComp_process;


  serial_in_1 <= Deserializer1D_out1;

  Serializer1D_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Serializer1D_data <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Serializer1D_data <= Serializer1D_data_next;
      END IF;
    END IF;
  END PROCESS Serializer1D_process;

  Serializer1D_output : PROCESS (Serializer1D_data, Serializer1D_invldSignal, serial_in_1)
  BEGIN
    Serializer1D_data_next <= Serializer1D_data;
    IF Serializer1D_invldSignal /= '0' THEN 
      serializer_PostProcessed <= serial_in_1(0);
    ELSE 
      serializer_PostProcessed <= Serializer1D_data(0);
    END IF;
    IF Serializer1D_invldSignal /= '0' THEN 
      Serializer1D_data_next(0 TO 2) <= serial_in_1(1 TO 3);
    ELSE 
      Serializer1D_data_next(0 TO 1) <= Serializer1D_data(1 TO 2);
      Serializer1D_data_next(2) <= serial_in_1(3);
    END IF;
  END PROCESS Serializer1D_output;


  Valid_out <= serializer_PostProcessed;

END rtl;

