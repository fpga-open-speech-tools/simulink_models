-- -------------------------------------------------------------
-- 
-- File Name: C:\Flat Earth\fpga-open-speech-tools\simulink_models\models\pFIR_Testing\hdlsrc\pFIR_Testing\pFIR_Testing_Test_FIR_with_Custom_FIR_Libraries_Sample_Based_Filtering.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: pFIR_Testing_Test_FIR_with_Custom_FIR_Libraries_Sample_Based_Filtering
-- Source Path: pFIR_Testing/dataplane/Test FIR with Custom FIR Libraries Sample Based Filtering
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY pFIR_Testing_Test_FIR_with_Custom_FIR_Libraries_Sample_Based_Filtering IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        enb_1_4_1                         :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        Sink_Valid                        :   IN    std_logic;
        Sink_Data                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Sink_Channel                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        register_control_enable           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        register_control_Wr_Data          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        register_control_RW_Addr          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        register_control_Wr_En            :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        Source_Data                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Source_Channel                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        Source_RW_Dout                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Source_Valid                      :   OUT   std_logic  -- ufix1
        );
END pFIR_Testing_Test_FIR_with_Custom_FIR_Libraries_Sample_Based_Filtering;


ARCHITECTURE rtl OF pFIR_Testing_Test_FIR_with_Custom_FIR_Libraries_Sample_Based_Filtering IS

  -- Component Declarations
  COMPONENT pFIR_Testing_Left_Channel_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          Left_Data_Sink                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          register_control_enable         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          left_data_valid                 :   IN    std_logic;
          register_control_Wr_Data        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          register_control_RW_Addr        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          register_control_Wr_En          :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          Left_Data_Source                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Left_Data_Valid_Source          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT pFIR_Testing_Right_Channel_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          Right_Data_Sink                 :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          register_control_enable         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          right_data_valid                :   IN    std_logic;
          register_control_Wr_Data        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          register_control_RW_Addr        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          register_control_Wr_En          :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          Right_Data_Source               :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Right_Data_Valid_Source         :   OUT   std_logic;
          Right_RW_Dout                   :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT pFIR_Testing_MATLAB_Function
    PORT( leftData                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          leftValid                       :   IN    std_logic;
          rightData                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          rightValid                      :   IN    std_logic;
          sourceData                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          sourceChannel                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          sourceValid                     :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : pFIR_Testing_Left_Channel_Processing
    USE ENTITY work.pFIR_Testing_Left_Channel_Processing(rtl);

  FOR ALL : pFIR_Testing_Right_Channel_Processing
    USE ENTITY work.pFIR_Testing_Right_Channel_Processing(rtl);

  FOR ALL : pFIR_Testing_MATLAB_Function
    USE ENTITY work.pFIR_Testing_MATLAB_Function(rtl);

  -- Signals
  SIGNAL Sink_Channel_unsigned            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL leftEnable                       : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Left_Channel_Processing_out1     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Left_Channel_Processing_out2     : std_logic;
  SIGNAL rightEnable                      : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Right_Channel_Processing_out1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Right_Channel_Processing_out2    : std_logic;
  SIGNAL Right_Channel_Processing_out3    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sourceData                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sourceChannel                    : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL sourceValid                      : std_logic;  -- ufix1

BEGIN
  -- B_k data same for both sides
  -- 
  -- Both channels use the same counter cycle, so right channel
  -- is delayed to allow output to show both
  -- 
  -- The Left Channel Processing block 
  -- only writes input data when channel 0
  -- is detected
  -- 
  -- The Right Channel Processing block 
  -- only writes input data when channel 1
  -- is detected
  -- 
  -- Check if Channel 0 
  -- (Left Channel)
  -- 
  -- Select output data
  -- based on channel valid
  -- 
  -- Check if Channel 1 
  -- (Right Channel)

  u_Left_Channel_Processing : pFIR_Testing_Left_Channel_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_4_0 => enb_1_4_0,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2048_0 => enb_1_2048_0,
              Left_Data_Sink => Sink_Data,  -- sfix32_En28
              register_control_enable => register_control_enable,  -- sfix32_En28
              left_data_valid => Logical_Operator_out1,
              register_control_Wr_Data => register_control_Wr_Data,  -- sfix32_En28
              register_control_RW_Addr => register_control_RW_Addr,  -- uint32
              register_control_Wr_En => register_control_Wr_En,  -- int32
              Left_Data_Source => Left_Channel_Processing_out1,  -- sfix32_En28
              Left_Data_Valid_Source => Left_Channel_Processing_out2
              );

  u_Right_Channel_Processing : pFIR_Testing_Right_Channel_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_4_0 => enb_1_4_0,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2048_0 => enb_1_2048_0,
              Right_Data_Sink => Sink_Data,  -- sfix32_En28
              register_control_enable => register_control_enable,  -- sfix32_En28
              right_data_valid => Logical_Operator1_out1,
              register_control_Wr_Data => register_control_Wr_Data,  -- sfix32_En28
              register_control_RW_Addr => register_control_RW_Addr,  -- uint32
              register_control_Wr_En => register_control_Wr_En,  -- int32
              Right_Data_Source => Right_Channel_Processing_out1,  -- sfix32_En28
              Right_Data_Valid_Source => Right_Channel_Processing_out2,
              Right_RW_Dout => Right_Channel_Processing_out3  -- sfix32_En28
              );

  u_MATLAB_Function : pFIR_Testing_MATLAB_Function
    PORT MAP( leftData => Left_Channel_Processing_out1,  -- sfix32_En28
              leftValid => Left_Channel_Processing_out2,
              rightData => Right_Channel_Processing_out1,  -- sfix32_En28
              rightValid => Right_Channel_Processing_out2,
              sourceData => sourceData,  -- sfix32_En28
              sourceChannel => sourceChannel,  -- ufix2
              sourceValid => sourceValid  -- ufix1
              );

  Sink_Channel_unsigned <= unsigned(Sink_Channel);

  
  leftEnable <= '1' WHEN Sink_Channel_unsigned = to_unsigned(16#0#, 2) ELSE
      '0';

  Logical_Operator_out1 <= leftEnable AND Sink_Valid;

  
  rightEnable <= '1' WHEN Sink_Channel_unsigned = to_unsigned(16#1#, 2) ELSE
      '0';

  Logical_Operator1_out1 <= rightEnable AND Sink_Valid;

  Source_Data <= sourceData;

  Source_Channel <= sourceChannel;

  Source_RW_Dout <= Right_Channel_Processing_out3;

  Source_Valid <= sourceValid;

END rtl;

