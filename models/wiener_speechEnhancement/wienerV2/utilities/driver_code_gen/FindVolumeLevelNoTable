uint8_t find_volume_level(uint32_t fp28_num)
{
  // Initialize the volume level
  uint8_t volume_level = 0;

  // Divide the input number by the reciprocal of the step size
  uint32_t inputnum = fp28_num*10*8/3;

  // Find the integer portion and the tenths portion
  // (Steps are in 3/8 increments so only that position is needed)
  uint16_t upperval = (uint16_t)((inputnum)>>=16)/10;
  uint16_t lowerval = inputnum-upperval*10;

  // Catch whether the user exceeded the maximum attenuation
  if (upperval > 255)
  {
    upperval = 255;
    lowerval = 0;
    printk("Input exceeds the maximum codec attenuation of -95.625 dB.\n");
    printk("Setting attenuation to -95.625 dB.\n");
  }

  // Set the volume level to the integer portion
  volume_level = (uint8_t)(upperval);

  // If the tenths portion is greater than five, round up
  if (lowerval > 5)
    volume_level += 1;

  return volume_level;
}

/** Converts an 8 bit volume level representation to a 32 bit fixed point 28 number
    @param volume_level an 8 bit representation of the attenuation
    @return fp28_num 32 bit representation of a fixed point number
*/
uint32_t decode_volume(uint8_t volume_level)
{
  // Cast the volume level to a 32 bit number
  uint32_t decodedDb = (uint32_t)volume_level;

  // Return the shifted and scaled number to keep with convention
  return (decodedDb<<=16)*3/8;
}

