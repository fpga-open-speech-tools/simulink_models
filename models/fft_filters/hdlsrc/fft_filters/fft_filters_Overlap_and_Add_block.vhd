-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\wickh\Documents\NIH\simulink_models\models\fft_filters\hdlsrc\fft_filters\fft_filters_Overlap_and_Add_block.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: fft_filters_Overlap_and_Add_block
-- Source Path: fft_filters/dataplane/FFT_Analysis_Synthesis_Right/Synthesis/Overlap_and_Add
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.fft_filters_dataplane_pkg.ALL;

ENTITY fft_filters_Overlap_and_Add_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_16_0                        :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        enb_1_16_1                        :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb_1_2048_33                     :   IN    std_logic;
        IFFT_Data                         :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
        iFFT_Valid                        :   IN    std_logic;
        FFT_Frame_Pulse                   :   IN    std_logic;
        signal_out                        :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En23
        );
END fft_filters_Overlap_and_Add_block;


ARCHITECTURE rtl OF fft_filters_Overlap_and_Add_block IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT fft_filters_Hanning_ROM_block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_16_1                      :   IN    std_logic;
          Index                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          hanning_value                   :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En22
          );
  END COMPONENT;

  COMPONENT fft_filters_FIFO_Write_Select
    PORT( fifo_counter                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          valid_signal                    :   IN    std_logic;
          valid_1                         :   OUT   std_logic;
          valid_2                         :   OUT   std_logic;
          valid_3                         :   OUT   std_logic;
          valid_4                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT fft_filters_fifo_state_machine
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          valid                           :   IN    std_logic;
          pop                             :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT fft_filters_FIFO_1_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          enb_1_16_1                      :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(30 DOWNTO 0)  -- sfix31_En23
          );
  END COMPONENT;

  COMPONENT fft_filters_FIFO_2_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          enb_1_16_1                      :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(30 DOWNTO 0)  -- sfix31_En23
          );
  END COMPONENT;

  COMPONENT fft_filters_FIFO_3_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          enb_1_16_1                      :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(30 DOWNTO 0)  -- sfix31_En23
          );
  END COMPONENT;

  COMPONENT fft_filters_FIFO_4_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          enb_1_16_1                      :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(30 DOWNTO 0)  -- sfix31_En23
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : fft_filters_Hanning_ROM_block2
    USE ENTITY work.fft_filters_Hanning_ROM_block2(rtl);

  FOR ALL : fft_filters_FIFO_Write_Select
    USE ENTITY work.fft_filters_FIFO_Write_Select(rtl);

  FOR ALL : fft_filters_fifo_state_machine
    USE ENTITY work.fft_filters_fifo_state_machine(rtl);

  FOR ALL : fft_filters_FIFO_1_block
    USE ENTITY work.fft_filters_FIFO_1_block(rtl);

  FOR ALL : fft_filters_FIFO_2_block
    USE ENTITY work.fft_filters_FIFO_2_block(rtl);

  FOR ALL : fft_filters_FIFO_3_block
    USE ENTITY work.fft_filters_FIFO_3_block(rtl);

  FOR ALL : fft_filters_FIFO_4_block
    USE ENTITY work.fft_filters_FIFO_4_block(rtl);

  -- Signals
  SIGNAL IFFT_Data_signed                 : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL IFFT_Data_1                      : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Bitwise_Operator_out1            : std_logic;
  SIGNAL counter_B_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Hanning_ROM_out1                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Hanning_ROM_out1_1               : signed(23 DOWNTO 0);  -- sfix24_En22
  SIGNAL Hanning_ROM_out1_2               : signed(23 DOWNTO 0);  -- sfix24_En22
  SIGNAL Product_mul_temp                 : signed(54 DOWNTO 0);  -- sfix55_En45
  SIGNAL Product_out1                     : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Product_out1_1                   : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Product_out1_2                   : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL delayMatch8_reg                  : vector_of_signed31(0 TO 252);  -- sfix31 [253]
  SIGNAL Product_out1_3                   : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Frame_counter_out1               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL FIFO_Write_Select_out1           : std_logic;
  SIGNAL FIFO_Write_Select_out2           : std_logic;
  SIGNAL FIFO_Write_Select_out3           : std_logic;
  SIGNAL FIFO_Write_Select_out4           : std_logic;
  SIGNAL delayMatch9_reg                  : std_logic_vector(0 TO 253);  -- ufix1 [254]
  SIGNAL FIFO_Write_Select_out1_1         : std_logic;
  SIGNAL fifo_state_machine_out1          : std_logic;
  SIGNAL Rate_Transition4_ds_out          : std_logic;
  SIGNAL Rate_Transition4_out1            : std_logic;
  SIGNAL Rate_Transition4_out1_1          : std_logic;
  SIGNAL Product_out1_4                   : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL delayMatch10_reg                 : vector_of_signed31(0 TO 252);  -- sfix31 [253]
  SIGNAL Product_out1_5                   : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL delayMatch11_reg                 : std_logic_vector(0 TO 253);  -- ufix1 [254]
  SIGNAL FIFO_Write_Select_out2_1         : std_logic;
  SIGNAL fifo_state_machine1_out1         : std_logic;
  SIGNAL Rate_Transition1_ds_out          : std_logic;
  SIGNAL Rate_Transition1_out1            : std_logic;
  SIGNAL Rate_Transition1_out1_1          : std_logic;
  SIGNAL Product_out1_6                   : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL delayMatch12_reg                 : vector_of_signed31(0 TO 252);  -- sfix31 [253]
  SIGNAL Product_out1_7                   : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL delayMatch13_reg                 : std_logic_vector(0 TO 253);  -- ufix1 [254]
  SIGNAL FIFO_Write_Select_out3_1         : std_logic;
  SIGNAL fifo_state_machine2_out1         : std_logic;
  SIGNAL Rate_Transition2_ds_out          : std_logic;
  SIGNAL Rate_Transition2_out1            : std_logic;
  SIGNAL Rate_Transition2_out1_1          : std_logic;
  SIGNAL Product_out1_8                   : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL delayMatch14_reg                 : vector_of_signed31(0 TO 252);  -- sfix31 [253]
  SIGNAL Product_out1_9                   : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL delayMatch15_reg                 : std_logic_vector(0 TO 253);  -- ufix1 [254]
  SIGNAL FIFO_Write_Select_out4_1         : std_logic;
  SIGNAL fifo_state_machine3_out1         : std_logic;
  SIGNAL Rate_Transition3_ds_out          : std_logic;
  SIGNAL Rate_Transition3_out1            : std_logic;
  SIGNAL Rate_Transition3_out1_1          : std_logic;
  SIGNAL FIFO_1_out1                      : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL FIFO_1_out1_1                    : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL FIFO_2_out1                      : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL FIFO_2_out1_1                    : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL FIFO_3_out1                      : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL FIFO_3_out1_1                    : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL FIFO_4_out1                      : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL FIFO_4_out1_1                    : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Add_add_cast                     : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_add_cast_1                   : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_add_temp                     : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_add_cast_2                   : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_add_temp_1                   : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_add_cast_3                   : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_out1                         : signed(32 DOWNTO 0);  -- sfix33_En23

BEGIN
  u_Hanning_ROM : fft_filters_Hanning_ROM_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_16_1 => enb_1_16_1,
              Index => std_logic_vector(counter_B_out1),  -- uint8
              hanning_value => Hanning_ROM_out1  -- sfix24_En22
              );

  u_FIFO_Write_Select : fft_filters_FIFO_Write_Select
    PORT MAP( fifo_counter => std_logic_vector(Frame_counter_out1),  -- ufix2
              valid_signal => iFFT_Valid,
              valid_1 => FIFO_Write_Select_out1,
              valid_2 => FIFO_Write_Select_out2,
              valid_3 => FIFO_Write_Select_out3,
              valid_4 => FIFO_Write_Select_out4
              );

  u_fifo_state_machine : fft_filters_fifo_state_machine
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              valid => FIFO_Write_Select_out1,
              pop => fifo_state_machine_out1
              );

  u_fifo_state_machine1 : fft_filters_fifo_state_machine
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              valid => FIFO_Write_Select_out2,
              pop => fifo_state_machine1_out1
              );

  u_fifo_state_machine2 : fft_filters_fifo_state_machine
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              valid => FIFO_Write_Select_out3,
              pop => fifo_state_machine2_out1
              );

  u_fifo_state_machine3 : fft_filters_fifo_state_machine
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              valid => FIFO_Write_Select_out4,
              pop => fifo_state_machine3_out1
              );

  u_FIFO_1 : fft_filters_FIFO_1_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              enb_1_16_1 => enb_1_16_1,
              enb_1_2048_1 => enb_1_2048_1,
              In_rsvd => std_logic_vector(Product_out1_3),  -- sfix31_En23
              Push => FIFO_Write_Select_out1_1,
              Pop => Rate_Transition4_out1_1,
              Out_rsvd => FIFO_1_out1  -- sfix31_En23
              );

  u_FIFO_2 : fft_filters_FIFO_2_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              enb_1_16_1 => enb_1_16_1,
              enb_1_2048_1 => enb_1_2048_1,
              In_rsvd => std_logic_vector(Product_out1_5),  -- sfix31_En23
              Push => FIFO_Write_Select_out2_1,
              Pop => Rate_Transition1_out1_1,
              Out_rsvd => FIFO_2_out1  -- sfix31_En23
              );

  u_FIFO_3 : fft_filters_FIFO_3_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              enb_1_16_1 => enb_1_16_1,
              enb_1_2048_1 => enb_1_2048_1,
              In_rsvd => std_logic_vector(Product_out1_7),  -- sfix31_En23
              Push => FIFO_Write_Select_out3_1,
              Pop => Rate_Transition2_out1_1,
              Out_rsvd => FIFO_3_out1  -- sfix31_En23
              );

  u_FIFO_4 : fft_filters_FIFO_4_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              enb_1_16_1 => enb_1_16_1,
              enb_1_2048_1 => enb_1_2048_1,
              In_rsvd => std_logic_vector(Product_out1_9),  -- sfix31_En23
              Push => FIFO_Write_Select_out4_1,
              Pop => Rate_Transition3_out1_1,
              Out_rsvd => FIFO_4_out1  -- sfix31_En23
              );

  IFFT_Data_signed <= signed(IFFT_Data);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      IFFT_Data_1 <= to_signed(16#00000000#, 31);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        IFFT_Data_1 <= IFFT_Data_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  Bitwise_Operator_out1 <=  NOT iFFT_Valid;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 128
  counter_B_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      counter_B_out1 <= to_unsigned(16#00#, 8);
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_0 = '1' THEN
        IF Bitwise_Operator_out1 = '1' THEN 
          counter_B_out1 <= to_unsigned(16#00#, 8);
        ELSIF iFFT_Valid = '1' THEN 
          IF counter_B_out1 >= to_unsigned(16#80#, 8) THEN 
            counter_B_out1 <= to_unsigned(16#00#, 8);
          ELSE 
            counter_B_out1 <= counter_B_out1 + to_unsigned(16#01#, 8);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS counter_B_process;


  Hanning_ROM_out1_1 <= signed(Hanning_ROM_out1);

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Hanning_ROM_out1_2 <= to_signed(16#000000#, 24);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Hanning_ROM_out1_2 <= Hanning_ROM_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product_mul_temp <= IFFT_Data_1 * Hanning_ROM_out1_2;
  Product_out1 <= Product_mul_temp(52 DOWNTO 22);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_1 <= to_signed(16#00000000#, 31);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_out1_1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  FIFO_11_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_2 <= to_signed(16#00000000#, 31);
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_1 = '1' THEN
        Product_out1_2 <= Product_out1_1;
      END IF;
    END IF;
  END PROCESS FIFO_11_output_process;


  delayMatch8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch8_reg <= (OTHERS => to_signed(16#00000000#, 31));
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch8_reg(0) <= Product_out1_2;
        delayMatch8_reg(1 TO 252) <= delayMatch8_reg(0 TO 251);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  Product_out1_3 <= delayMatch8_reg(252);

  -- Free running, Unsigned Counter
  --  initial value   = 2
  --  step value      = 1
  Frame_counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Frame_counter_out1 <= to_unsigned(16#2#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_0 = '1' AND FFT_Frame_Pulse = '1' THEN
        Frame_counter_out1 <= Frame_counter_out1 + to_unsigned(16#1#, 2);
      END IF;
    END IF;
  END PROCESS Frame_counter_process;


  delayMatch9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch9_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch9_reg(0) <= FIFO_Write_Select_out1;
        delayMatch9_reg(1 TO 253) <= delayMatch9_reg(0 TO 252);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  FIFO_Write_Select_out1_1 <= delayMatch9_reg(253);

  -- Downsample register
  Rate_Transition4_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition4_ds_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_33 = '1' THEN
        Rate_Transition4_ds_out <= fifo_state_machine_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition4_ds_process;


  -- Downsample output register
  Rate_Transition4_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition4_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition4_out1 <= Rate_Transition4_ds_out;
      END IF;
    END IF;
  END PROCESS Rate_Transition4_output_process;


  PipelineRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition4_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition4_out1_1 <= Rate_Transition4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;


  FIFO_21_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_4 <= to_signed(16#00000000#, 31);
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_1 = '1' THEN
        Product_out1_4 <= Product_out1_1;
      END IF;
    END IF;
  END PROCESS FIFO_21_output_process;


  delayMatch10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch10_reg <= (OTHERS => to_signed(16#00000000#, 31));
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch10_reg(0) <= Product_out1_4;
        delayMatch10_reg(1 TO 252) <= delayMatch10_reg(0 TO 251);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  Product_out1_5 <= delayMatch10_reg(252);

  delayMatch11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch11_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch11_reg(0) <= FIFO_Write_Select_out2;
        delayMatch11_reg(1 TO 253) <= delayMatch11_reg(0 TO 252);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  FIFO_Write_Select_out2_1 <= delayMatch11_reg(253);

  -- Downsample register
  Rate_Transition1_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition1_ds_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_33 = '1' THEN
        Rate_Transition1_ds_out <= fifo_state_machine1_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_ds_process;


  -- Downsample output register
  Rate_Transition1_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition1_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition1_out1 <= Rate_Transition1_ds_out;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_output_process;


  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition1_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition1_out1_1 <= Rate_Transition1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  FIFO_31_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_6 <= to_signed(16#00000000#, 31);
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_1 = '1' THEN
        Product_out1_6 <= Product_out1_1;
      END IF;
    END IF;
  END PROCESS FIFO_31_output_process;


  delayMatch12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch12_reg <= (OTHERS => to_signed(16#00000000#, 31));
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch12_reg(0) <= Product_out1_6;
        delayMatch12_reg(1 TO 252) <= delayMatch12_reg(0 TO 251);
      END IF;
    END IF;
  END PROCESS delayMatch12_process;

  Product_out1_7 <= delayMatch12_reg(252);

  delayMatch13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch13_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch13_reg(0) <= FIFO_Write_Select_out3;
        delayMatch13_reg(1 TO 253) <= delayMatch13_reg(0 TO 252);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  FIFO_Write_Select_out3_1 <= delayMatch13_reg(253);

  -- Downsample register
  Rate_Transition2_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition2_ds_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_33 = '1' THEN
        Rate_Transition2_ds_out <= fifo_state_machine2_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition2_ds_process;


  -- Downsample output register
  Rate_Transition2_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition2_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition2_out1 <= Rate_Transition2_ds_out;
      END IF;
    END IF;
  END PROCESS Rate_Transition2_output_process;


  PipelineRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition2_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition2_out1_1 <= Rate_Transition2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  FIFO_41_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_8 <= to_signed(16#00000000#, 31);
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_1 = '1' THEN
        Product_out1_8 <= Product_out1_1;
      END IF;
    END IF;
  END PROCESS FIFO_41_output_process;


  delayMatch14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch14_reg <= (OTHERS => to_signed(16#00000000#, 31));
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch14_reg(0) <= Product_out1_8;
        delayMatch14_reg(1 TO 252) <= delayMatch14_reg(0 TO 251);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  Product_out1_9 <= delayMatch14_reg(252);

  delayMatch15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch15_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch15_reg(0) <= FIFO_Write_Select_out4;
        delayMatch15_reg(1 TO 253) <= delayMatch15_reg(0 TO 252);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  FIFO_Write_Select_out4_1 <= delayMatch15_reg(253);

  -- Downsample register
  Rate_Transition3_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition3_ds_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_33 = '1' THEN
        Rate_Transition3_ds_out <= fifo_state_machine3_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition3_ds_process;


  -- Downsample output register
  Rate_Transition3_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition3_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition3_out1 <= Rate_Transition3_ds_out;
      END IF;
    END IF;
  END PROCESS Rate_Transition3_output_process;


  PipelineRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition3_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition3_out1_1 <= Rate_Transition3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  FIFO_1_out1_1 <= signed(FIFO_1_out1);

  FIFO_2_out1_1 <= signed(FIFO_2_out1);

  FIFO_3_out1_1 <= signed(FIFO_3_out1);

  FIFO_4_out1_1 <= signed(FIFO_4_out1);

  Add_add_cast <= resize(FIFO_1_out1_1, 33);
  Add_add_cast_1 <= resize(FIFO_2_out1_1, 33);
  Add_add_temp <= Add_add_cast + Add_add_cast_1;
  Add_add_cast_2 <= resize(FIFO_3_out1_1, 33);
  Add_add_temp_1 <= Add_add_temp + Add_add_cast_2;
  Add_add_cast_3 <= resize(FIFO_4_out1_1, 33);
  Add_out1 <= Add_add_temp_1 + Add_add_cast_3;

  signal_out <= std_logic_vector(Add_out1);

END rtl;

