-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\wickh\Documents\NIH\simulink_models\models\fft_filters\hdlsrc\fft_filters\fft_filters_Frequency_Domain_Processing.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: fft_filters_Frequency_Domain_Processing
-- Source Path: fft_filters/dataplane/FFT_Analysis_Synthesis_Left/Frequency_Domain_Processing
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY fft_filters_Frequency_Domain_Processing IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_16_0                        :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_16_1                        :   IN    std_logic;
        FFT_results_re                    :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
        FFT_results_im                    :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
        valid_in                          :   IN    std_logic;
        frame_pulse_in                    :   IN    std_logic;
        passthrough                       :   IN    std_logic;
        filter_select                     :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        modified_frequencies_re           :   OUT   std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
        modified_frequencies_im           :   OUT   std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
        valid_out                         :   OUT   std_logic;
        frame_pulse_out                   :   OUT   std_logic
        );
END fft_filters_Frequency_Domain_Processing;


ARCHITECTURE rtl OF fft_filters_Frequency_Domain_Processing IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT fft_filters_Apply_Complex_Gains
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_16_1                      :   IN    std_logic;
          FFT_data_re                     :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          FFT_data_im                     :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          valid_data                      :   IN    std_logic;
          frame_pulse_in                  :   IN    std_logic;
          filter_select                   :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          Processed_FFT_data_re           :   OUT   std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          Processed_FFT_data_im           :   OUT   std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          valid                           :   OUT   std_logic;
          frame_pulse_out                 :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : fft_filters_Apply_Complex_Gains
    USE ENTITY work.fft_filters_Apply_Complex_Gains(rtl);

  -- Signals
  SIGNAL passthrough_1                    : std_logic;
  SIGNAL passthrough_2                    : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Apply_Complex_Gains_out1_re      : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL Apply_Complex_Gains_out1_im      : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL Apply_Complex_Gains_out2         : std_logic;
  SIGNAL Apply_Complex_Gains_out3         : std_logic;
  SIGNAL Apply_Complex_Gains_out1_re_signed : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Apply_Complex_Gains_out1_im_signed : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL FFT_results_re_1                 : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL FFT_results_im_1                 : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL FFT_results_re_2                 : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL FFT_results_im_2                 : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Switch_out1_re                   : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Switch_out1_im                   : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL iFFT_bypass_reg_re               : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL iFFT_bypass_reg_im               : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Switch_out1_re_1                 : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Switch_out1_im_1                 : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Switch2_out1                     : std_logic;

BEGIN
  -- Switch between passthrough mode 
  -- (no processing of FFT data)
  -- and frequency domain processing mode.  
  -- Passthrough mode when passthrough = 1.

  u_Apply_Complex_Gains : fft_filters_Apply_Complex_Gains
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              enb => enb,
              enb_1_16_1 => enb_1_16_1,
              FFT_data_re => FFT_results_re,  -- sfix31_En23
              FFT_data_im => FFT_results_im,  -- sfix31_En23
              valid_data => valid_in,
              frame_pulse_in => frame_pulse_in,
              filter_select => filter_select,  -- ufix2
              Processed_FFT_data_re => Apply_Complex_Gains_out1_re,  -- sfix31_En23
              Processed_FFT_data_im => Apply_Complex_Gains_out1_im,  -- sfix31_En23
              valid => Apply_Complex_Gains_out2,
              frame_pulse_out => Apply_Complex_Gains_out3
              );

  passthrough_1 <= passthrough;

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      passthrough_2 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        passthrough_2 <= passthrough_1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  
  switch_compare_1 <= '1' WHEN passthrough_2 > '0' ELSE
      '0';

  Apply_Complex_Gains_out1_re_signed <= signed(Apply_Complex_Gains_out1_re);

  Apply_Complex_Gains_out1_im_signed <= signed(Apply_Complex_Gains_out1_im);

  FFT_results_re_1 <= signed(FFT_results_re);

  FFT_results_im_1 <= signed(FFT_results_im);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      FFT_results_re_2 <= to_signed(16#00000000#, 31);
      FFT_results_im_2 <= to_signed(16#00000000#, 31);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        FFT_results_re_2 <= FFT_results_re_1;
        FFT_results_im_2 <= FFT_results_im_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  
  Switch_out1_re <= Apply_Complex_Gains_out1_re_signed WHEN switch_compare_1 = '0' ELSE
      FFT_results_re_2;
  
  Switch_out1_im <= Apply_Complex_Gains_out1_im_signed WHEN switch_compare_1 = '0' ELSE
      FFT_results_im_2;

  iFFT_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iFFT_bypass_reg_re <= to_signed(16#00000000#, 31);
      iFFT_bypass_reg_im <= to_signed(16#00000000#, 31);
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_1 = '1' THEN
        iFFT_bypass_reg_im <= Switch_out1_im;
        iFFT_bypass_reg_re <= Switch_out1_re;
      END IF;
    END IF;
  END PROCESS iFFT_bypass_process;

  
  Switch_out1_re_1 <= Switch_out1_re WHEN enb_1_16_1 = '1' ELSE
      iFFT_bypass_reg_re;
  
  Switch_out1_im_1 <= Switch_out1_im WHEN enb_1_16_1 = '1' ELSE
      iFFT_bypass_reg_im;

  modified_frequencies_re <= std_logic_vector(Switch_out1_re_1);

  modified_frequencies_im <= std_logic_vector(Switch_out1_im_1);

  
  switch_compare_1_1 <= '1' WHEN passthrough > '0' ELSE
      '0';

  
  Switch1_out1 <= Apply_Complex_Gains_out2 WHEN switch_compare_1_1 = '0' ELSE
      valid_in;

  
  switch_compare_1_2 <= '1' WHEN passthrough > '0' ELSE
      '0';

  
  Switch2_out1 <= Apply_Complex_Gains_out3 WHEN switch_compare_1_2 = '0' ELSE
      frame_pulse_in;

  valid_out <= Switch1_out1;

  frame_pulse_out <= Switch2_out1;

END rtl;

