-- -------------------------------------------------------------
-- 
-- File Name: /home/cb54103/Documents/fpga-open-speech-tools/simulink_models/models/Dynamic_Compression_Model/hdlsrc/sm_DynamicCompression/sm_DynamicCompression_Compression_Gain_Calc_block.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: sm_DynamicCompression_Compression_Gain_Calc_block
-- Source Path: sm_DynamicCompression/dataplane/Avalon Data Processing/Left Channel Processing/recalculate/Nchan_FbankAGC_AID/Compression_2/Compression_Gain_Calc
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY sm_DynamicCompression_Compression_Gain_Calc_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Table_Fill                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Write_Addr                        :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        Table_Fill_Valid                  :   IN    std_logic;
        Data_In                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Gain_C_out                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
        );
END sm_DynamicCompression_Compression_Gain_Calc_block;


ARCHITECTURE rtl OF sm_DynamicCompression_Compression_Gain_Calc_block IS

  -- Component Declarations
  COMPONENT sm_DynamicCompression_LogAddressing_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          addr_r                          :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
          );
  END COMPONENT;

  COMPONENT sm_DynamicCompression_High_Gain_Table_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          wr_addr                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          rd_dout                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT sm_DynamicCompression_Low_Gain_Table_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          wr_addr                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          rd_dout                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT sm_DynamicCompression_Linear_Approximation_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          G_high                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          G_low                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          addr_low                        :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          alphaX_in                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          G_Desired                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : sm_DynamicCompression_LogAddressing_block
    USE ENTITY work.sm_DynamicCompression_LogAddressing_block(rtl);

  FOR ALL : sm_DynamicCompression_High_Gain_Table_block
    USE ENTITY work.sm_DynamicCompression_High_Gain_Table_block(rtl);

  FOR ALL : sm_DynamicCompression_Low_Gain_Table_block
    USE ENTITY work.sm_DynamicCompression_Low_Gain_Table_block(rtl);

  FOR ALL : sm_DynamicCompression_Linear_Approximation_block
    USE ENTITY work.sm_DynamicCompression_Linear_Approximation_block(rtl);

  -- Signals
  SIGNAL Data_In_signed                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Abs_y                            : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Abs_cast                         : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL alphaX_in                        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL addr_low                         : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL addr_low_unsigned                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Constant_out1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL addr_high                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL G_high                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay2_out1                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL G_low                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay3_out1                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Unit_Delay1_out1                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Linear_Approximation_out1        : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Data_In assumed before applied prescription FIR
  -- 
  -- Compression: Assume the input is a single band coming from the system.
  -- 
  -- Goals: 
  -- 	- Take in a single point 
  -- 	- compare the volume to a known hard cap for the data
  -- 	- attenuate the signal if it's above a certain threshold
  -- 		- the distance above the threshold should be cut in dB by a ratio R
  -- 	- return the output point at the same sample rate received

  u_LogAddressing : sm_DynamicCompression_LogAddressing_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              x_in => std_logic_vector(alphaX_in),  -- sfix32_En28
              addr_r => addr_low  -- ufix9
              );

  u_High_Gain_Table : sm_DynamicCompression_High_Gain_Table_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              wr_din => Table_Fill,  -- sfix32_En28
              wr_addr => Write_Addr,  -- ufix9
              wr_en => Table_Fill_Valid,
              rd_addr => std_logic_vector(addr_high),  -- ufix9
              rd_dout => G_high  -- sfix32_En28
              );

  u_Low_Gain_Table : sm_DynamicCompression_Low_Gain_Table_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              wr_din => Table_Fill,  -- sfix32_En28
              wr_addr => Write_Addr,  -- ufix9
              wr_en => Table_Fill_Valid,
              rd_addr => addr_low,  -- ufix9
              rd_dout => G_low  -- sfix32_En28
              );

  u_Linear_Approximation : sm_DynamicCompression_Linear_Approximation_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              G_high => G_high,  -- sfix32_En28
              G_low => G_low,  -- sfix32_En28
              addr_low => std_logic_vector(Unit_Delay3_out1),  -- ufix9
              alphaX_in => std_logic_vector(Unit_Delay1_out1),  -- sfix32_En28
              G_Desired => Linear_Approximation_out1  -- sfix32_En28
              );

  Data_In_signed <= signed(Data_In);

  Abs_cast <= resize(Data_In_signed, 33);
  
  Abs_y <=  - (Abs_cast) WHEN Data_In_signed < to_signed(0, 32) ELSE
      resize(Data_In_signed, 33);
  alphaX_in <= Abs_y(31 DOWNTO 0);

  addr_low_unsigned <= unsigned(addr_low);

  Constant_out1 <= to_unsigned(16#001#, 9);

  addr_high <= addr_low_unsigned + Constant_out1;

  Unit_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay2_out1 <= to_signed(268435456, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Unit_Delay2_out1 <= alphaX_in;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;


  Unit_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay3_out1 <= to_unsigned(16#001#, 9);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Unit_Delay3_out1 <= addr_low_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay3_process;


  Unit_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay1_out1 <= to_signed(268435456, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Unit_Delay1_out1 <= Unit_Delay2_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  Gain_C_out <= Linear_Approximation_out1;

END rtl;

