-- -------------------------------------------------------------
-- 
-- File Name: /home/cb54103/Documents/fpga-open-speech-tools/simulink_models/models/Dynamic_Compression_Model/hdlsrc/sm_DynamicCompression/sm_DynamicCompression_Static_pFIR_block.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: sm_DynamicCompression_Static_pFIR_block
-- Source Path: sm_DynamicCompression/dataplane/Avalon Data Processing/Left Channel Processing/recalculate/Static_pFIR
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.sm_DynamicCompression_dataplane_pkg.ALL;

ENTITY sm_DynamicCompression_Static_pFIR_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_1024_0                      :   IN    std_logic;
        enb                               :   IN    std_logic;
        Compressed_Data_In                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Valid_in                          :   IN    std_logic;
        Data_out                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
        );
END sm_DynamicCompression_Static_pFIR_block;


ARCHITECTURE rtl OF sm_DynamicCompression_Static_pFIR_block IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT sm_DynamicCompression_Addr_Gen_block4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_1024_0                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          Input_Addr                      :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          Data_History_Rd_addr            :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          End_of_sample_calc              :   OUT   std_logic;
          b_k_addr                        :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT sm_DynamicCompression_SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT sm_DynamicCompression_B_k_Memory_Block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_A                           :   IN    std_logic_vector(63 DOWNTO 0);  -- sfix64_En32
          addr_A                          :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          we_A                            :   IN    std_logic;
          din_B                           :   IN    std_logic_vector(63 DOWNTO 0);  -- sfix64_En32
          addr_B                          :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          we_B                            :   IN    std_logic;
          dout_B                          :   OUT   std_logic_vector(63 DOWNTO 0)  -- sfix64_En32
          );
  END COMPONENT;

  COMPONENT sm_DynamicCompression_Multiply_And_Sum_block4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_n_i                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          End_of_sample_calc              :   IN    std_logic;
          b_i                             :   IN    std_logic_vector(63 DOWNTO 0);  -- sfix64_En32
          Filtered_Output                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Output_Valid                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : sm_DynamicCompression_Addr_Gen_block4
    USE ENTITY work.sm_DynamicCompression_Addr_Gen_block4(rtl);

  FOR ALL : sm_DynamicCompression_SimpleDualPortRAM_generic
    USE ENTITY work.sm_DynamicCompression_SimpleDualPortRAM_generic(rtl);

  FOR ALL : sm_DynamicCompression_B_k_Memory_Block2
    USE ENTITY work.sm_DynamicCompression_B_k_Memory_Block2(rtl);

  FOR ALL : sm_DynamicCompression_Multiply_And_Sum_block4
    USE ENTITY work.sm_DynamicCompression_Multiply_And_Sum_block4(rtl);

  -- Signals
  SIGNAL Addr_Gen_out1                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Addr_Gen_out2                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Addr_Gen_out3                    : std_logic;
  SIGNAL Addr_Gen_out4                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Addr_Gen_out1_unsigned           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL delayMatch_reg                   : vector_of_unsigned10(0 TO 2049);  -- ufix10 [2050]
  SIGNAL Addr_Gen_out1_1                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 2049);  -- ufix1 [2050]
  SIGNAL Valid_in_1                       : std_logic;
  SIGNAL Addr_Gen_out2_unsigned           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL delayMatch2_reg                  : vector_of_unsigned10(0 TO 2049);  -- ufix10 [2050]
  SIGNAL Addr_Gen_out2_1                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL x_n_i                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Alignment_Delay_out1             : std_logic;
  SIGNAL READ_ONLY_1_out1                 : signed(63 DOWNTO 0);  -- sfix64_En32
  SIGNAL READ_ONLY_2_out1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL READ_ONLY_3_out1                 : std_logic;
  SIGNAL Never_write_B2_out1              : signed(63 DOWNTO 0);  -- sfix64_En32
  SIGNAL Always_read_B2_out1              : std_logic;
  SIGNAL b_i                              : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Multiply_And_Sum_out1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Multiply_And_Sum_out2            : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 2049);  -- ufix1 [2050]
  SIGNAL Multiply_And_Sum_out2_1          : std_logic;
  SIGNAL Multiply_And_Sum_out1_signed     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Output_memory_out1               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Reset_Switch_out1                : signed(31 DOWNTO 0);  -- sfix32_En28

BEGIN
  -- consider desired output rate
  -- 
  -- B_ks will be programmable eventually.
  -- For the Conference, they will be preset.

  u_Addr_Gen : sm_DynamicCompression_Addr_Gen_block4
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_1024_0 => enb_1_1024_0,
              enb => enb,
              Input_Addr => Addr_Gen_out1,  -- ufix10
              Data_History_Rd_addr => Addr_Gen_out2,  -- ufix10
              End_of_sample_calc => Addr_Gen_out3,
              b_k_addr => Addr_Gen_out4  -- ufix10
              );

  u_Input_Data_Circular_Buffer : sm_DynamicCompression_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 10,
                 DataWidth => 32
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => Compressed_Data_In,
              wr_addr => std_logic_vector(Addr_Gen_out1_1),
              wr_en => Valid_in_1,
              rd_addr => std_logic_vector(Addr_Gen_out2_1),
              rd_dout => x_n_i
              );

  u_B_k_Memory_Block2 : sm_DynamicCompression_B_k_Memory_Block2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_A => std_logic_vector(READ_ONLY_1_out1),  -- sfix64_En32
              addr_A => std_logic_vector(READ_ONLY_2_out1),  -- ufix10
              we_A => READ_ONLY_3_out1,
              din_B => std_logic_vector(Never_write_B2_out1),  -- sfix64_En32
              addr_B => Addr_Gen_out4,  -- ufix10
              we_B => Always_read_B2_out1,
              dout_B => b_i  -- sfix64_En32
              );

  u_Multiply_And_Sum : sm_DynamicCompression_Multiply_And_Sum_block4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              x_n_i => x_n_i,  -- sfix32_En28
              End_of_sample_calc => Alignment_Delay_out1,
              b_i => b_i,  -- sfix64_En32
              Filtered_Output => Multiply_And_Sum_out1,  -- sfix32_En28
              Output_Valid => Multiply_And_Sum_out2
              );

  Addr_Gen_out1_unsigned <= unsigned(Addr_Gen_out1);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_unsigned(16#000#, 10));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= Addr_Gen_out1_unsigned;
        delayMatch_reg(1 TO 2049) <= delayMatch_reg(0 TO 2048);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Addr_Gen_out1_1 <= delayMatch_reg(2049);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= Valid_in;
        delayMatch1_reg(1 TO 2049) <= delayMatch1_reg(0 TO 2048);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Valid_in_1 <= delayMatch1_reg(2049);

  Addr_Gen_out2_unsigned <= unsigned(Addr_Gen_out2);

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg <= (OTHERS => to_unsigned(16#000#, 10));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch2_reg(0) <= Addr_Gen_out2_unsigned;
        delayMatch2_reg(1 TO 2049) <= delayMatch2_reg(0 TO 2048);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  Addr_Gen_out2_1 <= delayMatch2_reg(2049);

  Alignment_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Alignment_Delay_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Alignment_Delay_out1 <= Addr_Gen_out3;
      END IF;
    END IF;
  END PROCESS Alignment_Delay_process;


  READ_ONLY_1_out1 <= to_signed(0, 64);

  READ_ONLY_2_out1 <= to_unsigned(16#000#, 10);

  READ_ONLY_3_out1 <= '0';

  Never_write_B2_out1 <= to_signed(0, 64);

  Always_read_B2_out1 <= '0';

  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch3_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch3_reg(0) <= Multiply_And_Sum_out2;
        delayMatch3_reg(1 TO 2049) <= delayMatch3_reg(0 TO 2048);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Multiply_And_Sum_out2_1 <= delayMatch3_reg(2049);

  Multiply_And_Sum_out1_signed <= signed(Multiply_And_Sum_out1);

  
  Reset_Switch_out1 <= Output_memory_out1 WHEN Multiply_And_Sum_out2_1 = '0' ELSE
      Multiply_And_Sum_out1_signed;

  Output_memory_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Output_memory_out1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Output_memory_out1 <= Reset_Switch_out1;
      END IF;
    END IF;
  END PROCESS Output_memory_process;


  Data_out <= std_logic_vector(Output_memory_out1);

END rtl;

