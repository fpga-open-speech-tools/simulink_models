%% originally filterbank design and AGC rolled into one.  Now just AGC so as to allow stage of calibration between
%% filterbnak design and multi-channel AGC.  Only relaly necessary for high channel numbers (> 10).  MAS Mar 2016

%% input & output of compressor is equated to have 0dB gain at channel rms
%% last channel is ALWAYS high-pass only.  Band-pass channels are reduced in
%% width to be less than length(lpf)+length(hpf), which will reduce perfection
%% of recombination.

%% to perform compression in a multi-channel filterbank aid.  Filters signal into channels with band-pass filters designed from
%% specifying the edge frequencies of the channels.  Design technique is to design high-pass edge first, then low-pass design and
%% convolve the two to make a band-pass filter.  Low-pass of stage N is complemented to make the high-pass of stage N+1, so that
%% when recombining should get near flat response.  Minor ripples do remain because of windowing that goes on to reduce the
%% span of the FIR coefficiaents.  Length of FIR for each channel adapts to be approx similar on a log frequency scale.
%% Consequently we will get variable delay in each channel.  Hence software removes this before adding back all channel signals to
%% make the ouput signal.
%% the filterbank desing contains a couple of "magic numbers" such as firlen0, which determines the maximum size of the FIR, and
%% hence rate of cut at the channel edges.  Additionally, there is also a beta value for a couple of kaiser windows which are
%% chosen (a) to tame the tails of the bpf filters and (b) later to reduce the span of the convolved lpf/hpf pair.  Consequently
%% these values also modify the roll-off rate near the top of the filter. If the filters do not cross over at around -6 dB then
%% there will be a lumpy recombination response.  User needs to tailor these numbers until he/she is happy with the filter shape.
%% Do not want too long a time-domain response because (a) this is associated with  a long time delay, or (b) listeners may hear
%% pre-echoes

%%  NB this version does not do filtering of channel signals post compression, so side-band modulations are not suppressed
%% no noise band modulation in here:really a multi-channel acoustic aidsimulation.  Simpler return to calling program.  Need special case to
%% handle single channel AGC.
%%% backward compatible, but in Dec03 AGC_type (last var in call) now has
%%% two values, AGC_type and shift in compression threshold from standard 13 dB below RMS

function [bpf] = Nchan_FbankDesign(edges, fs, diagnostic);
%%%% 'edges' contains the n+1 edges to the channels: lowest is low pass, highest is high-pass, so edges(1) and edges(end) are dummy.
%%%% edges(1) should be set to be of similar (logarithmic) width below edges(2) as the spacing of the other channels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% to generate bandpass filters need some magic numbers to define
%%%% transition widths/time domain impulse response.  Chosen so that for nchans=16, filters
%%%% have similar or wider freq response to ERB, so that no long-time impulse response filters
%%%% generated.  Also set minimum number of taps to ensure that tails fall to approx < -60 dB
%%%% (beta value in first kaiser window currently 5.8, which also helps tame tails)  Too few
%%%% taps and the crossover points between filters are not at -6 dB which is bad for reconstruction.
%%%% Also adjust transition width so that for low number of channels, where spacing is high,
%%%% it still chooses moderately steep filters to get good channel separation
%%%% Two attempts are made to tame the tails: (a) in lpf design use kaiser with beta=6,
%%%% and then after bpf has been generated by convolution of lpf with hpf, use beta=3.
%%%% Since FIR widths change, we need to time-align the envelopes extracted, as well as
%%%% the noise samples, extracted by the same filters
nchans = length(edges)-1; %% number of processing channels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if nchans > 1 %% skip filter design if single channel
    firlen0 = 2*floor(6*fs/1000); %%% largest number of taps, MUST be EVEN (pref divis by 4), max of 6 msec
    bp_lf = edges(1:nchans);   %%% lower corner frequencies for channel splits
    bp_hf = edges(2:nchans+1); %%% upper corner frequencies ditto
    % %     bp_cf = .5*(bp_hf + bp_lf);%%% centre frequencies/crossovers, no longer necessary Nov 2012
    bp_bw = bp_hf-bp_lf; %%% bandwidth of filter
    bpf = zeros((3*firlen0+2),nchans); %%% set up maximum storage for bandpassfilters, pre-calculated
    %%%%% extra +2 for (a) length of filter (stored in first location of each row) and (b) centre tap (ie odd order filters)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    for ix = 1:nchans %%% design firs, gradually increase window to reduce tails
        %%%%% design channel filter in two stages, depending on adjacent channels, high pass first then low-pass
        if ix ~= 1
            mid_lpf = floor(length(lpf_chan)/2) +1; %%%%%% index of middle position of lpf
            hpf_chan = -lpf_chan; %%%% high-pass is complementary of low-pass from previous channel
            hpf_chan(mid_lpf) = 1 + hpf_chan(mid_lpf);
        else
            hpf_chan = 1; %%%% special case at start, low-pass filter first first channel
        end
        %%% second stage: lpf design
        if ix <= nchans  %%% firlen adapts to transition width, proportional to filter cf, last channel is irrelevant
            %%%%% must ALWAYS end up EVEN, so fir1() turns it ODD
            firlen = 2*floor((firlen0/2) * (bp_bw(max(1, floor((ix-1).^.66)))/bp_bw(ix))); %% auto scales relative to fixed frequency, Mar 2016: [.^X] helps high-NChans designs.
            %             lpf_chan = fir1(firlen, bp_hf(ix)/(fs/2),kaiser(firlen+1,6.5)); %% design and tame tails, pre Jun 2015
% %             lpf_chan = fir1(firlen, bp_hf(ix)/(fs/2),kaiser(firlen+1,7.1)); %% design and tame tails, Jun2015, increased 6.1 to 7.1, esp. for high nchans, Mar 2016
            lpf_chan = fir1(firlen, bp_hf(ix)/(fs/2),kaiser(firlen+1,6.6)); %% design and tame tails, Jun2015, increased 6.1 to 6.6, esp. for high nchans, Mar 2016
            %         else %% special case: last channel is high-pass only, Jan2007
            %             lpf_chan = [1];
        end
        
        bpf_len = length(hpf_chan) + length(lpf_chan) - 1;
        bpf_chan = zeros(bpf_len,1); %% create space for composite filter of lpf convolved with hpf
        bpf_chan(1:length(hpf_chan)) = hpf_chan; %%%% copy in hpf
        bpf_chan = filter(lpf_chan,1,bpf_chan);  %%% and convolve two halves of filter to make one
        if (ix ~= 1) && (ix ~= nchans)  %% reduce size of bpf, since tails go on for ever, and then window reduced filter
            new_len = 2*floor(0.7*(bpf_len/2)) + 1; %% deliberately make odd
            bpf(1,ix) = new_len; %% save filter size and.....
            half_len = floor(new_len/2); %% half-span of NEW
            mid = floor(bpf_len/2) + 1; %% middle of original
            bpf(2:new_len+1,ix) = bpf_chan(mid-half_len:mid+half_len); %%%%% .......save for later
        else
            bpf(1,ix) = bpf_len; %% save filter size and.....
            bpf(2:bpf_len+1,ix) = bpf_chan; %%%%% .......filter for later
        end
        chfir_len = bpf(1,ix); %% shorthand 
        [hz fz]  = freqz(bpf(2:(chfir_len+1),ix), 1, 2.^(nextpow2(fs/6)), fs);
        [hz_cf icf]= max(abs(hz));
        bpf(2:chfir_len+1,ix) = bpf(2:chfir_len+1,ix)/hz_cf; %% normalise FIR
        
        if diagnostic  %% comment this out when you are happy with bpf design
            %%% FREQUENCY RESPONSE OF BAND-PASS FILTER DESIGNS
% %             fprintf(1,'\nMax is at %6.1f, %5.1f dB', fz(icf), 20*log10(hz_cf));
            figure(100*diagnostic);
            [hz fz] = freqz(bpf(2:chfir_len+1,ix), 1, 2.^(nextpow2(fs/6)), fs); %% check against what is stored in bpf array
            semilogx(fz,20*log10((abs(hz)+1e-7)),'r'); hold on ; set(gca,'xlim',[70 1.1*fs/2],'ylim',[-75 2]); grid on ;
        end
    end
end %% if nchans > 1
if diagnostic, figure(100*diagnostic); hold off; title('Filterbank ORIGINAL design', 'fontsize', 12); end

