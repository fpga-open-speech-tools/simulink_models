-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\conno\Documents\NIH-GitHub\simulink_models\models\delay_and_sum_beamformer\hdlsrc\DSBF\DSBF_compute_sine1.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DSBF_compute_sine1
-- Source Path: DSBF/dataplane/compute projections/compute sine1
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DSBF_compute_sine1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        angle                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        output_value                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END DSBF_compute_sine1;


ARCHITECTURE rtl OF DSBF_compute_sine1 IS

  -- Component Declarations
  COMPONENT DSBF_sin_LUT_block
    PORT( angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
          sin_angle                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DSBF_sin_LUT_block
    USE ENTITY work.DSBF_sin_LUT_block(rtl);

  -- Signals
  SIGNAL angle_signed                     : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Compare_To_Zero_out1_1           : std_logic;
  SIGNAL angle_1                          : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Constant_out1                    : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Constant_out1_1                  : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product_mul_temp                 : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Product_out1                     : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Switch_out1                      : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL sin_LUT_out1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL sin_LUT_out1_signed              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL sin_LUT_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant1_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant1_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_out1                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_out1_1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch1_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14

  ATTRIBUTE multstyle : string;

BEGIN
  -- if the angle is less than 0, make it positive.
  -- We can take advantage of sine's odd symmetry and 
  -- make the lookup table only operate on positive values
  -- 
  -- sine has odd symmetry; if the original angle was less than 0,
  -- we need to multiply by negative 1

  -- This block was created using function approximation.
  u_sin_LUT : DSBF_sin_LUT_block
    PORT MAP( angle => std_logic_vector(Switch_out1),  -- sfix16_En8
              sin_angle => sin_LUT_out1  -- sfix16_En14
              );

  angle_signed <= signed(angle);

  
  Compare_To_Zero_out1 <= '1' WHEN angle_signed > to_signed(16#0000#, 16) ELSE
      '0';

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Compare_To_Zero_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Compare_To_Zero_out1_1 <= Compare_To_Zero_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      angle_1 <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        angle_1 <= angle_signed;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  Constant_out1 <= to_signed(-16#0100#, 16);

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant_out1_1 <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Constant_out1_1 <= Constant_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product_mul_temp <= angle_1 * Constant_out1_1;
  Product_out1 <= Product_mul_temp(23 DOWNTO 8);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_1 <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_out1_1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  
  Switch_out1 <= Product_out1_1 WHEN Compare_To_Zero_out1_1 = '0' ELSE
      angle_1;

  sin_LUT_out1_signed <= signed(sin_LUT_out1);

  HwModeRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sin_LUT_out1_1 <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        sin_LUT_out1_1 <= sin_LUT_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  Constant1_out1 <= to_signed(-16#4000#, 16);

  HwModeRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant1_out1_1 <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Constant1_out1_1 <= Constant1_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;


  Product1_mul_temp <= sin_LUT_out1_1 * Constant1_out1_1;
  Product1_out1 <= Product1_mul_temp(29 DOWNTO 14);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_out1_1 <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  
  Switch1_out1 <= Product1_out1_1 WHEN Compare_To_Zero_out1_1 = '0' ELSE
      sin_LUT_out1_signed;

  output_value <= std_logic_vector(Switch1_out1);

END rtl;

