-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\conno\Documents\NIH-GitHub\simulink_models\models\delay_and_sum_beamformer\hdlsrc\DSBF\DSBF_FilterTapSystolicPreAddWvlIn.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DSBF_FilterTapSystolicPreAddWvlIn
-- Source Path: DSBF/dataplane/Avalon Data Processing/delay signals/delay signal/CIC interpolation compensator/FilterBank/subFilter/FilterTapSystolicPreAddWvlIn
-- Hierarchy Level: 7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DSBF_FilterTapSystolicPreAddWvlIn IS
  PORT( clk                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        dinReg2_0_re                      :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        dinPreAdd                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        coefIn_0                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        addin                             :   IN    std_logic_vector(43 DOWNTO 0);  -- sfix44_En38
        dinRegVld                         :   IN    std_logic;
        syncReset                         :   IN    std_logic;
        dinDly2                           :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        tapout                            :   OUT   std_logic_vector(43 DOWNTO 0)  -- sfix44_En38
        );
END DSBF_FilterTapSystolicPreAddWvlIn;


ARCHITECTURE rtl OF DSBF_FilterTapSystolicPreAddWvlIn IS

  -- Signals
  SIGNAL dinReg2_0_re_signed              : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL dinPreAdd_signed                 : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL coefIn_0_signed                  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL addin_signed                     : signed(43 DOWNTO 0);  -- sfix44_En38
  SIGNAL fTap_din1_reg1                   : signed(23 DOWNTO 0) := to_signed(16#000000#, 24);  -- sfix24
  SIGNAL fTap_din1_reg2                   : signed(23 DOWNTO 0) := to_signed(16#000000#, 24);  -- sfix24
  SIGNAL fTap_din1_reg3                   : signed(23 DOWNTO 0) := to_signed(16#000000#, 24);  -- sfix24
  SIGNAL fTap_din2_reg1                   : signed(23 DOWNTO 0) := to_signed(16#000000#, 24);  -- sfix24
  SIGNAL fTap_din2_reg2                   : signed(23 DOWNTO 0) := to_signed(16#000000#, 24);  -- sfix24
  SIGNAL fTap_addout_reg                  : signed(43 DOWNTO 0) := to_signed(0, 44);  -- sfix44
  SIGNAL fTap_coef_reg1                   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL fTap_coef_reg2                   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL fTap_din1_reg1_next              : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL fTap_din1_reg2_next              : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL fTap_din1_reg3_next              : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL fTap_din2_reg1_next              : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL fTap_din2_reg2_next              : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL fTap_addout_reg_next             : signed(43 DOWNTO 0);  -- sfix44_En38
  SIGNAL fTap_coef_reg1_next              : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL fTap_coef_reg2_next              : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dinDly2_tmp                      : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL tapout_tmp                       : signed(43 DOWNTO 0);  -- sfix44_En38

BEGIN
  dinReg2_0_re_signed <= signed(dinReg2_0_re);

  dinPreAdd_signed <= signed(dinPreAdd);

  coefIn_0_signed <= signed(coefIn_0);

  addin_signed <= signed(addin);

  -- FilterTapSystolicPreAddWvldIn
  fTap_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        fTap_din1_reg1 <= fTap_din1_reg1_next;
        fTap_din1_reg2 <= fTap_din1_reg2_next;
        fTap_din1_reg3 <= fTap_din1_reg3_next;
        fTap_din2_reg1 <= fTap_din2_reg1_next;
        fTap_din2_reg2 <= fTap_din2_reg2_next;
        fTap_addout_reg <= fTap_addout_reg_next;
        fTap_coef_reg1 <= fTap_coef_reg1_next;
        fTap_coef_reg2 <= fTap_coef_reg2_next;
      END IF;
    END IF;
  END PROCESS fTap_process;

  fTap_output : PROCESS (addin_signed, coefIn_0_signed, dinPreAdd_signed, dinReg2_0_re_signed,
       dinRegVld, fTap_addout_reg, fTap_coef_reg1, fTap_coef_reg2,
       fTap_din1_reg1, fTap_din1_reg2, fTap_din1_reg3, fTap_din2_reg1,
       fTap_din2_reg2)
    VARIABLE add_cast : signed(24 DOWNTO 0);
    VARIABLE add_cast_0 : signed(24 DOWNTO 0);
    VARIABLE add_temp : signed(24 DOWNTO 0);
    VARIABLE mul_temp : signed(40 DOWNTO 0);
    VARIABLE add_cast_1 : signed(43 DOWNTO 0);
  BEGIN
    add_temp := to_signed(16#0000000#, 25);
    mul_temp := to_signed(0, 41);
    add_cast := to_signed(16#0000000#, 25);
    add_cast_0 := to_signed(16#0000000#, 25);
    add_cast_1 := to_signed(0, 44);
    fTap_din1_reg1_next <= fTap_din1_reg1;
    fTap_din1_reg2_next <= fTap_din1_reg2;
    fTap_din1_reg3_next <= fTap_din1_reg3;
    fTap_din2_reg1_next <= fTap_din2_reg1;
    fTap_din2_reg2_next <= fTap_din2_reg2;
    fTap_addout_reg_next <= fTap_addout_reg;
    fTap_coef_reg1_next <= fTap_coef_reg1;
    fTap_coef_reg2_next <= fTap_coef_reg2;
    IF dinRegVld = '1' THEN 
      add_cast := resize(fTap_din1_reg3, 25);
      add_cast_0 := resize(fTap_din2_reg2, 25);
      add_temp := add_cast + add_cast_0;
      mul_temp := add_temp * fTap_coef_reg2;
      add_cast_1 := resize(mul_temp, 44);
      fTap_addout_reg_next <= add_cast_1 + addin_signed;
      fTap_din1_reg3_next <= fTap_din1_reg2;
      fTap_din1_reg2_next <= fTap_din1_reg1;
      fTap_din1_reg1_next <= dinReg2_0_re_signed;
      fTap_din2_reg2_next <= fTap_din2_reg1;
      fTap_din2_reg1_next <= dinPreAdd_signed;
      fTap_coef_reg2_next <= fTap_coef_reg1;
      fTap_coef_reg1_next <= coefIn_0_signed;
    END IF;
    dinDly2_tmp <= fTap_din1_reg2;
    tapout_tmp <= fTap_addout_reg;
  END PROCESS fTap_output;


  dinDly2 <= std_logic_vector(dinDly2_tmp);

  tapout <= std_logic_vector(tapout_tmp);

END rtl;

