-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\conno\Documents\NIH-GitHub\simulink_models\models\fft_filters\hdlsrc\fft_filters\fft_filters_Hanning_ROM.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: fft_filters_Hanning_ROM
-- Source Path: fft_filters/dataplane/FFT_Analysis_Synthesis_Left/Analysis/FFT Frame Buffering/Hanning_ROM
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.fft_filters_dataplane_pkg.ALL;

ENTITY fft_filters_Hanning_ROM IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_16_1                        :   IN    std_logic;
        Index                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        hanning_value                     :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
        );
END fft_filters_Hanning_ROM;


ARCHITECTURE rtl OF fft_filters_Hanning_ROM IS

  ATTRIBUTE multstyle : string;

  -- Constants
  CONSTANT Lookup_Table_table_data        : vector_of_signed24(0 TO 127) := 
    (to_signed(16#00136E#, 24), to_signed(16#004DAD#, 24), to_signed(16#00AE99#, 24), to_signed(16#0135F8#, 24),
     to_signed(16#01E376#, 24), to_signed(16#02B6AC#, 24), to_signed(16#03AF18#, 24), to_signed(16#04CC24#, 24),
     to_signed(16#060D23#, 24), to_signed(16#077151#, 24), to_signed(16#08F7D7#, 24), to_signed(16#0A9FC8#, 24),
     to_signed(16#0C6821#, 24), to_signed(16#0E4FCE#, 24), to_signed(16#1055A7#, 24), to_signed(16#127871#, 24),
     to_signed(16#14B6E1#, 24), to_signed(16#170F99#, 24), to_signed(16#19812D#, 24), to_signed(16#1C0A20#, 24),
     to_signed(16#1EA8EA#, 24), to_signed(16#215BF2#, 24), to_signed(16#242195#, 24), to_signed(16#26F824#, 24),
     to_signed(16#29DDE6#, 24), to_signed(16#2CD118#, 24), to_signed(16#2FCFF1#, 24), to_signed(16#32D89D#, 24),
     to_signed(16#35E946#, 24), to_signed(16#390010#, 24), to_signed(16#3C1B19#, 24), to_signed(16#3F3880#, 24),
     to_signed(16#425660#, 24), to_signed(16#4572D5#, 24), to_signed(16#488BFB#, 24), to_signed(16#4B9FF0#, 24),
     to_signed(16#4EACD6#, 24), to_signed(16#51B0D3#, 24), to_signed(16#54AA13#, 24), to_signed(16#5796C6#, 24),
     to_signed(16#5A7526#, 24), to_signed(16#5D4375#, 24), to_signed(16#600000#, 24), to_signed(16#62A91C#, 24),
     to_signed(16#653D2D#, 24), to_signed(16#67BAA1#, 24), to_signed(16#6A1FF6#, 24), to_signed(16#6C6BB6#, 24),
     to_signed(16#6E9C7E#, 24), to_signed(16#70B0F8#, 24), to_signed(16#72A7E1#, 24), to_signed(16#748008#, 24),
     to_signed(16#76384E#, 24), to_signed(16#77CFA8#, 24), to_signed(16#79451F#, 24), to_signed(16#7A97CF#, 24),
     to_signed(16#7BC6EC#, 24), to_signed(16#7CD1BC#, 24), to_signed(16#7DB79E#, 24), to_signed(16#7E7807#, 24),
     to_signed(16#7F1281#, 24), to_signed(16#7F86AF#, 24), to_signed(16#7FD44B#, 24), to_signed(16#7FFB24#, 24),
     to_signed(16#7FFB24#, 24), to_signed(16#7FD44B#, 24), to_signed(16#7F86AF#, 24), to_signed(16#7F1281#, 24),
     to_signed(16#7E7807#, 24), to_signed(16#7DB79E#, 24), to_signed(16#7CD1BC#, 24), to_signed(16#7BC6EC#, 24),
     to_signed(16#7A97CF#, 24), to_signed(16#79451F#, 24), to_signed(16#77CFA8#, 24), to_signed(16#76384E#, 24),
     to_signed(16#748008#, 24), to_signed(16#72A7E1#, 24), to_signed(16#70B0F8#, 24), to_signed(16#6E9C7E#, 24),
     to_signed(16#6C6BB6#, 24), to_signed(16#6A1FF6#, 24), to_signed(16#67BAA1#, 24), to_signed(16#653D2D#, 24),
     to_signed(16#62A91C#, 24), to_signed(16#600000#, 24), to_signed(16#5D4375#, 24), to_signed(16#5A7526#, 24),
     to_signed(16#5796C6#, 24), to_signed(16#54AA13#, 24), to_signed(16#51B0D3#, 24), to_signed(16#4EACD6#, 24),
     to_signed(16#4B9FF0#, 24), to_signed(16#488BFB#, 24), to_signed(16#4572D5#, 24), to_signed(16#425660#, 24),
     to_signed(16#3F3880#, 24), to_signed(16#3C1B19#, 24), to_signed(16#390010#, 24), to_signed(16#35E946#, 24),
     to_signed(16#32D89D#, 24), to_signed(16#2FCFF1#, 24), to_signed(16#2CD118#, 24), to_signed(16#29DDE6#, 24),
     to_signed(16#26F824#, 24), to_signed(16#242195#, 24), to_signed(16#215BF2#, 24), to_signed(16#1EA8EA#, 24),
     to_signed(16#1C0A20#, 24), to_signed(16#19812D#, 24), to_signed(16#170F99#, 24), to_signed(16#14B6E1#, 24),
     to_signed(16#127871#, 24), to_signed(16#1055A7#, 24), to_signed(16#0E4FCE#, 24), to_signed(16#0C6821#, 24),
     to_signed(16#0A9FC8#, 24), to_signed(16#08F7D7#, 24), to_signed(16#077151#, 24), to_signed(16#060D23#, 24),
     to_signed(16#04CC24#, 24), to_signed(16#03AF18#, 24), to_signed(16#02B6AC#, 24), to_signed(16#01E376#, 24),
     to_signed(16#0135F8#, 24), to_signed(16#00AE99#, 24), to_signed(16#004DAD#, 24), to_signed(16#00136E#, 24));  -- sfix24 [128]

  -- Signals
  SIGNAL Index_1                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice_out1                   : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Lookup_Table_k                   : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Lookup_Table_out1                : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Lookup_Table_out1_1              : signed(23 DOWNTO 0) := to_signed(16#000000#, 24);  -- sfix24_En23
  SIGNAL Unit_Delay_bypass_reg            : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL Lookup_Table_out1_2              : signed(23 DOWNTO 0);  -- sfix24_En23

BEGIN
  Index_1 <= unsigned(Index);

  Bit_Slice_out1 <= Index_1(6 DOWNTO 0);

  
  Lookup_Table_k <= to_unsigned(16#00#, 7) WHEN Bit_Slice_out1 = to_unsigned(16#00#, 7) ELSE
      to_unsigned(16#7F#, 7) WHEN Bit_Slice_out1 = to_unsigned(16#7F#, 7) ELSE
      Bit_Slice_out1;
  Lookup_Table_out1 <= Lookup_Table_table_data(to_integer(Lookup_Table_k));

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF enb = '1' THEN
        Lookup_Table_out1_1 <= Lookup_Table_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Unit_Delay_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_bypass_reg <= to_signed(16#000000#, 24);
    ELSIF rising_edge(clk) THEN
      IF enb_1_16_1 = '1' THEN
        Unit_Delay_bypass_reg <= Lookup_Table_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_bypass_process;

  
  Lookup_Table_out1_2 <= Lookup_Table_out1_1 WHEN enb_1_16_1 = '1' ELSE
      Unit_Delay_bypass_reg;

  hanning_value <= std_logic_vector(Lookup_Table_out1_2);

END rtl;

