-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\conno\Documents\NIH-GitHub\simulink_models\models\simple_gain\hdlsrc\simple_gain\simple_gain_Avalon_Data_Processing.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: simple_gain_Avalon_Data_Processing
-- Source Path: simple_gain/dataplane/Avalon Data Processing
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY simple_gain_Avalon_Data_Processing IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Sink_Data                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Left_Gain                         :   IN    std_logic_vector(19 DOWNTO 0);  -- ufix20_En16
        Enable                            :   IN    std_logic;  -- ufix1
        Trigger                           :   IN    std_logic;
        Source_Data                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
        );
END simple_gain_Avalon_Data_Processing;


ARCHITECTURE rtl OF simple_gain_Avalon_Data_Processing IS

  ATTRIBUTE multstyle : string;

  -- Signals
  SIGNAL Trigger_delayed                  : std_logic;
  SIGNAL Trigger_delayed_inverted         : std_logic;
  SIGNAL Trigger_emulated                 : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Sink_Data_signed                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Left_Gain_unsigned               : unsigned(19 DOWNTO 0);  -- ufix20_En16
  SIGNAL Product1_cast                    : signed(20 DOWNTO 0);  -- sfix21_En16
  SIGNAL Product1_mul_temp                : signed(52 DOWNTO 0);  -- sfix53_En44
  SIGNAL Product1_out1                    : signed(51 DOWNTO 0);  -- sfix52_En44
  SIGNAL Data_Type_Conversion_out1        : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Data_Type_Conversion_out1_dtc    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_last_value           : signed(31 DOWNTO 0);  -- sfix32_En28

BEGIN
  Trigger_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Trigger_delayed <= '1';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Trigger_delayed <= Trigger;
      END IF;
    END IF;
  END PROCESS Trigger_delay_process;


  Trigger_delayed_inverted <=  NOT Trigger_delayed;

  Trigger_emulated <= Trigger_delayed_inverted AND Trigger;

  enb_gated <= Trigger_emulated AND enb;

  Sink_Data_signed <= signed(Sink_Data);

  Left_Gain_unsigned <= unsigned(Left_Gain);

  Product1_cast <= signed(resize(Left_Gain_unsigned, 21));
  Product1_mul_temp <= Sink_Data_signed * Product1_cast;
  Product1_out1 <= Product1_mul_temp(51 DOWNTO 0);

  Data_Type_Conversion_out1 <= Product1_out1(44 DOWNTO 21);

  Data_Type_Conversion_out1_dtc <= resize(Data_Type_Conversion_out1 & '0' & '0' & '0' & '0' & '0', 32);

  
  Switch_out1 <= Sink_Data_signed WHEN Enable = '0' ELSE
      Data_Type_Conversion_out1_dtc;

  out0_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Switch_out1_last_value <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_gated = '1' THEN
        Switch_out1_last_value <= Switch_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_process;


  
  Switch_out1_1 <= Switch_out1_last_value WHEN Trigger_emulated = '0' ELSE
      Switch_out1;

  Source_Data <= std_logic_vector(Switch_out1_1);

END rtl;

