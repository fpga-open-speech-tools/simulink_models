-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\conno\Documents\NIH-GitHub\simulink_models\models\simple_gain\hdlsrc\simple_gain\simple_gain_dataplane.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.01725e-08
-- Target subsystem base rate: 1.01725e-08
-- Explicit user oversample request: 1024x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.04167e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- avalon_source_valid           ce_out        1.04167e-05
-- avalon_source_data            ce_out        1.04167e-05
-- avalon_source_channel         ce_out        1.04167e-05
-- avalon_source_error           ce_out        1.04167e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: simple_gain_dataplane
-- Source Path: simple_gain/dataplane
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY simple_gain_dataplane IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        avalon_sink_valid                 :   IN    std_logic;
        avalon_sink_data                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        avalon_sink_channel               :   IN    std_logic;  -- ufix1
        avalon_sink_error                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        register_control_gain             :   IN    std_logic_vector(19 DOWNTO 0);  -- ufix20_En16
        register_control_enable           :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        avalon_source_valid               :   OUT   std_logic;
        avalon_source_data                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        avalon_source_channel             :   OUT   std_logic;  -- ufix1
        avalon_source_error               :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
        );
END simple_gain_dataplane;


ARCHITECTURE rtl OF simple_gain_dataplane IS

  -- Component Declarations
  COMPONENT simple_gain_dataplane_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1024_1_0                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT simple_gain_Avalon_Data_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Sink_Data                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Left_Gain                       :   IN    std_logic_vector(19 DOWNTO 0);  -- ufix20_En16
          Enable                          :   IN    std_logic;  -- ufix1
          Trigger                         :   IN    std_logic;
          Source_Data                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : simple_gain_dataplane_tc
    USE ENTITY work.simple_gain_dataplane_tc(rtl);

  FOR ALL : simple_gain_Avalon_Data_Processing
    USE ENTITY work.simple_gain_Avalon_Data_Processing(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL enb_1024_1_0                     : std_logic;
  SIGNAL Avalon_Data_Processing_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- The Avalon Data Processing Block
  -- performs DSP on the left and right channels.
  -- 
  -- Ignore Errors.
  -- Assuming no errors coming from the ADC and errors going to DAC will be ignored.
  -- Any Error streaming needs to be done inside Avalon Data Processing block.
  -- 
  -- Avalon streaming interface signals need to have the
  -- names containing the prefix "avalon_" 
  -- (all lower case)

  u_dataplane_tc : simple_gain_dataplane_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1024_1_0 => enb_1024_1_0
              );

  u_Avalon_Data_Processing : simple_gain_Avalon_Data_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Sink_Data => avalon_sink_data,  -- sfix32_En28
              Left_Gain => register_control_gain,  -- ufix20_En16
              Enable => register_control_enable,  -- ufix1
              Trigger => avalon_sink_valid,
              Source_Data => Avalon_Data_Processing_out1  -- sfix32_En28
              );

  ce_out <= enb_1_1_1;

  avalon_source_valid <= avalon_sink_valid;

  avalon_source_data <= Avalon_Data_Processing_out1;

  avalon_source_channel <= avalon_sink_channel;

  avalon_source_error <= avalon_sink_error;

END rtl;

