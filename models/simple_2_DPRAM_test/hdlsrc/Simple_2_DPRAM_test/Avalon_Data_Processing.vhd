-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\Simple_2_DPRAM_test\Avalon_Data_Processing.vhd
-- Created: 2019-10-21 10:42:05
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Avalon_Data_Processing
-- Source Path: Simple_2_DPRAM_test/SG_DataPlane/Avalon Data Processing
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Avalon_Data_Processing IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Sink_Data                         :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        Sink_Channel                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        Register_Data                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Register_Addr                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Register_wr_en                    :   IN    std_logic;
        Enable                            :   IN    std_logic;
        Source_Data                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        Source_Channel                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        Register_wr_dout                  :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Avalon_Data_Processing;


ARCHITECTURE rtl OF Avalon_Data_Processing IS

  -- Component Declarations
  COMPONENT Left_Channel_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Left_Data_In                    :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          Register_Data                   :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Register_Addr                   :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Register_wr_en                  :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Left_Data_Out                   :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          Register_wr_dout                :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Right_Channel_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Right_Data_In                   :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          Right_Gain                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Enable                          :   IN    std_logic;
          Right_Data_Out                  :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Left_Channel_Processing
    USE ENTITY work.Left_Channel_Processing(rtl);

  FOR ALL : Right_Channel_Processing
    USE ENTITY work.Right_Channel_Processing(rtl);

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Enable_out6                      : std_logic;
  SIGNAL Sink_Channel_unsigned            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL Left_Channel_Processing_out1     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Left_Channel_Processing_out2     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Left_Channel_Processing_out1_unsigned : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Left_Channel_Processing_out1_dtc : signed(31 DOWNTO 0);  -- int32
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Right_Channel_Processing_out1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Right_Channel_Processing_out1_signed : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Right_Channel_Processing_out1_dtc : signed(31 DOWNTO 0);  -- int32
  SIGNAL Sink_Data_signed                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL Multiport_Switch_out1            : signed(31 DOWNTO 0);  -- int32
  SIGNAL Multiport_Switch_out1_bypass     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Multiport_Switch_out1_last_value : signed(31 DOWNTO 0);  -- int32
  SIGNAL Sink_Channel_bypass              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Sink_Channel_last_value          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Left_Channel_Processing_out2_unsigned : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Left_Channel_Processing_out2_bypass : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Left_Channel_Processing_out2_last_value : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  -- Select output data
  -- based on channel number
  -- 
  -- Check if Channel 0 
  -- (Left Channel)
  -- 
  -- The Left Channel Processing block 
  -- only executes when channel 0
  -- is detected
  -- 
  -- The Right Channel Processing block 
  -- only executes when channel 1
  -- is detected
  -- 
  -- Check if Channel 1 
  -- (Right Channel)
  -- 
  -- An enabled subsystem
  -- This subsystem only runs when the data valid signal is enabled (asserted)

  u_Left_Channel_Processing : Left_Channel_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              Left_Data_In => Sink_Data,  -- int32
              Register_Data => Register_Data,  -- uint32
              Register_Addr => Register_Addr,  -- uint32
              Register_wr_en => Register_wr_en,
              Enable => Compare_To_Constant2_out1,
              Left_Data_Out => Left_Channel_Processing_out1,  -- uint8
              Register_wr_dout => Left_Channel_Processing_out2  -- uint8
              );

  u_Right_Channel_Processing : Right_Channel_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              Right_Data_In => Sink_Data,  -- int32
              Right_Gain => Register_Addr,  -- uint32
              Enable => Compare_To_Constant1_out1,
              Right_Data_Out => Right_Channel_Processing_out1  -- sfix32_En28
              );

  Enable_out6 <= Enable;

  enb_gated <= Enable_out6 AND enb;

  Sink_Channel_unsigned <= unsigned(Sink_Channel);

  
  Compare_To_Constant2_out1 <= '1' WHEN Sink_Channel_unsigned = to_unsigned(16#0#, 2) ELSE
      '0';

  Left_Channel_Processing_out1_unsigned <= unsigned(Left_Channel_Processing_out1);

  Left_Channel_Processing_out1_dtc <= signed(resize(Left_Channel_Processing_out1_unsigned, 32));

  
  Compare_To_Constant1_out1 <= '1' WHEN Sink_Channel_unsigned = to_unsigned(16#1#, 2) ELSE
      '0';

  Right_Channel_Processing_out1_signed <= signed(Right_Channel_Processing_out1);

  Right_Channel_Processing_out1_dtc <= resize(Right_Channel_Processing_out1_signed(31 DOWNTO 28), 32);

  Sink_Data_signed <= signed(Sink_Data);

  
  Multiport_Switch_out1 <= Left_Channel_Processing_out1_dtc WHEN Sink_Channel_unsigned = to_unsigned(16#0#, 2) ELSE
      Right_Channel_Processing_out1_dtc WHEN Sink_Channel_unsigned = to_unsigned(16#1#, 2) ELSE
      Sink_Data_signed;

  Source_Data_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiport_Switch_out1_last_value <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Multiport_Switch_out1_last_value <= Multiport_Switch_out1_bypass;
      END IF;
    END IF;
  END PROCESS Source_Data_bypass_process;


  
  Multiport_Switch_out1_bypass <= Multiport_Switch_out1_last_value WHEN Enable_out6 = '0' ELSE
      Multiport_Switch_out1;

  Source_Data <= std_logic_vector(Multiport_Switch_out1_bypass);

  Source_Channel_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sink_Channel_last_value <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Sink_Channel_last_value <= Sink_Channel_bypass;
      END IF;
    END IF;
  END PROCESS Source_Channel_bypass_process;


  
  Sink_Channel_bypass <= Sink_Channel_last_value WHEN Enable_out6 = '0' ELSE
      Sink_Channel_unsigned;

  Source_Channel <= std_logic_vector(Sink_Channel_bypass);

  Left_Channel_Processing_out2_unsigned <= unsigned(Left_Channel_Processing_out2);

  Register_wr_dout_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Left_Channel_Processing_out2_last_value <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Left_Channel_Processing_out2_last_value <= Left_Channel_Processing_out2_bypass;
      END IF;
    END IF;
  END PROCESS Register_wr_dout_bypass_process;


  
  Left_Channel_Processing_out2_bypass <= Left_Channel_Processing_out2_last_value WHEN Enable_out6 = '0' ELSE
      Left_Channel_Processing_out2_unsigned;

  Register_wr_dout <= std_logic_vector(Left_Channel_Processing_out2_bypass);

END rtl;

