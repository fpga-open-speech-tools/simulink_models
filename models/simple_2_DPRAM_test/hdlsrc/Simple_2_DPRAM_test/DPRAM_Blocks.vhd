-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\Simple_2_DPRAM_test\DPRAM_Blocks.vhd
-- Created: 2019-10-21 10:42:05
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DPRAM_Blocks
-- Source Path: Simple_2_DPRAM_test/SG_DataPlane/Avalon Data Processing/Left Channel Processing/DPRAM_Blocks
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DPRAM_Blocks IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Register_Data                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Register_Addr                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Register_wr_en                    :   IN    std_logic;
        input_signal                      :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        LED_signal                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        Register_wr_dout                  :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END DPRAM_Blocks;


ARCHITECTURE rtl OF DPRAM_Blocks IS

  -- Component Declarations
  COMPONENT Addr_Splitter_input
    PORT( Input_Read_Addr                 :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          Addr                            :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
          Sel                             :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  COMPONENT Addr_Splitter_register
    PORT( Register_Addr                   :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Addr                            :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
          Sel                             :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  COMPONENT DualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Addr_Splitter_input
    USE ENTITY work.Addr_Splitter_input(rtl);

  FOR ALL : Addr_Splitter_register
    USE ENTITY work.Addr_Splitter_register(rtl);

  FOR ALL : DualPortRAM_generic
    USE ENTITY work.DualPortRAM_generic(rtl);

  -- Signals
  SIGNAL Addr_input                       : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL Sel_input                        : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL Sel_input_unsigned               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Register_Data_unsigned           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion2_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Addr_wr                          : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL Table_sel                        : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL Table_sel_unsigned               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Dual_Port_RAM_out1               : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Dual_Port_RAM_out2               : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Dual_Port_RAM1_out1              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Dual_Port_RAM1_out2              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Unit_Delay_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Dual_Port_RAM_out2_unsigned      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Dual_Port_RAM1_out2_unsigned     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant2_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL LED_switch_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Unit_Delay2_out1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Dual_Port_RAM_out1_unsigned      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Dual_Port_RAM1_out1_unsigned     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant1_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL dout_switch_out1                 : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  -- NOTE: This wr_dout returns the data in address wr_addr,
  -- after it has been reassigned or not (determined by wr_en).
  -- This means I can use this much simpler block instead of the
  -- more complicated one that throws errors. 
  -- 
  -- NOTE: we can't write to either A or B and have addr_A = addr_B
  -- 
  -- Things to define from MATLAB init script:
  -- W_Bits, F_Bits, Addr_Bits, Sel_Bits, 
  -- RAM_X_SEL, LED_Bits
  -- 
  -- For now, input_signal will control the read address.
  -- Maybe have a button that toggles which RAM to read from?
  -- Maybe this is read from Switches?
  -- 
  -- TO DO: Setup Reading from Avalon Logic
  -- 
  -- NOTE: NON-INITIALIZED DPRAM
  -- 
  -- Setup Reset at some point?

  u_Addr_Splitter_input : Addr_Splitter_input
    PORT MAP( Input_Read_Addr => input_signal,  -- int32
              Addr => Addr_input,  -- ufix4
              Sel => Sel_input  -- ufix2
              );

  u_Addr_Splitter_register : Addr_Splitter_register
    PORT MAP( Register_Addr => Register_Addr,  -- uint32
              Addr => Addr_wr,  -- ufix4
              Sel => Table_sel  -- ufix2
              );

  u_Dual_Port_RAM : DualPortRAM_generic
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 8
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(Data_Type_Conversion2_out1),
              wr_addr => Addr_wr,
              wr_en => Logical_Operator_out1,
              rd_addr => Addr_input,
              wr_dout => Dual_Port_RAM_out1,
              rd_dout => Dual_Port_RAM_out2
              );

  u_Dual_Port_RAM1 : DualPortRAM_generic
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 8
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(Data_Type_Conversion2_out1),
              wr_addr => Addr_wr,
              wr_en => Logical_Operator1_out1,
              rd_addr => Addr_input,
              wr_dout => Dual_Port_RAM1_out1,
              rd_dout => Dual_Port_RAM1_out2
              );

  Sel_input_unsigned <= unsigned(Sel_input);

  Register_Data_unsigned <= unsigned(Register_Data);

  Data_Type_Conversion2_out1 <= Register_Data_unsigned(7 DOWNTO 0);

  Table_sel_unsigned <= unsigned(Table_sel);

  
  Compare_To_Constant_out1 <= '1' WHEN Table_sel_unsigned = to_unsigned(16#0#, 2) ELSE
      '0';

  Logical_Operator_out1 <= Compare_To_Constant_out1 AND Register_wr_en;

  
  Compare_To_Constant1_out1 <= '1' WHEN Table_sel_unsigned = to_unsigned(16#1#, 2) ELSE
      '0';

  Logical_Operator1_out1 <= Register_wr_en AND Compare_To_Constant1_out1;

  Unit_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_out1 <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_out1 <= Sel_input_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  Dual_Port_RAM_out2_unsigned <= unsigned(Dual_Port_RAM_out2);

  Dual_Port_RAM1_out2_unsigned <= unsigned(Dual_Port_RAM1_out2);

  Constant2_out1 <= to_unsigned(16#00#, 8);

  
  LED_switch_out1 <= Dual_Port_RAM_out2_unsigned WHEN Unit_Delay_out1 = to_unsigned(16#0#, 2) ELSE
      Dual_Port_RAM1_out2_unsigned WHEN Unit_Delay_out1 = to_unsigned(16#1#, 2) ELSE
      Constant2_out1;

  LED_signal <= std_logic_vector(LED_switch_out1);

  Unit_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay2_out1 <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay2_out1 <= Table_sel_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;


  Dual_Port_RAM_out1_unsigned <= unsigned(Dual_Port_RAM_out1);

  Dual_Port_RAM1_out1_unsigned <= unsigned(Dual_Port_RAM1_out1);

  Constant1_out1 <= to_unsigned(16#00#, 8);

  
  dout_switch_out1 <= Dual_Port_RAM_out1_unsigned WHEN Unit_Delay2_out1 = to_unsigned(16#0#, 2) ELSE
      Dual_Port_RAM1_out1_unsigned WHEN Unit_Delay2_out1 = to_unsigned(16#1#, 2) ELSE
      Constant1_out1;

  Register_wr_dout <= std_logic_vector(dout_switch_out1);

END rtl;

