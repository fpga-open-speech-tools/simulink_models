-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\Simple_2_DPRAM_test\Left_Channel_Processing.vhd
-- Created: 2019-10-21 10:42:05
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Left_Channel_Processing
-- Source Path: Simple_2_DPRAM_test/SG_DataPlane/Avalon Data Processing/Left Channel Processing
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Left_Channel_Processing IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Left_Data_In                      :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        Register_Data                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Register_Addr                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Register_wr_en                    :   IN    std_logic;
        Enable                            :   IN    std_logic;
        Left_Data_Out                     :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        Register_wr_dout                  :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Left_Channel_Processing;


ARCHITECTURE rtl OF Left_Channel_Processing IS

  -- Component Declarations
  COMPONENT DPRAM_Blocks
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Register_Data                   :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Register_Addr                   :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Register_wr_en                  :   IN    std_logic;
          input_signal                    :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          LED_signal                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          Register_wr_dout                :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DPRAM_Blocks
    USE ENTITY work.DPRAM_Blocks(rtl);

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Enable_out5                      : std_logic;
  SIGNAL DPRAM_Blocks_out1                : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL DPRAM_Blocks_out2                : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL DPRAM_Blocks_out1_unsigned       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL DPRAM_Blocks_out1_bypass         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL DPRAM_Blocks_out1_last_value     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL DPRAM_Blocks_out2_unsigned       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL DPRAM_Blocks_out2_bypass         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL DPRAM_Blocks_out2_last_value     : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  -- Put in a check here if we make L/R channels have different tables?
  -- 
  -- An enabled subsystem
  -- This subsystem only runs when the data valid signal is enabled (asserted)

  u_DPRAM_Blocks : DPRAM_Blocks
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              Register_Data => Register_Data,  -- uint32
              Register_Addr => Register_Addr,  -- uint32
              Register_wr_en => Register_wr_en,
              input_signal => Left_Data_In,  -- int32
              LED_signal => DPRAM_Blocks_out1,  -- uint8
              Register_wr_dout => DPRAM_Blocks_out2  -- uint8
              );

  Enable_out5 <= Enable;

  enb_gated <= Enable_out5 AND enb;

  DPRAM_Blocks_out1_unsigned <= unsigned(DPRAM_Blocks_out1);

  Left_Data_Out_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      DPRAM_Blocks_out1_last_value <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        DPRAM_Blocks_out1_last_value <= DPRAM_Blocks_out1_bypass;
      END IF;
    END IF;
  END PROCESS Left_Data_Out_bypass_process;


  
  DPRAM_Blocks_out1_bypass <= DPRAM_Blocks_out1_last_value WHEN Enable_out5 = '0' ELSE
      DPRAM_Blocks_out1_unsigned;

  Left_Data_Out <= std_logic_vector(DPRAM_Blocks_out1_bypass);

  DPRAM_Blocks_out2_unsigned <= unsigned(DPRAM_Blocks_out2);

  Register_wr_dout_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      DPRAM_Blocks_out2_last_value <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        DPRAM_Blocks_out2_last_value <= DPRAM_Blocks_out2_bypass;
      END IF;
    END IF;
  END PROCESS Register_wr_dout_bypass_process;


  
  DPRAM_Blocks_out2_bypass <= DPRAM_Blocks_out2_last_value WHEN Enable_out5 = '0' ELSE
      DPRAM_Blocks_out2_unsigned;

  Register_wr_dout <= std_logic_vector(DPRAM_Blocks_out2_bypass);

END rtl;

