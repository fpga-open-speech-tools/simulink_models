-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\Simple_2_DPRAM_test\Right_Channel_Processing.vhd
-- Created: 2019-10-21 10:42:05
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Right_Channel_Processing
-- Source Path: Simple_2_DPRAM_test/SG_DataPlane/Avalon Data Processing/Right Channel Processing
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Right_Channel_Processing IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Right_Data_In                     :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        Right_Gain                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Enable                            :   IN    std_logic;
        Right_Data_Out                    :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
        );
END Right_Channel_Processing;


ARCHITECTURE rtl OF Right_Channel_Processing IS

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Enable_out3                      : std_logic;
  SIGNAL Right_Data_In_signed             : signed(31 DOWNTO 0);  -- int32
  SIGNAL Right_Gain_unsigned              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Product_cast                     : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Product_mul_temp                 : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL Product_out1                     : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Data_Type_Conversion_out1        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Data_Type_Conversion_out1_bypass : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Data_Type_Conversion_out1_last_value : signed(31 DOWNTO 0);  -- sfix32_En28

BEGIN
  -- Apply Right Gain
  -- 
  -- An enabled subsystem
  -- This subsystem only runs when the data valid signal is enabled (asserted)

  Enable_out3 <= Enable;

  enb_gated <= Enable_out3 AND enb;

  Right_Data_In_signed <= signed(Right_Data_In);

  Right_Gain_unsigned <= unsigned(Right_Gain);

  Product_cast <= signed(resize(Right_Gain_unsigned, 33));
  Product_mul_temp <= Right_Data_In_signed * Product_cast;
  Product_out1 <= Product_mul_temp(63 DOWNTO 0);

  Data_Type_Conversion_out1 <= Product_out1(3 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  Right_Data_Out_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion_out1_last_value <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Data_Type_Conversion_out1_last_value <= Data_Type_Conversion_out1_bypass;
      END IF;
    END IF;
  END PROCESS Right_Data_Out_bypass_process;


  
  Data_Type_Conversion_out1_bypass <= Data_Type_Conversion_out1_last_value WHEN Enable_out3 = '0' ELSE
      Data_Type_Conversion_out1;

  Right_Data_Out <= std_logic_vector(Data_Type_Conversion_out1_bypass);

END rtl;

