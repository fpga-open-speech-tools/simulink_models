-- ------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\HA_sys8\FIRDecimator1
-- Created: 2018-12-04 11:17:26
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- ------------------------------------------------------------
-- 
-- 
-- ------------------------------------------------------------
-- 
-- Module: FIRDecimator1
-- Source Path: /FIRDecimator1
-- 
-- ------------------------------------------------------------
-- 
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 16
-- Multipliers           : 1


LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY FIRDecimator1 IS
   PORT( clk                             :   IN    std_logic; 
         enb_16_1_1                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         FIRDecimator1_in                :   IN    std_logic_vector(31 DOWNTO 0); -- sfix32_En28
         FIRDecimator1_out               :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
         );

END FIRDecimator1;


----------------------------------------------------------------
--Module Architecture: FIRDecimator1
----------------------------------------------------------------
ARCHITECTURE rtl OF FIRDecimator1 IS
  -- Local Functions
  -- Type Definitions
  TYPE input_pipeline_type IS ARRAY (NATURAL range <>) OF signed(31 DOWNTO 0); -- sfix32_En28
  -- Constants
  CONSTANT coeffphase1_1                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_2                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_3                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_4                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_5                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_6                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_7                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_8                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_9                  : signed(31 DOWNTO 0) := to_signed(1073741824, 32); -- sfix32_En32
  CONSTANT coeffphase1_10                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_11                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_12                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_13                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_14                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_15                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_16                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase2_1                  : signed(31 DOWNTO 0) := to_signed(-183528, 32); -- sfix32_En32
  CONSTANT coeffphase2_2                  : signed(31 DOWNTO 0) := to_signed(1306491, 32); -- sfix32_En32
  CONSTANT coeffphase2_3                  : signed(31 DOWNTO 0) := to_signed(-4639486, 32); -- sfix32_En32
  CONSTANT coeffphase2_4                  : signed(31 DOWNTO 0) := to_signed(12280718, 32); -- sfix32_En32
  CONSTANT coeffphase2_5                  : signed(31 DOWNTO 0) := to_signed(-27488790, 32); -- sfix32_En32
  CONSTANT coeffphase2_6                  : signed(31 DOWNTO 0) := to_signed(56255371, 32); -- sfix32_En32
  CONSTANT coeffphase2_7                  : signed(31 DOWNTO 0) := to_signed(-115634677, 32); -- sfix32_En32
  CONSTANT coeffphase2_8                  : signed(31 DOWNTO 0) := to_signed(311990277, 32); -- sfix32_En32
  CONSTANT coeffphase2_9                  : signed(31 DOWNTO 0) := to_signed(963249146, 32); -- sfix32_En32
  CONSTANT coeffphase2_10                 : signed(31 DOWNTO 0) := to_signed(-176686076, 32); -- sfix32_En32
  CONSTANT coeffphase2_11                 : signed(31 DOWNTO 0) := to_signed(79912856, 32); -- sfix32_En32
  CONSTANT coeffphase2_12                 : signed(31 DOWNTO 0) := to_signed(-39579136, 32); -- sfix32_En32
  CONSTANT coeffphase2_13                 : signed(31 DOWNTO 0) := to_signed(18665516, 32); -- sfix32_En32
  CONSTANT coeffphase2_14                 : signed(31 DOWNTO 0) := to_signed(-7752943, 32); -- sfix32_En32
  CONSTANT coeffphase2_15                 : signed(31 DOWNTO 0) := to_signed(2586591, 32); -- sfix32_En32
  CONSTANT coeffphase2_16                 : signed(31 DOWNTO 0) := to_signed(-566592, 32); -- sfix32_En32
  CONSTANT coeffphase3_1                  : signed(31 DOWNTO 0) := to_signed(-481003, 32); -- sfix32_En32
  CONSTANT coeffphase3_2                  : signed(31 DOWNTO 0) := to_signed(2638484, 32); -- sfix32_En32
  CONSTANT coeffphase3_3                  : signed(31 DOWNTO 0) := to_signed(-8546469, 32); -- sfix32_En32
  CONSTANT coeffphase3_4                  : signed(31 DOWNTO 0) := to_signed(21508448, 32); -- sfix32_En32
  CONSTANT coeffphase3_5                  : signed(31 DOWNTO 0) := to_signed(-46752491, 32); -- sfix32_En32
  CONSTANT coeffphase3_6                  : signed(31 DOWNTO 0) := to_signed(94736651, 32); -- sfix32_En32
  CONSTANT coeffphase3_7                  : signed(31 DOWNTO 0) := to_signed(-200068505, 32); -- sfix32_En32
  CONSTANT coeffphase3_8                  : signed(31 DOWNTO 0) := to_signed(673829978, 32); -- sfix32_En32
  CONSTANT coeffphase3_9                  : signed(31 DOWNTO 0) := to_signed(673829978, 32); -- sfix32_En32
  CONSTANT coeffphase3_10                 : signed(31 DOWNTO 0) := to_signed(-200068505, 32); -- sfix32_En32
  CONSTANT coeffphase3_11                 : signed(31 DOWNTO 0) := to_signed(94736651, 32); -- sfix32_En32
  CONSTANT coeffphase3_12                 : signed(31 DOWNTO 0) := to_signed(-46752491, 32); -- sfix32_En32
  CONSTANT coeffphase3_13                 : signed(31 DOWNTO 0) := to_signed(21508448, 32); -- sfix32_En32
  CONSTANT coeffphase3_14                 : signed(31 DOWNTO 0) := to_signed(-8546469, 32); -- sfix32_En32
  CONSTANT coeffphase3_15                 : signed(31 DOWNTO 0) := to_signed(2638484, 32); -- sfix32_En32
  CONSTANT coeffphase3_16                 : signed(31 DOWNTO 0) := to_signed(-481003, 32); -- sfix32_En32
  CONSTANT coeffphase4_1                  : signed(31 DOWNTO 0) := to_signed(-566592, 32); -- sfix32_En32
  CONSTANT coeffphase4_2                  : signed(31 DOWNTO 0) := to_signed(2586591, 32); -- sfix32_En32
  CONSTANT coeffphase4_3                  : signed(31 DOWNTO 0) := to_signed(-7752943, 32); -- sfix32_En32
  CONSTANT coeffphase4_4                  : signed(31 DOWNTO 0) := to_signed(18665516, 32); -- sfix32_En32
  CONSTANT coeffphase4_5                  : signed(31 DOWNTO 0) := to_signed(-39579136, 32); -- sfix32_En32
  CONSTANT coeffphase4_6                  : signed(31 DOWNTO 0) := to_signed(79912856, 32); -- sfix32_En32
  CONSTANT coeffphase4_7                  : signed(31 DOWNTO 0) := to_signed(-176686076, 32); -- sfix32_En32
  CONSTANT coeffphase4_8                  : signed(31 DOWNTO 0) := to_signed(963249146, 32); -- sfix32_En32
  CONSTANT coeffphase4_9                  : signed(31 DOWNTO 0) := to_signed(311990277, 32); -- sfix32_En32
  CONSTANT coeffphase4_10                 : signed(31 DOWNTO 0) := to_signed(-115634677, 32); -- sfix32_En32
  CONSTANT coeffphase4_11                 : signed(31 DOWNTO 0) := to_signed(56255371, 32); -- sfix32_En32
  CONSTANT coeffphase4_12                 : signed(31 DOWNTO 0) := to_signed(-27488790, 32); -- sfix32_En32
  CONSTANT coeffphase4_13                 : signed(31 DOWNTO 0) := to_signed(12280718, 32); -- sfix32_En32
  CONSTANT coeffphase4_14                 : signed(31 DOWNTO 0) := to_signed(-4639486, 32); -- sfix32_En32
  CONSTANT coeffphase4_15                 : signed(31 DOWNTO 0) := to_signed(1306491, 32); -- sfix32_En32
  CONSTANT coeffphase4_16                 : signed(31 DOWNTO 0) := to_signed(-183528, 32); -- sfix32_En32

  CONSTANT const_zero                     : signed(63 DOWNTO 0) := to_signed(0, 64); -- sfix64_En60
  -- Signals
  SIGNAL cur_count                        : unsigned(5 DOWNTO 0); -- ufix6
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_15                         : std_logic; -- boolean
  SIGNAL phase_16                         : std_logic; -- boolean
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL phase_17                         : std_logic; -- boolean
  SIGNAL phase_31                         : std_logic; -- boolean
  SIGNAL phase_47                         : std_logic; -- boolean
  SIGNAL phase_63                         : std_logic; -- boolean
  SIGNAL input_typeconvert                : signed(31 DOWNTO 0); -- sfix32_En28
  SIGNAL input_pipeline_phase0            : input_pipeline_type(0 TO 15); -- sfix32_En28
  SIGNAL input_pipeline_phase1            : input_pipeline_type(0 TO 15); -- sfix32_En28
  SIGNAL input_pipeline_phase2            : input_pipeline_type(0 TO 15); -- sfix32_En28
  SIGNAL input_pipeline_phase3            : input_pipeline_type(0 TO 15); -- sfix32_En28
  SIGNAL inputmux                         : signed(31 DOWNTO 0); -- sfix32_En28
  SIGNAL product                          : signed(63 DOWNTO 0); -- sfix64_En60
  SIGNAL product_mux                      : signed(31 DOWNTO 0); -- sfix32_En32
  SIGNAL phasemux                         : signed(63 DOWNTO 0); -- sfix64_En60
  SIGNAL prod_powertwo_1_9                : signed(63 DOWNTO 0); -- sfix64_En60
  SIGNAL powertwo_mux_1_9                 : signed(63 DOWNTO 0); -- sfix64_En60
  SIGNAL sumofproducts                    : signed(64 DOWNTO 0); -- sfix65_En60
  SIGNAL sumofproducts_cast               : signed(79 DOWNTO 0); -- sfix80_En60
  SIGNAL acc_sum                          : signed(79 DOWNTO 0); -- sfix80_En60
  SIGNAL accreg_in                        : signed(79 DOWNTO 0); -- sfix80_En60
  SIGNAL accreg_out                       : signed(79 DOWNTO 0); -- sfix80_En60
  SIGNAL add_cast                         : signed(79 DOWNTO 0); -- sfix80_En60
  SIGNAL add_cast_1                       : signed(79 DOWNTO 0); -- sfix80_En60
  SIGNAL add_temp                         : signed(80 DOWNTO 0); -- sfix81_En60
  SIGNAL accreg_final                     : signed(79 DOWNTO 0); -- sfix80_En60
  SIGNAL output_typeconvert               : signed(31 DOWNTO 0); -- sfix32_En28


BEGIN

  -- Block Statements
  Counter : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        cur_count <= to_unsigned(63, 6);
      ELSIF enb_16_1_1 = '1' THEN
        IF cur_count >= to_unsigned(63, 6) THEN
          cur_count <= to_unsigned(0, 6);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 6);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 6) AND enb_16_1_1 = '1' ELSE '0';

  phase_15 <= '1' WHEN cur_count = to_unsigned(15, 6) AND enb_16_1_1 = '1' ELSE '0';

  phase_16 <= '1' WHEN cur_count = to_unsigned(16, 6) AND enb_16_1_1 = '1' ELSE '0';

  phase_1 <= '1' WHEN  (((cur_count = to_unsigned(16, 6))  OR
                         (cur_count = to_unsigned(17, 6))  OR
                         (cur_count = to_unsigned(18, 6))  OR
                         (cur_count = to_unsigned(19, 6))  OR
                         (cur_count = to_unsigned(20, 6))  OR
                         (cur_count = to_unsigned(21, 6))  OR
                         (cur_count = to_unsigned(22, 6))  OR
                         (cur_count = to_unsigned(23, 6))  OR
                         (cur_count = to_unsigned(24, 6))  OR
                         (cur_count = to_unsigned(25, 6))  OR
                         (cur_count = to_unsigned(26, 6))  OR
                         (cur_count = to_unsigned(27, 6))  OR
                         (cur_count = to_unsigned(28, 6))  OR
                         (cur_count = to_unsigned(29, 6))  OR
                         (cur_count = to_unsigned(30, 6))  OR
                         (cur_count = to_unsigned(31, 6))  OR
                         (cur_count = to_unsigned(32, 6))  OR
                         (cur_count = to_unsigned(33, 6))  OR
                         (cur_count = to_unsigned(34, 6))  OR
                         (cur_count = to_unsigned(35, 6))  OR
                         (cur_count = to_unsigned(36, 6))  OR
                         (cur_count = to_unsigned(37, 6))  OR
                         (cur_count = to_unsigned(38, 6))  OR
                         (cur_count = to_unsigned(39, 6))  OR
                         (cur_count = to_unsigned(40, 6))  OR
                         (cur_count = to_unsigned(41, 6))  OR
                         (cur_count = to_unsigned(42, 6))  OR
                         (cur_count = to_unsigned(43, 6))  OR
                         (cur_count = to_unsigned(44, 6))  OR
                         (cur_count = to_unsigned(45, 6))  OR
                         (cur_count = to_unsigned(46, 6))  OR
                         (cur_count = to_unsigned(47, 6))  OR
                         (cur_count = to_unsigned(48, 6))  OR
                         (cur_count = to_unsigned(49, 6))  OR
                         (cur_count = to_unsigned(50, 6))  OR
                         (cur_count = to_unsigned(51, 6))  OR
                         (cur_count = to_unsigned(52, 6))  OR
                         (cur_count = to_unsigned(53, 6))  OR
                         (cur_count = to_unsigned(54, 6))  OR
                         (cur_count = to_unsigned(55, 6))  OR
                         (cur_count = to_unsigned(56, 6))  OR
                         (cur_count = to_unsigned(57, 6))  OR
                         (cur_count = to_unsigned(58, 6))  OR
                         (cur_count = to_unsigned(59, 6))  OR
                         (cur_count = to_unsigned(60, 6))  OR
                         (cur_count = to_unsigned(61, 6))  OR
                         (cur_count = to_unsigned(62, 6))  OR
                         (cur_count = to_unsigned(63, 6)))  AND enb_16_1_1 = '1') ELSE '0';

  phase_17 <= '1' WHEN cur_count = to_unsigned(17, 6) AND enb_16_1_1 = '1' ELSE '0';

  phase_31 <= '1' WHEN cur_count = to_unsigned(31, 6) AND enb_16_1_1 = '1' ELSE '0';

  phase_47 <= '1' WHEN cur_count = to_unsigned(47, 6) AND enb_16_1_1 = '1' ELSE '0';

  phase_63 <= '1' WHEN cur_count = to_unsigned(63, 6) AND enb_16_1_1 = '1' ELSE '0';

  input_typeconvert <= signed(FIRDecimator1_in);

  Delay_Pipeline_Phase0_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        input_pipeline_phase0(0 TO 15) <= (OTHERS => (OTHERS => '0'));
      ELSIF phase_63 = '1' THEN
        input_pipeline_phase0(0) <= input_typeconvert;
        input_pipeline_phase0(1 TO 15) <= input_pipeline_phase0(0 TO 14);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase0_process;

  Delay_Pipeline_Phase1_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        input_pipeline_phase1(0 TO 15) <= (OTHERS => (OTHERS => '0'));
      ELSIF phase_47 = '1' THEN
        input_pipeline_phase1(0) <= input_typeconvert;
        input_pipeline_phase1(1 TO 15) <= input_pipeline_phase1(0 TO 14);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase1_process;

  Delay_Pipeline_Phase2_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        input_pipeline_phase2(0 TO 15) <= (OTHERS => (OTHERS => '0'));
      ELSIF phase_31 = '1' THEN
        input_pipeline_phase2(0) <= input_typeconvert;
        input_pipeline_phase2(1 TO 15) <= input_pipeline_phase2(0 TO 14);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase2_process;

  Delay_Pipeline_Phase3_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        input_pipeline_phase3(0 TO 15) <= (OTHERS => (OTHERS => '0'));
      ELSIF phase_15 = '1' THEN
        input_pipeline_phase3(0) <= input_typeconvert;
        input_pipeline_phase3(1 TO 15) <= input_pipeline_phase3(0 TO 14);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase3_process;

  -- Mux(es) to select the input taps for multipliers 

  inputmux <= input_pipeline_phase3(0) WHEN ( cur_count = to_unsigned(16, 6) ) ELSE
                   input_pipeline_phase3(1) WHEN ( cur_count = to_unsigned(17, 6) ) ELSE
                   input_pipeline_phase3(2) WHEN ( cur_count = to_unsigned(18, 6) ) ELSE
                   input_pipeline_phase3(3) WHEN ( cur_count = to_unsigned(19, 6) ) ELSE
                   input_pipeline_phase3(4) WHEN ( cur_count = to_unsigned(20, 6) ) ELSE
                   input_pipeline_phase3(5) WHEN ( cur_count = to_unsigned(21, 6) ) ELSE
                   input_pipeline_phase3(6) WHEN ( cur_count = to_unsigned(22, 6) ) ELSE
                   input_pipeline_phase3(7) WHEN ( cur_count = to_unsigned(23, 6) ) ELSE
                   input_pipeline_phase3(8) WHEN ( cur_count = to_unsigned(24, 6) ) ELSE
                   input_pipeline_phase3(9) WHEN ( cur_count = to_unsigned(25, 6) ) ELSE
                   input_pipeline_phase3(10) WHEN ( cur_count = to_unsigned(26, 6) ) ELSE
                   input_pipeline_phase3(11) WHEN ( cur_count = to_unsigned(27, 6) ) ELSE
                   input_pipeline_phase3(12) WHEN ( cur_count = to_unsigned(28, 6) ) ELSE
                   input_pipeline_phase3(13) WHEN ( cur_count = to_unsigned(29, 6) ) ELSE
                   input_pipeline_phase3(14) WHEN ( cur_count = to_unsigned(30, 6) ) ELSE
                   input_pipeline_phase3(15) WHEN ( cur_count = to_unsigned(31, 6) ) ELSE
                   input_pipeline_phase2(0) WHEN ( cur_count = to_unsigned(32, 6) ) ELSE
                   input_pipeline_phase2(1) WHEN ( cur_count = to_unsigned(33, 6) ) ELSE
                   input_pipeline_phase2(2) WHEN ( cur_count = to_unsigned(34, 6) ) ELSE
                   input_pipeline_phase2(3) WHEN ( cur_count = to_unsigned(35, 6) ) ELSE
                   input_pipeline_phase2(4) WHEN ( cur_count = to_unsigned(36, 6) ) ELSE
                   input_pipeline_phase2(5) WHEN ( cur_count = to_unsigned(37, 6) ) ELSE
                   input_pipeline_phase2(6) WHEN ( cur_count = to_unsigned(38, 6) ) ELSE
                   input_pipeline_phase2(7) WHEN ( cur_count = to_unsigned(39, 6) ) ELSE
                   input_pipeline_phase2(8) WHEN ( cur_count = to_unsigned(40, 6) ) ELSE
                   input_pipeline_phase2(9) WHEN ( cur_count = to_unsigned(41, 6) ) ELSE
                   input_pipeline_phase2(10) WHEN ( cur_count = to_unsigned(42, 6) ) ELSE
                   input_pipeline_phase2(11) WHEN ( cur_count = to_unsigned(43, 6) ) ELSE
                   input_pipeline_phase2(12) WHEN ( cur_count = to_unsigned(44, 6) ) ELSE
                   input_pipeline_phase2(13) WHEN ( cur_count = to_unsigned(45, 6) ) ELSE
                   input_pipeline_phase2(14) WHEN ( cur_count = to_unsigned(46, 6) ) ELSE
                   input_pipeline_phase2(15) WHEN ( cur_count = to_unsigned(47, 6) ) ELSE
                   input_pipeline_phase1(0) WHEN ( cur_count = to_unsigned(48, 6) ) ELSE
                   input_pipeline_phase1(1) WHEN ( cur_count = to_unsigned(49, 6) ) ELSE
                   input_pipeline_phase1(2) WHEN ( cur_count = to_unsigned(50, 6) ) ELSE
                   input_pipeline_phase1(3) WHEN ( cur_count = to_unsigned(51, 6) ) ELSE
                   input_pipeline_phase1(4) WHEN ( cur_count = to_unsigned(52, 6) ) ELSE
                   input_pipeline_phase1(5) WHEN ( cur_count = to_unsigned(53, 6) ) ELSE
                   input_pipeline_phase1(6) WHEN ( cur_count = to_unsigned(54, 6) ) ELSE
                   input_pipeline_phase1(7) WHEN ( cur_count = to_unsigned(55, 6) ) ELSE
                   input_pipeline_phase1(8) WHEN ( cur_count = to_unsigned(56, 6) ) ELSE
                   input_pipeline_phase1(9) WHEN ( cur_count = to_unsigned(57, 6) ) ELSE
                   input_pipeline_phase1(10) WHEN ( cur_count = to_unsigned(58, 6) ) ELSE
                   input_pipeline_phase1(11) WHEN ( cur_count = to_unsigned(59, 6) ) ELSE
                   input_pipeline_phase1(12) WHEN ( cur_count = to_unsigned(60, 6) ) ELSE
                   input_pipeline_phase1(13) WHEN ( cur_count = to_unsigned(61, 6) ) ELSE
                   input_pipeline_phase1(14) WHEN ( cur_count = to_unsigned(62, 6) ) ELSE
                   input_pipeline_phase1(15);

  product_mux <= coeffphase4_1 WHEN ( cur_count = to_unsigned(16, 6) ) ELSE
                      coeffphase4_2 WHEN ( cur_count = to_unsigned(17, 6) ) ELSE
                      coeffphase4_3 WHEN ( cur_count = to_unsigned(18, 6) ) ELSE
                      coeffphase4_4 WHEN ( cur_count = to_unsigned(19, 6) ) ELSE
                      coeffphase4_5 WHEN ( cur_count = to_unsigned(20, 6) ) ELSE
                      coeffphase4_6 WHEN ( cur_count = to_unsigned(21, 6) ) ELSE
                      coeffphase4_7 WHEN ( cur_count = to_unsigned(22, 6) ) ELSE
                      coeffphase4_8 WHEN ( cur_count = to_unsigned(23, 6) ) ELSE
                      coeffphase4_9 WHEN ( cur_count = to_unsigned(24, 6) ) ELSE
                      coeffphase4_10 WHEN ( cur_count = to_unsigned(25, 6) ) ELSE
                      coeffphase4_11 WHEN ( cur_count = to_unsigned(26, 6) ) ELSE
                      coeffphase4_12 WHEN ( cur_count = to_unsigned(27, 6) ) ELSE
                      coeffphase4_13 WHEN ( cur_count = to_unsigned(28, 6) ) ELSE
                      coeffphase4_14 WHEN ( cur_count = to_unsigned(29, 6) ) ELSE
                      coeffphase4_15 WHEN ( cur_count = to_unsigned(30, 6) ) ELSE
                      coeffphase4_16 WHEN ( cur_count = to_unsigned(31, 6) ) ELSE
                      coeffphase3_1 WHEN ( cur_count = to_unsigned(32, 6) ) ELSE
                      coeffphase3_2 WHEN ( cur_count = to_unsigned(33, 6) ) ELSE
                      coeffphase3_3 WHEN ( cur_count = to_unsigned(34, 6) ) ELSE
                      coeffphase3_4 WHEN ( cur_count = to_unsigned(35, 6) ) ELSE
                      coeffphase3_5 WHEN ( cur_count = to_unsigned(36, 6) ) ELSE
                      coeffphase3_6 WHEN ( cur_count = to_unsigned(37, 6) ) ELSE
                      coeffphase3_7 WHEN ( cur_count = to_unsigned(38, 6) ) ELSE
                      coeffphase3_8 WHEN ( cur_count = to_unsigned(39, 6) ) ELSE
                      coeffphase3_9 WHEN ( cur_count = to_unsigned(40, 6) ) ELSE
                      coeffphase3_10 WHEN ( cur_count = to_unsigned(41, 6) ) ELSE
                      coeffphase3_11 WHEN ( cur_count = to_unsigned(42, 6) ) ELSE
                      coeffphase3_12 WHEN ( cur_count = to_unsigned(43, 6) ) ELSE
                      coeffphase3_13 WHEN ( cur_count = to_unsigned(44, 6) ) ELSE
                      coeffphase3_14 WHEN ( cur_count = to_unsigned(45, 6) ) ELSE
                      coeffphase3_15 WHEN ( cur_count = to_unsigned(46, 6) ) ELSE
                      coeffphase3_16 WHEN ( cur_count = to_unsigned(47, 6) ) ELSE
                      coeffphase2_1 WHEN ( cur_count = to_unsigned(48, 6) ) ELSE
                      coeffphase2_2 WHEN ( cur_count = to_unsigned(49, 6) ) ELSE
                      coeffphase2_3 WHEN ( cur_count = to_unsigned(50, 6) ) ELSE
                      coeffphase2_4 WHEN ( cur_count = to_unsigned(51, 6) ) ELSE
                      coeffphase2_5 WHEN ( cur_count = to_unsigned(52, 6) ) ELSE
                      coeffphase2_6 WHEN ( cur_count = to_unsigned(53, 6) ) ELSE
                      coeffphase2_7 WHEN ( cur_count = to_unsigned(54, 6) ) ELSE
                      coeffphase2_8 WHEN ( cur_count = to_unsigned(55, 6) ) ELSE
                      coeffphase2_9 WHEN ( cur_count = to_unsigned(56, 6) ) ELSE
                      coeffphase2_10 WHEN ( cur_count = to_unsigned(57, 6) ) ELSE
                      coeffphase2_11 WHEN ( cur_count = to_unsigned(58, 6) ) ELSE
                      coeffphase2_12 WHEN ( cur_count = to_unsigned(59, 6) ) ELSE
                      coeffphase2_13 WHEN ( cur_count = to_unsigned(60, 6) ) ELSE
                      coeffphase2_14 WHEN ( cur_count = to_unsigned(61, 6) ) ELSE
                      coeffphase2_15 WHEN ( cur_count = to_unsigned(62, 6) ) ELSE
                      coeffphase2_16;
  product <= inputmux * product_mux;

  phasemux <= product WHEN ( phase_1 = '1' ) ELSE
                   const_zero;

  -- Implementing products without a multiplier for coefficients with values equal to a power of 2.

  -- value of 'coeffphase1_9' is 0.25

  prod_powertwo_1_9 <= resize(input_pipeline_phase0(8) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);

  -- Mux(es) to select the power of 2 products for the corresponding polyphase

  powertwo_mux_1_9 <= prod_powertwo_1_9 WHEN ( phase_0 = '1' ) ELSE
                           const_zero;

  -- Add the products in linear fashion

  sumofproducts <= resize(phasemux, 65) + resize(powertwo_mux_1_9, 65);

  -- Resize the sum of products to the accumulator type for full precision addition

  sumofproducts_cast <= resize(sumofproducts, 80);

  -- Accumulator register with a mux to reset it with the first addend

  add_cast <= sumofproducts_cast;
  add_cast_1 <= accreg_out;
  add_temp <= resize(add_cast, 81) + resize(add_cast_1, 81);
  acc_sum <= (79 => '0', OTHERS => '1') WHEN add_temp(80) = '0' AND add_temp(79) /= '0'
      ELSE (79 => '1', OTHERS => '0') WHEN add_temp(80) = '1' AND add_temp(79) /= '1'
      ELSE (add_temp(79 DOWNTO 0));

  accreg_in <= sumofproducts_cast WHEN ( phase_16 = '1' ) ELSE
                    acc_sum;

  Acc_reg_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        accreg_out <= (OTHERS => '0');
      ELSIF enb_16_1_1 = '1' THEN
        accreg_out <= accreg_in;
      END IF;
    END IF; 
  END PROCESS Acc_reg_process;

  -- Register to hold the final value of the accumulated sum

  Acc_finalreg_process : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        accreg_final <= (OTHERS => '0');
      ELSIF phase_16 = '1' THEN
        accreg_final <= accreg_out;
      END IF;
    END IF; 
  END PROCESS Acc_finalreg_process;

  output_typeconvert <= (31 => '0', OTHERS => '1') WHEN accreg_final(79) = '0' AND accreg_final(78 DOWNTO 63) /= "0000000000000000"
      ELSE (31 => '1', OTHERS => '0') WHEN accreg_final(79) = '1' AND accreg_final(78 DOWNTO 63) /= "1111111111111111"
      ELSE (accreg_final(63 DOWNTO 32));

  -- Assignment Statements
  FIRDecimator1_out <= std_logic_vector(output_typeconvert);
END rtl;
