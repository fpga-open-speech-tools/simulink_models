-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\HA_sys8\HA_left.vhd
-- Created: 2018-12-04 11:17:57
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HA_left
-- Source Path: HA_sys8/HA_LR/HA_left
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HA_LR_pkg.ALL;

ENTITY HA_left IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_4_32_1                        :   IN    std_logic;
        enb_8_16_1                        :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        enb_8_4_1                         :   IN    std_logic;
        enb_16_1_1                        :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_32_0                        :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        enb_1_8_0                         :   IN    std_logic;
        enb_1_16_0                        :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Gain_B4                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        Gain_B3                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        Gain_B2                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        Gain_B1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        data_out                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
        );
END HA_left;


ARCHITECTURE rtl OF HA_left IS

  ATTRIBUTE multstyle : string;

  ATTRIBUTE multstyle OF rtl : ARCHITECTURE IS "dsp";

  -- Component Declarations
  COMPONENT FIRDecimator1
    PORT( clk                             :   IN    std_logic;
          enb_16_1_1                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIRDecimator1_in                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          FIRDecimator1_out               :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT FIRBandPass4
    PORT( clk                             :   IN    std_logic;
          enb_8_4_1                       :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIRBandPass4_in                 :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          FIRBandPass4_out                :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT FIRDecimator2
    PORT( clk                             :   IN    std_logic;
          enb_8_4_1                       :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIRDecimator2_in                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          FIRDecimator2_out               :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT FIRBandPass3
    PORT( clk                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIRBandPass3_in                 :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          FIRBandPass3_out                :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT FIRDecimator3
    PORT( clk                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIRDecimator3_in                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          FIRDecimator3_out               :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT FIRBandPass2
    PORT( clk                             :   IN    std_logic;
          enb_8_16_1                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIRBandPass2_in                 :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          FIRBandPass2_out                :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT FIRDecimator4
    PORT( clk                             :   IN    std_logic;
          enb_8_16_1                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIRDecimator4_in                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          FIRDecimator4_out               :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT FIRBandPass1
    PORT( clk                             :   IN    std_logic;
          enb_4_32_1                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIRBandPass1_in                 :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          FIRBandPass1_out                :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT FIRInterpolator4
    PORT( clk                             :   IN    std_logic;
          enb_8_16_1                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIRInterpolator4_in             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          FIRInterpolator4_out            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT FIRInterpolator3
    PORT( clk                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIRInterpolator3_in             :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
          FIRInterpolator3_out            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT FIRInterpolator2
    PORT( clk                             :   IN    std_logic;
          enb_8_4_1                       :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIRInterpolator2_in             :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
          FIRInterpolator2_out            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT FIRInterpolator1
    PORT( clk                             :   IN    std_logic;
          enb_16_1_1                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIRInterpolator1_in             :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
          FIRInterpolator1_out            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : FIRDecimator1
    USE ENTITY work.FIRDecimator1(rtl);

  FOR ALL : FIRBandPass4
    USE ENTITY work.FIRBandPass4(rtl);

  FOR ALL : FIRDecimator2
    USE ENTITY work.FIRDecimator2(rtl);

  FOR ALL : FIRBandPass3
    USE ENTITY work.FIRBandPass3(rtl);

  FOR ALL : FIRDecimator3
    USE ENTITY work.FIRDecimator3(rtl);

  FOR ALL : FIRBandPass2
    USE ENTITY work.FIRBandPass2(rtl);

  FOR ALL : FIRDecimator4
    USE ENTITY work.FIRDecimator4(rtl);

  FOR ALL : FIRBandPass1
    USE ENTITY work.FIRBandPass1(rtl);

  FOR ALL : FIRInterpolator4
    USE ENTITY work.FIRInterpolator4(rtl);

  FOR ALL : FIRInterpolator3
    USE ENTITY work.FIRInterpolator3(rtl);

  FOR ALL : FIRInterpolator2
    USE ENTITY work.FIRInterpolator2(rtl);

  FOR ALL : FIRInterpolator1
    USE ENTITY work.FIRInterpolator1(rtl);

  -- Signals
  SIGNAL d1_reg                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d1_reg_signed                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d1                               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d1_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d1f_reg                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d1f_reg_signed                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayMatch6_reg                  : vector_of_signed32(0 TO 43);  -- sfix32 [44]
  SIGNAL d1f                              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL SignumOutput                     : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Gain_B4_signed                   : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL delayMatch7_reg                  : vector_of_signed32(0 TO 45);  -- sfix32 [46]
  SIGNAL Gain_B4_1                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL SignumOutput_1                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL mul_sign_mul_temp                : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mulOutput                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Product1_in0_dtc_in_abs_y        : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Product1_in0_dtc_in_abs_cast     : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL d1f_1                            : unsigned(31 DOWNTO 0);  -- ufix32_En28
  SIGNAL d1f_2                            : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL slicedOutput                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Product1_in1_dtc_in_abs_y        : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Product1_in1_dtc_in_abs_cast     : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Gain_B4_2                        : unsigned(31 DOWNTO 0);  -- ufix32_En16
  SIGNAL Gain_B4_3                        : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL slicedOutput_1                   : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL slicedOutput_2                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL slicedOutput_3                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL mulOutput_1                      : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL mulOutput_2                      : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bitshiftoutput                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_3                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mulOutput_4                      : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bitshiftoutput_1                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_5                      : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL mulOutput_6                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mulOutput_7                      : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bitshiftoutput_2                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_8                      : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL mulOutput_9                      : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_10                     : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL mulOutput_11                     : unsigned(65 DOWNTO 0);  -- ufix66
  SIGNAL mulOutput_12                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL SwitchComp_in2_uminus_in0        : signed(66 DOWNTO 0);  -- sfix67
  SIGNAL mulOutput_13                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL mulOutput_14                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL mulOutput_15                     : signed(63 DOWNTO 0);  -- sfix64_En44
  SIGNAL mulOutput_16                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d1_2                             : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d1_3                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d2_reg                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d2_reg_signed                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d2                               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d2_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d2f_reg                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d2f_reg_signed                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayMatch4_reg                  : vector_of_signed32(0 TO 18);  -- sfix32 [19]
  SIGNAL d2f                              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL SignumOutput_2                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Gain_B3_signed                   : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL delayMatch5_reg                  : vector_of_signed32(0 TO 21);  -- sfix32 [22]
  SIGNAL Gain_B3_1                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL SignumOutput_3                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL mul_sign1_mul_temp               : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mulOutput_17                     : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Product2_in0_dtc_in_abs_y        : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Product2_in0_dtc_in_abs_cast     : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL d2f_1                            : unsigned(31 DOWNTO 0);  -- ufix32_En28
  SIGNAL d2f_2                            : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL slicedOutput_4                   : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Product2_in1_dtc_in_abs_y        : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Product2_in1_dtc_in_abs_cast     : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Gain_B3_2                        : unsigned(31 DOWNTO 0);  -- ufix32_En16
  SIGNAL Gain_B3_3                        : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL slicedOutput_5                   : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL slicedOutput_6                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL slicedOutput_7                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL mulOutput_18                     : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL mulOutput_19                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bitshiftoutput_3                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_20                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mulOutput_21                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bitshiftoutput_4                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_22                     : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL mulOutput_23                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mulOutput_24                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bitshiftoutput_5                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_25                     : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL mulOutput_26                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_27                     : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL mulOutput_28                     : unsigned(65 DOWNTO 0);  -- ufix66
  SIGNAL mulOutput_29                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL SwitchComp_in2_uminus1_in0       : signed(66 DOWNTO 0);  -- sfix67
  SIGNAL mulOutput_30                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL mulOutput_31                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL mulOutput_32                     : signed(63 DOWNTO 0);  -- sfix64_En44
  SIGNAL mulOutput_33                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d2_2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d3_reg                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d3_reg_signed                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d3                               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d3_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d3f_reg                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d3f_reg_signed                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayMatch2_reg                  : vector_of_signed32(0 TO 6);  -- sfix32 [7]
  SIGNAL d3f                              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL SignumOutput_4                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Gain_B2_signed                   : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL delayMatch3_reg                  : vector_of_signed32(0 TO 9);  -- sfix32 [10]
  SIGNAL Gain_B2_1                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL SignumOutput_5                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL mul_sign2_mul_temp               : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mulOutput_34                     : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Product3_in0_dtc_in_abs_y        : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Product3_in0_dtc_in_abs_cast     : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL d3f_1                            : unsigned(31 DOWNTO 0);  -- ufix32_En28
  SIGNAL d3f_2                            : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL slicedOutput_8                   : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Product3_in1_dtc_in_abs_y        : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Product3_in1_dtc_in_abs_cast     : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Gain_B2_2                        : unsigned(31 DOWNTO 0);  -- ufix32_En16
  SIGNAL Gain_B2_3                        : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL slicedOutput_9                   : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL slicedOutput_10                  : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL slicedOutput_11                  : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL mulOutput_35                     : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL mulOutput_36                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bitshiftoutput_6                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_37                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mulOutput_38                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bitshiftoutput_7                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_39                     : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL mulOutput_40                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mulOutput_41                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bitshiftoutput_8                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_42                     : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL mulOutput_43                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_44                     : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL mulOutput_45                     : unsigned(65 DOWNTO 0);  -- ufix66
  SIGNAL mulOutput_46                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL SwitchComp_in2_uminus2_in0       : signed(66 DOWNTO 0);  -- sfix67
  SIGNAL mulOutput_47                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL mulOutput_48                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL mulOutput_49                     : signed(63 DOWNTO 0);  -- sfix64_En44
  SIGNAL mulOutput_50                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d3_2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d4_reg                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d4_reg_signed                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d4                               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d4_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d4f_reg                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL d4f_reg_signed                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL d4f                              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL SignumOutput_6                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Gain_B1_signed                   : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL delayMatch1_reg                  : vector_of_signed32(0 TO 3);  -- sfix32 [4]
  SIGNAL Gain_B1_1                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL SignumOutput_7                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL mul_sign3_mul_temp               : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mulOutput_51                     : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Product4_in0_dtc_in_abs_y        : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Product4_in0_dtc_in_abs_cast     : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL d4f_1                            : unsigned(31 DOWNTO 0);  -- ufix32_En28
  SIGNAL d4f_2                            : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL slicedOutput_12                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Product4_in1_dtc_in_abs_y        : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Product4_in1_dtc_in_abs_cast     : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Gain_B1_2                        : unsigned(31 DOWNTO 0);  -- ufix32_En16
  SIGNAL Gain_B1_3                        : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL slicedOutput_13                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL slicedOutput_14                  : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL slicedOutput_15                  : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL mulOutput_52                     : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL mulOutput_53                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bitshiftoutput_9                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_54                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mulOutput_55                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bitshiftoutput_10                : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_56                     : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL mulOutput_57                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mulOutput_58                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bitshiftoutput_11                : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_59                     : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL mulOutput_60                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mulOutput_61                     : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL mulOutput_62                     : unsigned(65 DOWNTO 0);  -- ufix66
  SIGNAL mulOutput_63                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL SwitchComp_in2_uminus3_in0       : signed(66 DOWNTO 0);  -- sfix67
  SIGNAL mulOutput_64                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL mulOutput_65                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL mulOutput_66                     : signed(63 DOWNTO 0);  -- sfix64_En44
  SIGNAL Product4_out1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product4_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL FIRInterpolator4_out1_reg        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL FIRInterpolator4_out1_reg_signed : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL FIRInterpolator4_out1            : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_add_cast                    : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add3_add_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add3_out1                        : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add3_out1_1                      : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL FIRInterpolator3_out1_reg        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL FIRInterpolator3_out1_reg_signed : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL FIRInterpolator3_out1            : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_add_cast                    : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add2_add_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add2_out1                        : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add2_out1_1                      : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL FIRInterpolator2_out1_reg        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL FIRInterpolator2_out1_reg_signed : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL FIRInterpolator2_out1            : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_add_cast                    : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add1_add_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add1_out1                        : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add1_out1_1                      : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL FIRInterpolator1_out1_reg        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL FIRInterpolator1_out1_reg_signed : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL FIRInterpolator1_out1            : signed(31 DOWNTO 0);  -- sfix32_En28

BEGIN
  -- Fs = 48 KHz
  -- 
  -- Fs=12 kHz
  -- 
  -- Fs=6 kHz
  -- 
  -- Fs=3 kHz
  -- 
  -- Fs=1500 Hz

  u_FIRDecimator1 : FIRDecimator1
    PORT MAP( clk => clk,
              enb_16_1_1 => enb_16_1_1,
              reset => reset,
              FIRDecimator1_in => data_in,  -- sfix32_En28
              FIRDecimator1_out => d1_reg  -- sfix32_En28
              );

  u_FIRBandPass4 : FIRBandPass4
    PORT MAP( clk => clk,
              enb_8_4_1 => enb_8_4_1,
              reset => reset,
              FIRBandPass4_in => d1_1,  -- sfix32_En28
              FIRBandPass4_out => d1f_reg  -- sfix32_En28
              );

  u_FIRDecimator2 : FIRDecimator2
    PORT MAP( clk => clk,
              enb_8_4_1 => enb_8_4_1,
              reset => reset,
              FIRDecimator2_in => d1_3,  -- sfix32_En28
              FIRDecimator2_out => d2_reg  -- sfix32_En28
              );

  u_FIRBandPass3 : FIRBandPass3
    PORT MAP( clk => clk,
              enb_1_1_1 => enb_1_1_1,
              reset => reset,
              FIRBandPass3_in => d2_1,  -- sfix32_En28
              FIRBandPass3_out => d2f_reg  -- sfix32_En28
              );

  u_FIRDecimator3 : FIRDecimator3
    PORT MAP( clk => clk,
              enb_1_1_1 => enb_1_1_1,
              reset => reset,
              FIRDecimator3_in => d2_2,  -- sfix32_En28
              FIRDecimator3_out => d3_reg  -- sfix32_En28
              );

  u_FIRBandPass2 : FIRBandPass2
    PORT MAP( clk => clk,
              enb_8_16_1 => enb_8_16_1,
              reset => reset,
              FIRBandPass2_in => d3_1,  -- sfix32_En28
              FIRBandPass2_out => d3f_reg  -- sfix32_En28
              );

  u_FIRDecimator4 : FIRDecimator4
    PORT MAP( clk => clk,
              enb_8_16_1 => enb_8_16_1,
              reset => reset,
              FIRDecimator4_in => d3_2,  -- sfix32_En28
              FIRDecimator4_out => d4_reg  -- sfix32_En28
              );

  u_FIRBandPass1 : FIRBandPass1
    PORT MAP( clk => clk,
              enb_4_32_1 => enb_4_32_1,
              reset => reset,
              FIRBandPass1_in => d4_1,  -- sfix32_En28
              FIRBandPass1_out => d4f_reg  -- sfix32_En28
              );

  u_FIRInterpolator4 : FIRInterpolator4
    PORT MAP( clk => clk,
              enb_8_16_1 => enb_8_16_1,
              reset => reset,
              FIRInterpolator4_in => Product4_out1_1,  -- sfix32_En28
              FIRInterpolator4_out => FIRInterpolator4_out1_reg  -- sfix32_En28
              );

  u_FIRInterpolator3 : FIRInterpolator3
    PORT MAP( clk => clk,
              enb_1_1_1 => enb_1_1_1,
              reset => reset,
              FIRInterpolator3_in => Add3_out1_1,  -- sfix33_En28
              FIRInterpolator3_out => FIRInterpolator3_out1_reg  -- sfix32_En28
              );

  u_FIRInterpolator2 : FIRInterpolator2
    PORT MAP( clk => clk,
              enb_8_4_1 => enb_8_4_1,
              reset => reset,
              FIRInterpolator2_in => Add2_out1_1,  -- sfix33_En28
              FIRInterpolator2_out => FIRInterpolator2_out1_reg  -- sfix32_En28
              );

  u_FIRInterpolator1 : FIRInterpolator1
    PORT MAP( clk => clk,
              enb_16_1_1 => enb_16_1_1,
              reset => reset,
              FIRInterpolator1_in => Add1_out1_1,  -- sfix33_En28
              FIRInterpolator1_out => FIRInterpolator1_out1_reg  -- sfix32_En28
              );

  d1_reg_signed <= signed(d1_reg);

  FIRDecimator1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        d1 <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        d1 <= d1_reg_signed;
      END IF;
    END IF;
  END PROCESS FIRDecimator1_reg_process;


  d1_1 <= std_logic_vector(d1);

  d1f_reg_signed <= signed(d1f_reg);

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch6_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_4_0 = '1' THEN
        delayMatch6_reg(0) <= d1f_reg_signed;
        delayMatch6_reg(1 TO 43) <= delayMatch6_reg(0 TO 42);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  d1f <= delayMatch6_reg(43);

  
  SignumOutput <= to_signed(16#1#, 2) WHEN d1f > to_signed(0, 32) ELSE
      to_signed(-16#1#, 2) WHEN d1f < to_signed(0, 32) ELSE
      to_signed(16#0#, 2);

  Gain_B4_signed <= signed(Gain_B4);

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch7_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_4_0 = '1' THEN
        delayMatch7_reg(0) <= Gain_B4_signed;
        delayMatch7_reg(1 TO 45) <= delayMatch7_reg(0 TO 44);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  Gain_B4_1 <= delayMatch7_reg(45);

  
  SignumOutput_1 <= to_signed(16#1#, 2) WHEN Gain_B4_1 > to_signed(0, 32) ELSE
      to_signed(-16#1#, 2) WHEN Gain_B4_1 < to_signed(0, 32) ELSE
      to_signed(16#0#, 2);

  mul_sign_mul_temp <= SignumOutput * SignumOutput_1;
  mulOutput <= mul_sign_mul_temp(1 DOWNTO 0);

  
  switch_compare_1 <= '1' WHEN mulOutput > to_signed(16#0#, 2) ELSE
      '0';

  Product1_in0_dtc_in_abs_cast <= resize(d1f, 33);
  
  Product1_in0_dtc_in_abs_y <=  - (Product1_in0_dtc_in_abs_cast) WHEN d1f < to_signed(0, 32) ELSE
      resize(d1f, 33);
  d1f_1 <= unsigned(Product1_in0_dtc_in_abs_y(31 DOWNTO 0));

  d1f_2 <= resize(d1f_1, 36);

  slicedOutput <= d1f_2(31 DOWNTO 18);

  Product1_in1_dtc_in_abs_cast <= resize(Gain_B4_1, 33);
  
  Product1_in1_dtc_in_abs_y <=  - (Product1_in1_dtc_in_abs_cast) WHEN Gain_B4_1 < to_signed(0, 32) ELSE
      resize(Gain_B4_1, 33);
  Gain_B4_2 <= unsigned(Product1_in1_dtc_in_abs_y(31 DOWNTO 0));

  Gain_B4_3 <= resize(Gain_B4_2, 36);

  slicedOutput_1 <= Gain_B4_3(31 DOWNTO 18);

  slicedOutput_2 <= d1f_2(17 DOWNTO 0);

  slicedOutput_3 <= Gain_B4_3(17 DOWNTO 0);

  mulOutput_1 <= slicedOutput * slicedOutput_1;

  mulOutput_2 <= resize(mulOutput_1, 64);

  bitshiftoutput <= mulOutput_2 sll 36;

  mulOutput_3 <= slicedOutput_2 * slicedOutput_1;

  mulOutput_4 <= resize(mulOutput_3, 64);

  bitshiftoutput_1 <= mulOutput_4 sll 18;

  mulOutput_5 <= resize(bitshiftoutput, 65) + resize(bitshiftoutput_1, 65);

  mulOutput_6 <= slicedOutput * slicedOutput_3;

  mulOutput_7 <= resize(mulOutput_6, 64);

  bitshiftoutput_2 <= mulOutput_7 sll 18;

  mulOutput_8 <= slicedOutput_2 * slicedOutput_3;

  mulOutput_9 <= resize(mulOutput_8, 64);

  mulOutput_10 <= resize(bitshiftoutput_2, 65) + resize(mulOutput_9, 65);

  mulOutput_11 <= resize(mulOutput_5, 66) + resize(mulOutput_10, 66);

  mulOutput_12 <= signed(mulOutput_11);

  SwitchComp_in2_uminus_in0 <=  - (resize(mulOutput_12, 67));
  mulOutput_13 <= SwitchComp_in2_uminus_in0(65 DOWNTO 0);

  
  mulOutput_14 <= mulOutput_13 WHEN switch_compare_1 = '0' ELSE
      mulOutput_12;

  mulOutput_15 <= mulOutput_14(63 DOWNTO 0);

  
  mulOutput_16 <= X"7FFFFFFF" WHEN (mulOutput_15(63) = '0') AND (mulOutput_15(62 DOWNTO 47) /= X"0000") ELSE
      X"80000000" WHEN (mulOutput_15(63) = '1') AND (mulOutput_15(62 DOWNTO 47) /= X"FFFF") ELSE
      mulOutput_15(47 DOWNTO 16);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        d1_2 <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        d1_2 <= d1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  d1_3 <= std_logic_vector(d1_2);

  d2_reg_signed <= signed(d2_reg);

  FIRDecimator2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        d2 <= to_signed(0, 32);
      ELSIF enb_1_8_0 = '1' THEN
        d2 <= d2_reg_signed;
      END IF;
    END IF;
  END PROCESS FIRDecimator2_reg_process;


  d2_1 <= std_logic_vector(d2);

  d2f_reg_signed <= signed(d2f_reg);

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch4_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch4_reg(0) <= d2f_reg_signed;
        delayMatch4_reg(1 TO 18) <= delayMatch4_reg(0 TO 17);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  d2f <= delayMatch4_reg(18);

  
  SignumOutput_2 <= to_signed(16#1#, 2) WHEN d2f > to_signed(0, 32) ELSE
      to_signed(-16#1#, 2) WHEN d2f < to_signed(0, 32) ELSE
      to_signed(16#0#, 2);

  Gain_B3_signed <= signed(Gain_B3);

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch5_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch5_reg(0) <= Gain_B3_signed;
        delayMatch5_reg(1 TO 21) <= delayMatch5_reg(0 TO 20);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  Gain_B3_1 <= delayMatch5_reg(21);

  
  SignumOutput_3 <= to_signed(16#1#, 2) WHEN Gain_B3_1 > to_signed(0, 32) ELSE
      to_signed(-16#1#, 2) WHEN Gain_B3_1 < to_signed(0, 32) ELSE
      to_signed(16#0#, 2);

  mul_sign1_mul_temp <= SignumOutput_2 * SignumOutput_3;
  mulOutput_17 <= mul_sign1_mul_temp(1 DOWNTO 0);

  
  switch_compare_1_1 <= '1' WHEN mulOutput_17 > to_signed(16#0#, 2) ELSE
      '0';

  Product2_in0_dtc_in_abs_cast <= resize(d2f, 33);
  
  Product2_in0_dtc_in_abs_y <=  - (Product2_in0_dtc_in_abs_cast) WHEN d2f < to_signed(0, 32) ELSE
      resize(d2f, 33);
  d2f_1 <= unsigned(Product2_in0_dtc_in_abs_y(31 DOWNTO 0));

  d2f_2 <= resize(d2f_1, 36);

  slicedOutput_4 <= d2f_2(31 DOWNTO 18);

  Product2_in1_dtc_in_abs_cast <= resize(Gain_B3_1, 33);
  
  Product2_in1_dtc_in_abs_y <=  - (Product2_in1_dtc_in_abs_cast) WHEN Gain_B3_1 < to_signed(0, 32) ELSE
      resize(Gain_B3_1, 33);
  Gain_B3_2 <= unsigned(Product2_in1_dtc_in_abs_y(31 DOWNTO 0));

  Gain_B3_3 <= resize(Gain_B3_2, 36);

  slicedOutput_5 <= Gain_B3_3(31 DOWNTO 18);

  slicedOutput_6 <= d2f_2(17 DOWNTO 0);

  slicedOutput_7 <= Gain_B3_3(17 DOWNTO 0);

  mulOutput_18 <= slicedOutput_4 * slicedOutput_5;

  mulOutput_19 <= resize(mulOutput_18, 64);

  bitshiftoutput_3 <= mulOutput_19 sll 36;

  mulOutput_20 <= slicedOutput_6 * slicedOutput_5;

  mulOutput_21 <= resize(mulOutput_20, 64);

  bitshiftoutput_4 <= mulOutput_21 sll 18;

  mulOutput_22 <= resize(bitshiftoutput_3, 65) + resize(bitshiftoutput_4, 65);

  mulOutput_23 <= slicedOutput_4 * slicedOutput_7;

  mulOutput_24 <= resize(mulOutput_23, 64);

  bitshiftoutput_5 <= mulOutput_24 sll 18;

  mulOutput_25 <= slicedOutput_6 * slicedOutput_7;

  mulOutput_26 <= resize(mulOutput_25, 64);

  mulOutput_27 <= resize(bitshiftoutput_5, 65) + resize(mulOutput_26, 65);

  mulOutput_28 <= resize(mulOutput_22, 66) + resize(mulOutput_27, 66);

  mulOutput_29 <= signed(mulOutput_28);

  SwitchComp_in2_uminus1_in0 <=  - (resize(mulOutput_29, 67));
  mulOutput_30 <= SwitchComp_in2_uminus1_in0(65 DOWNTO 0);

  
  mulOutput_31 <= mulOutput_30 WHEN switch_compare_1_1 = '0' ELSE
      mulOutput_29;

  mulOutput_32 <= mulOutput_31(63 DOWNTO 0);

  
  mulOutput_33 <= X"7FFFFFFF" WHEN (mulOutput_32(63) = '0') AND (mulOutput_32(62 DOWNTO 47) /= X"0000") ELSE
      X"80000000" WHEN (mulOutput_32(63) = '1') AND (mulOutput_32(62 DOWNTO 47) /= X"FFFF") ELSE
      mulOutput_32(47 DOWNTO 16);

  d2_2 <= std_logic_vector(d2);

  d3_reg_signed <= signed(d3_reg);

  FIRDecimator3_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        d3 <= to_signed(0, 32);
      ELSIF enb_1_16_0 = '1' THEN
        d3 <= d3_reg_signed;
      END IF;
    END IF;
  END PROCESS FIRDecimator3_reg_process;


  d3_1 <= std_logic_vector(d3);

  d3f_reg_signed <= signed(d3f_reg);

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch2_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_16_0 = '1' THEN
        delayMatch2_reg(0) <= d3f_reg_signed;
        delayMatch2_reg(1 TO 6) <= delayMatch2_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  d3f <= delayMatch2_reg(6);

  
  SignumOutput_4 <= to_signed(16#1#, 2) WHEN d3f > to_signed(0, 32) ELSE
      to_signed(-16#1#, 2) WHEN d3f < to_signed(0, 32) ELSE
      to_signed(16#0#, 2);

  Gain_B2_signed <= signed(Gain_B2);

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch3_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_16_0 = '1' THEN
        delayMatch3_reg(0) <= Gain_B2_signed;
        delayMatch3_reg(1 TO 9) <= delayMatch3_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Gain_B2_1 <= delayMatch3_reg(9);

  
  SignumOutput_5 <= to_signed(16#1#, 2) WHEN Gain_B2_1 > to_signed(0, 32) ELSE
      to_signed(-16#1#, 2) WHEN Gain_B2_1 < to_signed(0, 32) ELSE
      to_signed(16#0#, 2);

  mul_sign2_mul_temp <= SignumOutput_4 * SignumOutput_5;
  mulOutput_34 <= mul_sign2_mul_temp(1 DOWNTO 0);

  
  switch_compare_1_2 <= '1' WHEN mulOutput_34 > to_signed(16#0#, 2) ELSE
      '0';

  Product3_in0_dtc_in_abs_cast <= resize(d3f, 33);
  
  Product3_in0_dtc_in_abs_y <=  - (Product3_in0_dtc_in_abs_cast) WHEN d3f < to_signed(0, 32) ELSE
      resize(d3f, 33);
  d3f_1 <= unsigned(Product3_in0_dtc_in_abs_y(31 DOWNTO 0));

  d3f_2 <= resize(d3f_1, 36);

  slicedOutput_8 <= d3f_2(31 DOWNTO 18);

  Product3_in1_dtc_in_abs_cast <= resize(Gain_B2_1, 33);
  
  Product3_in1_dtc_in_abs_y <=  - (Product3_in1_dtc_in_abs_cast) WHEN Gain_B2_1 < to_signed(0, 32) ELSE
      resize(Gain_B2_1, 33);
  Gain_B2_2 <= unsigned(Product3_in1_dtc_in_abs_y(31 DOWNTO 0));

  Gain_B2_3 <= resize(Gain_B2_2, 36);

  slicedOutput_9 <= Gain_B2_3(31 DOWNTO 18);

  slicedOutput_10 <= d3f_2(17 DOWNTO 0);

  slicedOutput_11 <= Gain_B2_3(17 DOWNTO 0);

  mulOutput_35 <= slicedOutput_8 * slicedOutput_9;

  mulOutput_36 <= resize(mulOutput_35, 64);

  bitshiftoutput_6 <= mulOutput_36 sll 36;

  mulOutput_37 <= slicedOutput_10 * slicedOutput_9;

  mulOutput_38 <= resize(mulOutput_37, 64);

  bitshiftoutput_7 <= mulOutput_38 sll 18;

  mulOutput_39 <= resize(bitshiftoutput_6, 65) + resize(bitshiftoutput_7, 65);

  mulOutput_40 <= slicedOutput_8 * slicedOutput_11;

  mulOutput_41 <= resize(mulOutput_40, 64);

  bitshiftoutput_8 <= mulOutput_41 sll 18;

  mulOutput_42 <= slicedOutput_10 * slicedOutput_11;

  mulOutput_43 <= resize(mulOutput_42, 64);

  mulOutput_44 <= resize(bitshiftoutput_8, 65) + resize(mulOutput_43, 65);

  mulOutput_45 <= resize(mulOutput_39, 66) + resize(mulOutput_44, 66);

  mulOutput_46 <= signed(mulOutput_45);

  SwitchComp_in2_uminus2_in0 <=  - (resize(mulOutput_46, 67));
  mulOutput_47 <= SwitchComp_in2_uminus2_in0(65 DOWNTO 0);

  
  mulOutput_48 <= mulOutput_47 WHEN switch_compare_1_2 = '0' ELSE
      mulOutput_46;

  mulOutput_49 <= mulOutput_48(63 DOWNTO 0);

  
  mulOutput_50 <= X"7FFFFFFF" WHEN (mulOutput_49(63) = '0') AND (mulOutput_49(62 DOWNTO 47) /= X"0000") ELSE
      X"80000000" WHEN (mulOutput_49(63) = '1') AND (mulOutput_49(62 DOWNTO 47) /= X"FFFF") ELSE
      mulOutput_49(47 DOWNTO 16);

  d3_2 <= std_logic_vector(d3);

  d4_reg_signed <= signed(d4_reg);

  FIRDecimator4_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        d4 <= to_signed(0, 32);
      ELSIF enb_1_32_0 = '1' THEN
        d4 <= d4_reg_signed;
      END IF;
    END IF;
  END PROCESS FIRDecimator4_reg_process;


  d4_1 <= std_logic_vector(d4);

  d4f_reg_signed <= signed(d4f_reg);

  FIRBandPass1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        d4f <= to_signed(0, 32);
      ELSIF enb_1_32_0 = '1' THEN
        d4f <= d4f_reg_signed;
      END IF;
    END IF;
  END PROCESS FIRBandPass1_reg_process;


  
  SignumOutput_6 <= to_signed(16#1#, 2) WHEN d4f > to_signed(0, 32) ELSE
      to_signed(-16#1#, 2) WHEN d4f < to_signed(0, 32) ELSE
      to_signed(16#0#, 2);

  Gain_B1_signed <= signed(Gain_B1);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch1_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_32_0 = '1' THEN
        delayMatch1_reg(0) <= Gain_B1_signed;
        delayMatch1_reg(1 TO 3) <= delayMatch1_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Gain_B1_1 <= delayMatch1_reg(3);

  
  SignumOutput_7 <= to_signed(16#1#, 2) WHEN Gain_B1_1 > to_signed(0, 32) ELSE
      to_signed(-16#1#, 2) WHEN Gain_B1_1 < to_signed(0, 32) ELSE
      to_signed(16#0#, 2);

  mul_sign3_mul_temp <= SignumOutput_6 * SignumOutput_7;
  mulOutput_51 <= mul_sign3_mul_temp(1 DOWNTO 0);

  
  switch_compare_1_3 <= '1' WHEN mulOutput_51 > to_signed(16#0#, 2) ELSE
      '0';

  Product4_in0_dtc_in_abs_cast <= resize(d4f, 33);
  
  Product4_in0_dtc_in_abs_y <=  - (Product4_in0_dtc_in_abs_cast) WHEN d4f < to_signed(0, 32) ELSE
      resize(d4f, 33);
  d4f_1 <= unsigned(Product4_in0_dtc_in_abs_y(31 DOWNTO 0));

  d4f_2 <= resize(d4f_1, 36);

  slicedOutput_12 <= d4f_2(31 DOWNTO 18);

  Product4_in1_dtc_in_abs_cast <= resize(Gain_B1_1, 33);
  
  Product4_in1_dtc_in_abs_y <=  - (Product4_in1_dtc_in_abs_cast) WHEN Gain_B1_1 < to_signed(0, 32) ELSE
      resize(Gain_B1_1, 33);
  Gain_B1_2 <= unsigned(Product4_in1_dtc_in_abs_y(31 DOWNTO 0));

  Gain_B1_3 <= resize(Gain_B1_2, 36);

  slicedOutput_13 <= Gain_B1_3(31 DOWNTO 18);

  slicedOutput_14 <= d4f_2(17 DOWNTO 0);

  slicedOutput_15 <= Gain_B1_3(17 DOWNTO 0);

  mulOutput_52 <= slicedOutput_12 * slicedOutput_13;

  mulOutput_53 <= resize(mulOutput_52, 64);

  bitshiftoutput_9 <= mulOutput_53 sll 36;

  mulOutput_54 <= slicedOutput_14 * slicedOutput_13;

  mulOutput_55 <= resize(mulOutput_54, 64);

  bitshiftoutput_10 <= mulOutput_55 sll 18;

  mulOutput_56 <= resize(bitshiftoutput_9, 65) + resize(bitshiftoutput_10, 65);

  mulOutput_57 <= slicedOutput_12 * slicedOutput_15;

  mulOutput_58 <= resize(mulOutput_57, 64);

  bitshiftoutput_11 <= mulOutput_58 sll 18;

  mulOutput_59 <= slicedOutput_14 * slicedOutput_15;

  mulOutput_60 <= resize(mulOutput_59, 64);

  mulOutput_61 <= resize(bitshiftoutput_11, 65) + resize(mulOutput_60, 65);

  mulOutput_62 <= resize(mulOutput_56, 66) + resize(mulOutput_61, 66);

  mulOutput_63 <= signed(mulOutput_62);

  SwitchComp_in2_uminus3_in0 <=  - (resize(mulOutput_63, 67));
  mulOutput_64 <= SwitchComp_in2_uminus3_in0(65 DOWNTO 0);

  
  mulOutput_65 <= mulOutput_64 WHEN switch_compare_1_3 = '0' ELSE
      mulOutput_63;

  mulOutput_66 <= mulOutput_65(63 DOWNTO 0);

  
  Product4_out1 <= X"7FFFFFFF" WHEN (mulOutput_66(63) = '0') AND (mulOutput_66(62 DOWNTO 47) /= X"0000") ELSE
      X"80000000" WHEN (mulOutput_66(63) = '1') AND (mulOutput_66(62 DOWNTO 47) /= X"FFFF") ELSE
      mulOutput_66(47 DOWNTO 16);

  Product4_out1_1 <= std_logic_vector(Product4_out1);

  FIRInterpolator4_out1_reg_signed <= signed(FIRInterpolator4_out1_reg);

  FIRInterpolator4_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        FIRInterpolator4_out1 <= to_signed(0, 32);
      ELSIF enb_1_16_0 = '1' THEN
        FIRInterpolator4_out1 <= FIRInterpolator4_out1_reg_signed;
      END IF;
    END IF;
  END PROCESS FIRInterpolator4_reg_process;


  Add3_add_cast <= resize(mulOutput_50, 33);
  Add3_add_cast_1 <= resize(FIRInterpolator4_out1, 33);
  Add3_out1 <= Add3_add_cast + Add3_add_cast_1;

  Add3_out1_1 <= std_logic_vector(Add3_out1);

  FIRInterpolator3_out1_reg_signed <= signed(FIRInterpolator3_out1_reg);

  FIRInterpolator3_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        FIRInterpolator3_out1 <= to_signed(0, 32);
      ELSIF enb_1_8_0 = '1' THEN
        FIRInterpolator3_out1 <= FIRInterpolator3_out1_reg_signed;
      END IF;
    END IF;
  END PROCESS FIRInterpolator3_reg_process;


  Add2_add_cast <= resize(mulOutput_33, 33);
  Add2_add_cast_1 <= resize(FIRInterpolator3_out1, 33);
  Add2_out1 <= Add2_add_cast + Add2_add_cast_1;

  Add2_out1_1 <= std_logic_vector(Add2_out1);

  FIRInterpolator2_out1_reg_signed <= signed(FIRInterpolator2_out1_reg);

  FIRInterpolator2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        FIRInterpolator2_out1 <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        FIRInterpolator2_out1 <= FIRInterpolator2_out1_reg_signed;
      END IF;
    END IF;
  END PROCESS FIRInterpolator2_reg_process;


  Add1_add_cast <= resize(mulOutput_16, 33);
  Add1_add_cast_1 <= resize(FIRInterpolator2_out1, 33);
  Add1_out1 <= Add1_add_cast + Add1_add_cast_1;

  Add1_out1_1 <= std_logic_vector(Add1_out1);

  FIRInterpolator1_out1_reg_signed <= signed(FIRInterpolator1_out1_reg);

  FIRInterpolator1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        FIRInterpolator1_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        FIRInterpolator1_out1 <= FIRInterpolator1_out1_reg_signed;
      END IF;
    END IF;
  END PROCESS FIRInterpolator1_reg_process;


  data_out <= std_logic_vector(FIRInterpolator1_out1);

END rtl;

