-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\HA_sys8\HA_LR_tc.vhd
-- Created: 2018-12-04 11:17:57
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HA_LR_tc
-- Source Path: HA_LR_tc
-- Hierarchy Level: 1
-- 
-- Master clock enable input: clk_enable
-- 
-- enb_16_1_1  : identical to clk_enable
-- enb_8_4_1   : 8x slower than clk with phase 1
-- enb         : 16x slower than clk with last phase
-- enb_1_1_1   : 16x slower than clk with phase 1
-- enb_8_16_1  : 32x slower than clk with phase 1
-- enb_1_4_0   : 64x slower than clk with last phase
-- enb_1_8_0   : 128x slower than clk with last phase
-- enb_4_32_1  : 128x slower than clk with phase 1
-- enb_1_16_0  : 256x slower than clk with last phase
-- enb_1_32_0  : 512x slower than clk with last phase
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HA_LR_tc IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        enb_16_1_1                        :   OUT   std_logic;
        enb_8_4_1                         :   OUT   std_logic;
        enb                               :   OUT   std_logic;
        enb_1_1_1                         :   OUT   std_logic;
        enb_8_16_1                        :   OUT   std_logic;
        enb_1_4_0                         :   OUT   std_logic;
        enb_1_8_0                         :   OUT   std_logic;
        enb_4_32_1                        :   OUT   std_logic;
        enb_1_16_0                        :   OUT   std_logic;
        enb_1_32_0                        :   OUT   std_logic
        );
END HA_LR_tc;


ARCHITECTURE rtl OF HA_LR_tc IS

  -- Signals
  SIGNAL count8                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL phase_1                          : std_logic;
  SIGNAL phase_1_tmp                      : std_logic;
  SIGNAL count16                          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL phase_0                          : std_logic;
  SIGNAL phase_0_tmp                      : std_logic;
  SIGNAL phase_1_1                        : std_logic;
  SIGNAL phase_1_tmp_1                    : std_logic;
  SIGNAL count32                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL phase_1_2                        : std_logic;
  SIGNAL phase_1_tmp_2                    : std_logic;
  SIGNAL count64                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL phase_0_1                        : std_logic;
  SIGNAL phase_0_tmp_1                    : std_logic;
  SIGNAL count128                         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL phase_0_2                        : std_logic;
  SIGNAL phase_0_tmp_2                    : std_logic;
  SIGNAL phase_1_3                        : std_logic;
  SIGNAL phase_1_tmp_3                    : std_logic;
  SIGNAL count256                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL phase_0_3                        : std_logic;
  SIGNAL phase_0_tmp_3                    : std_logic;
  SIGNAL count512                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL phase_all                        : std_logic;
  SIGNAL phase_0_4                        : std_logic;
  SIGNAL phase_0_tmp_4                    : std_logic;

BEGIN
  Counter8 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        count8 <= to_unsigned(1, 3);
      ELSIF clk_enable = '1' THEN
        IF count8 >= to_unsigned(7, 3) THEN
          count8 <= to_unsigned(0, 3);
        ELSE
          count8 <= count8 + to_unsigned(1, 3);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter8;

  temp_process0 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        phase_1 <= '1';
      ELSIF clk_enable = '1' THEN
        phase_1 <= phase_1_tmp;
      END IF;
    END IF; 
  END PROCESS temp_process0;

  phase_1_tmp <= '1' WHEN count8 = to_unsigned(0, 3) AND clk_enable = '1' ELSE '0';

  Counter16 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        count16 <= to_unsigned(1, 4);
      ELSIF clk_enable = '1' THEN
        IF count16 >= to_unsigned(15, 4) THEN
          count16 <= to_unsigned(0, 4);
        ELSE
          count16 <= count16 + to_unsigned(1, 4);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter16;

  temp_process1 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        phase_0 <= '0';
      ELSIF clk_enable = '1' THEN
        phase_0 <= phase_0_tmp;
      END IF;
    END IF; 
  END PROCESS temp_process1;

  phase_0_tmp <= '1' WHEN count16 = to_unsigned(15, 4) AND clk_enable = '1' ELSE '0';

  temp_process2 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        phase_1_1 <= '1';
      ELSIF clk_enable = '1' THEN
        phase_1_1 <= phase_1_tmp_1;
      END IF;
    END IF; 
  END PROCESS temp_process2;

  phase_1_tmp_1 <= '1' WHEN count16 = to_unsigned(0, 4) AND clk_enable = '1' ELSE '0';

  Counter32 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        count32 <= to_unsigned(1, 5);
      ELSIF clk_enable = '1' THEN
        IF count32 >= to_unsigned(31, 5) THEN
          count32 <= to_unsigned(0, 5);
        ELSE
          count32 <= count32 + to_unsigned(1, 5);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter32;

  temp_process3 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        phase_1_2 <= '1';
      ELSIF clk_enable = '1' THEN
        phase_1_2 <= phase_1_tmp_2;
      END IF;
    END IF; 
  END PROCESS temp_process3;

  phase_1_tmp_2 <= '1' WHEN count32 = to_unsigned(0, 5) AND clk_enable = '1' ELSE '0';

  Counter64 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        count64 <= to_unsigned(1, 6);
      ELSIF clk_enable = '1' THEN
        IF count64 >= to_unsigned(63, 6) THEN
          count64 <= to_unsigned(0, 6);
        ELSE
          count64 <= count64 + to_unsigned(1, 6);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter64;

  temp_process4 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        phase_0_1 <= '0';
      ELSIF clk_enable = '1' THEN
        phase_0_1 <= phase_0_tmp_1;
      END IF;
    END IF; 
  END PROCESS temp_process4;

  phase_0_tmp_1 <= '1' WHEN count64 = to_unsigned(63, 6) AND clk_enable = '1' ELSE '0';

  Counter128 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        count128 <= to_unsigned(1, 7);
      ELSIF clk_enable = '1' THEN
        IF count128 >= to_unsigned(127, 7) THEN
          count128 <= to_unsigned(0, 7);
        ELSE
          count128 <= count128 + to_unsigned(1, 7);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter128;

  temp_process5 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        phase_0_2 <= '0';
      ELSIF clk_enable = '1' THEN
        phase_0_2 <= phase_0_tmp_2;
      END IF;
    END IF; 
  END PROCESS temp_process5;

  phase_0_tmp_2 <= '1' WHEN count128 = to_unsigned(127, 7) AND clk_enable = '1' ELSE '0';

  temp_process6 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        phase_1_3 <= '1';
      ELSIF clk_enable = '1' THEN
        phase_1_3 <= phase_1_tmp_3;
      END IF;
    END IF; 
  END PROCESS temp_process6;

  phase_1_tmp_3 <= '1' WHEN count128 = to_unsigned(0, 7) AND clk_enable = '1' ELSE '0';

  Counter256 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        count256 <= to_unsigned(1, 8);
      ELSIF clk_enable = '1' THEN
        IF count256 >= to_unsigned(255, 8) THEN
          count256 <= to_unsigned(0, 8);
        ELSE
          count256 <= count256 + to_unsigned(1, 8);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter256;

  temp_process7 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        phase_0_3 <= '0';
      ELSIF clk_enable = '1' THEN
        phase_0_3 <= phase_0_tmp_3;
      END IF;
    END IF; 
  END PROCESS temp_process7;

  phase_0_tmp_3 <= '1' WHEN count256 = to_unsigned(255, 8) AND clk_enable = '1' ELSE '0';

  Counter512 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        count512 <= to_unsigned(1, 9);
      ELSIF clk_enable = '1' THEN
        IF count512 >= to_unsigned(511, 9) THEN
          count512 <= to_unsigned(0, 9);
        ELSE
          count512 <= count512 + to_unsigned(1, 9);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter512;

  phase_all <= '1' WHEN clk_enable = '1' ELSE '0';

  temp_process8 : PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        phase_0_4 <= '0';
      ELSIF clk_enable = '1' THEN
        phase_0_4 <= phase_0_tmp_4;
      END IF;
    END IF; 
  END PROCESS temp_process8;

  phase_0_tmp_4 <= '1' WHEN count512 = to_unsigned(511, 9) AND clk_enable = '1' ELSE '0';

  enb_16_1_1 <=  phase_all AND clk_enable;

  enb_8_4_1 <=  phase_1 AND clk_enable;

  enb <=  phase_0 AND clk_enable;

  enb_1_1_1 <=  phase_1_1 AND clk_enable;

  enb_8_16_1 <=  phase_1_2 AND clk_enable;

  enb_1_4_0 <=  phase_0_1 AND clk_enable;

  enb_1_8_0 <=  phase_0_2 AND clk_enable;

  enb_4_32_1 <=  phase_1_3 AND clk_enable;

  enb_1_16_0 <=  phase_0_3 AND clk_enable;

  enb_1_32_0 <=  phase_0_4 AND clk_enable;


END rtl;

