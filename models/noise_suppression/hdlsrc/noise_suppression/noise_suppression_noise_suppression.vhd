-- -------------------------------------------------------------
-- 
-- File Name: /home/trevor/research/NIH_SBIR_R44_DC015443/simulink_models/models/noise_suppression/hdlsrc/noise_suppression/noise_suppression_noise_suppression.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: noise_suppression_noise_suppression
-- Source Path: noise_suppression/dataplane/Adaptive_Wiener_Filter Sample Based Filtering/noise suppression blocks/noise 
-- suppressio
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY noise_suppression_noise_suppression IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        noisy_signal                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        valid                             :   IN    std_logic;
        noise_variance                    :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En31
        estimated_signal                  :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
        );
END noise_suppression_noise_suppression;


ARCHITECTURE rtl OF noise_suppression_noise_suppression IS

  -- Component Declarations
  COMPONENT noise_suppression_SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT noise_suppression_compute_statistics
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          data                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          valid                           :   IN    std_logic;
          mean                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          variance                        :   OUT   std_logic_vector(49 DOWNTO 0)  -- sfix50_En47
          );
  END COMPONENT;

  COMPONENT noise_suppression_adaptive_wiener_filter
    PORT( data                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          mean                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          variance                        :   IN    std_logic_vector(49 DOWNTO 0);  -- sfix50_En47
          noiseVariance                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En31
          estimatedSignal                 :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : noise_suppression_SimpleDualPortRAM_generic
    USE ENTITY work.noise_suppression_SimpleDualPortRAM_generic(rtl);

  FOR ALL : noise_suppression_compute_statistics
    USE ENTITY work.noise_suppression_compute_statistics(rtl);

  FOR ALL : noise_suppression_adaptive_wiener_filter
    USE ENTITY work.noise_suppression_adaptive_wiener_filter(rtl);

  -- Signals
  SIGNAL noisy_signal_signed              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL noise_variance_unsigned          : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL mergedInput                      : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mergedDelay_regin                : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mergedDelay_waddr                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_wrenb                : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_regout               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL mergedDelay_regout_unsigned      : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL mergedOutput                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL slicedInput                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL noisy_signal_1                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL compute_statistics_out1          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL compute_statistics_out2          : std_logic_vector(49 DOWNTO 0);  -- ufix50
  SIGNAL slicedInput_1                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL noise_variance_1                 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL estimatedSignal                  : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_ShiftRegisterRAM_generic : noise_suppression_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 64
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(mergedDelay_regin),
              wr_addr => std_logic_vector(mergedDelay_waddr),
              wr_en => mergedDelay_wrenb,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr),
              rd_dout => mergedDelay_regout
              );

  u_compute_statistics : noise_suppression_compute_statistics
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              data => noisy_signal,  -- sfix32_En28
              valid => valid,
              mean => compute_statistics_out1,  -- sfix32_En28
              variance => compute_statistics_out2  -- sfix50_En47
              );

  u_adaptive_wiener_filter : noise_suppression_adaptive_wiener_filter
    PORT MAP( data => std_logic_vector(noisy_signal_1),  -- sfix32_En28
              mean => compute_statistics_out1,  -- sfix32_En28
              variance => compute_statistics_out2,  -- sfix50_En47
              noiseVariance => std_logic_vector(noise_variance_1),  -- ufix32_En31
              estimatedSignal => estimatedSignal  -- sfix32_En28
              );

  noisy_signal_signed <= signed(noisy_signal);

  noise_variance_unsigned <= unsigned(noise_variance);

  mergedInput <= unsigned(noisy_signal_signed) & noise_variance_unsigned;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin <= to_unsigned(0, 64);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        mergedDelay_regin <= mergedInput;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr <= to_unsigned(16#0#, 3);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        IF mergedDelay_waddr >= to_unsigned(16#3#, 3) THEN 
          mergedDelay_waddr <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_waddr <= mergedDelay_waddr + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_process;


  mergedDelay_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 3
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr <= to_unsigned(16#1#, 3);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        IF mergedDelay_raddr >= to_unsigned(16#3#, 3) THEN 
          mergedDelay_raddr <= to_unsigned(16#0#, 3);
        ELSE 
          mergedDelay_raddr <= mergedDelay_raddr + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_process;


  mergedDelay_regout_unsigned <= unsigned(mergedDelay_regout);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput <= to_unsigned(0, 64);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        mergedOutput <= mergedDelay_regout_unsigned;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_process;


  slicedInput <= mergedOutput(63 DOWNTO 32);

  noisy_signal_1 <= signed(slicedInput);

  slicedInput_1 <= mergedOutput(31 DOWNTO 0);

  noise_variance_1 <= slicedInput_1;

  estimated_signal <= estimatedSignal;

END rtl;

