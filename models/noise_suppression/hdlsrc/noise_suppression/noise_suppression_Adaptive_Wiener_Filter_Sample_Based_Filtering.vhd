-- -------------------------------------------------------------
-- 
-- File Name: /mnt/data/NIH/simulink_models/models/noise_suppression/hdlsrc/noise_suppression/noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering.vhd
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering
-- Source Path: noise_suppression/dataplane/Adaptive_Wiener_Filter Sample Based Filtering
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.noise_suppression_dataplane_pkg.ALL;

ENTITY noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        Sink_Data                         :   IN    vector_of_std_logic_vector24(0 TO 1);  -- sfix24_En23 [2]
        noise_variance                    :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24_En23
        enable                            :   IN    std_logic;
        data_out                          :   OUT   vector_of_std_logic_vector50(0 TO 1)  -- sfix50_En46 [2]
        );
END noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering;


ARCHITECTURE rtl OF noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering IS

  ATTRIBUTE multstyle : string;

  ATTRIBUTE multstyle OF rtl : ARCHITECTURE IS "dsp";

  -- Component Declarations
  COMPONENT noise_suppression_compute_statistics
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          data                            :   IN    vector_of_std_logic_vector24(0 TO 1);  -- sfix24_En23 [2]
          mean                            :   OUT   vector_of_std_logic_vector24(0 TO 1);  -- sfix24_En23 [2]
          variance                        :   OUT   vector_of_std_logic_vector50(0 TO 1)  -- sfix50_En47 [2]
          );
  END COMPONENT;

  COMPONENT noise_suppression_streaming_partition_streamed
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector24(0 TO 1);  -- sfix24_En23 [2]
          in1                             :   IN    vector_of_std_logic_vector24(0 TO 1);  -- sfix24_En23 [2]
          in2                             :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24_En23
          in3                             :   IN    vector_of_std_logic_vector50(0 TO 1);  -- sfix50_En47 [2]
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   vector_of_std_logic_vector25(0 TO 1);  -- sfix25_En23 [2]
          out1                            :   OUT   vector_of_std_logic_vector24(0 TO 1);  -- sfix24_En20 [2]
          out2                            :   OUT   vector_of_std_logic_vector27(0 TO 1)  -- sfix27_En24 [2]
          );
  END COMPONENT;

  COMPONENT noise_suppression_Reciprocal1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          recip_in                        :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          recip_out                       :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En2
          );
  END COMPONENT;

  COMPONENT noise_suppression_Reciprocal2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          recip_in                        :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En20
          recip_out                       :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En2
          );
  END COMPONENT;

  COMPONENT noise_suppression_streaming_partition_streamed_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic;
          in1                             :   IN    vector_of_std_logic_vector24(0 TO 1);  -- sfix24_En23 [2]
          in2                             :   IN    vector_of_std_logic_vector27(0 TO 1);  -- sfix27_En24 [2]
          in3                             :   IN    vector_of_std_logic_vector24(0 TO 1);  -- sfix24_En2 [2]
          in4                             :   IN    vector_of_std_logic_vector24(0 TO 1);  -- sfix24_En23 [2]
          in5                             :   IN    vector_of_std_logic_vector25(0 TO 1);  -- sfix25_En23 [2]
          enb_counter                     :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          globalSchedule                  :   IN    std_logic;
          out0                            :   OUT   vector_of_std_logic_vector50(0 TO 1)  -- sfix50_En46 [2]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : noise_suppression_compute_statistics
    USE ENTITY work.noise_suppression_compute_statistics(rtl);

  FOR ALL : noise_suppression_streaming_partition_streamed
    USE ENTITY work.noise_suppression_streaming_partition_streamed(rtl);

  FOR ALL : noise_suppression_Reciprocal1
    USE ENTITY work.noise_suppression_Reciprocal1(rtl);

  FOR ALL : noise_suppression_Reciprocal2
    USE ENTITY work.noise_suppression_Reciprocal2(rtl);

  FOR ALL : noise_suppression_streaming_partition_streamed_block
    USE ENTITY work.noise_suppression_streaming_partition_streamed_block(rtl);

  -- Signals
  SIGNAL Sink_Data_signed                 : vector_of_signed24(0 TO 1);  -- sfix24_En23 [2]
  SIGNAL Sink_Data_1                      : vector_of_signed24(0 TO 1);  -- sfix24_En23 [2]
  SIGNAL Sink_Data_2                      : vector_of_std_logic_vector24(0 TO 1);  -- ufix24 [2]
  SIGNAL Sink_Data_3                      : vector_of_std_logic_vector24(0 TO 1);  -- ufix24 [2]
  SIGNAL mean                             : vector_of_std_logic_vector24(0 TO 1);  -- ufix24 [2]
  SIGNAL compute_statistics_out2          : vector_of_std_logic_vector50(0 TO 1);  -- ufix50 [2]
  SIGNAL noise_variance_1                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL ctr_2047_sig                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL enb_counter_ge_1_1               : std_logic;
  SIGNAL enb_counter_le_2_1               : std_logic;
  SIGNAL streaming_partition_enb_phase_1_1 : std_logic;
  SIGNAL Add2_out1                        : vector_of_std_logic_vector25(0 TO 1);  -- ufix25 [2]
  SIGNAL Data_Type_Conversion3_out1_signed : vector_of_std_logic_vector24(0 TO 1);  -- ufix24 [2]
  SIGNAL variance                         : vector_of_std_logic_vector27(0 TO 1);  -- ufix27 [2]
  SIGNAL Mux_out1                         : vector_of_std_logic_vector24(0 TO 1);  -- ufix24 [2]
  SIGNAL enb_counter_ge_30_1              : std_logic;
  SIGNAL enb_counter_le_35_1              : std_logic;
  SIGNAL streaming_partition_enb_phase_30_5 : std_logic;
  SIGNAL Switch_out1                      : vector_of_std_logic_vector50(0 TO 1);  -- ufix50 [2]
  SIGNAL Switch_out1_signed               : vector_of_signed50(0 TO 1);  -- sfix50_En46 [2]
  SIGNAL Switch_out1_2                    : vector_of_signed50(0 TO 1);  -- sfix50_En46 [2]
  SIGNAL Data_Type_Conversion1_bypass_reg : vector_of_signed50(0 TO 1);  -- sfix50 [2]
  SIGNAL Data_Type_Conversion1_bypass_reg_next : vector_of_signed50(0 TO 1);  -- sfix50_En46 [2]
  SIGNAL Switch_out1_3                    : vector_of_signed50(0 TO 1);  -- sfix50_En46 [2]

BEGIN
  u_compute_statistics : noise_suppression_compute_statistics
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_2048_0 => enb_1_2048_0,
              data => Sink_Data,  -- sfix24_En23 [2]
              mean => mean,  -- sfix24_En23 [2]
              variance => compute_statistics_out2  -- sfix50_En47 [2]
              );

  u_streaming_partition_streamed : noise_suppression_streaming_partition_streamed
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => Sink_Data_3,  -- sfix24_En23 [2]
              in1 => mean,  -- sfix24_En23 [2]
              in2 => noise_variance_1,  -- ufix24_En23
              in3 => compute_statistics_out2,  -- sfix50_En47 [2]
              globalSchedule => streaming_partition_enb_phase_1_1,
              out0 => Add2_out1,  -- sfix25_En23 [2]
              out1 => Data_Type_Conversion3_out1_signed,  -- sfix24_En20 [2]
              out2 => variance  -- sfix27_En24 [2]
              );

  u_Reciprocal : noise_suppression_Reciprocal1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              recip_in => Data_Type_Conversion3_out1_signed(0),  -- sfix24_En20
              recip_out => Mux_out1(0)  -- sfix24_En2
              );

  u_Reciprocal_1 : noise_suppression_Reciprocal2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              recip_in => Data_Type_Conversion3_out1_signed(1),  -- sfix24_En20
              recip_out => Mux_out1(1)  -- sfix24_En2
              );

  u_streaming_partition_streamed1 : noise_suppression_streaming_partition_streamed_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => enable,
              in1 => Sink_Data_2,  -- sfix24_En23 [2]
              in2 => variance,  -- sfix27_En24 [2]
              in3 => Mux_out1,  -- sfix24_En2 [2]
              in4 => mean,  -- sfix24_En23 [2]
              in5 => Add2_out1,  -- sfix25_En23 [2]
              enb_counter => std_logic_vector(ctr_2047_sig),  -- ufix16
              globalSchedule => streaming_partition_enb_phase_30_5,
              out0 => Switch_out1  -- sfix50_En46 [2]
              );

  outputgen4: FOR k IN 0 TO 1 GENERATE
    Sink_Data_signed(k) <= signed(Sink_Data(k));
  END GENERATE;

  Sink_Data_1 <= Sink_Data_signed;

  outputgen3: FOR k IN 0 TO 1 GENERATE
    Sink_Data_2(k) <= std_logic_vector(Sink_Data_1(k));
  END GENERATE;

  outputgen2: FOR k IN 0 TO 1 GENERATE
    Sink_Data_3(k) <= std_logic_vector(Sink_Data_1(k));
  END GENERATE;

  noise_variance_1 <= std_logic_vector(unsigned(noise_variance));

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2047
  ctr_2047_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ctr_2047_sig <= to_unsigned(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        IF ctr_2047_sig >= to_unsigned(16#07FF#, 16) THEN 
          ctr_2047_sig <= to_unsigned(16#0000#, 16);
        ELSE 
          ctr_2047_sig <= ctr_2047_sig + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS ctr_2047_process;


  
  enb_counter_ge_1_1 <= '1' WHEN ctr_2047_sig >= to_unsigned(16#0001#, 16) ELSE
      '0';

  
  enb_counter_le_2_1 <= '1' WHEN ctr_2047_sig <= to_unsigned(16#0002#, 16) ELSE
      '0';

  streaming_partition_enb_phase_1_1 <= enb_counter_ge_1_1 AND enb_counter_le_2_1;


  
  enb_counter_ge_30_1 <= '1' WHEN ctr_2047_sig >= to_unsigned(16#001E#, 16) ELSE
      '0';

  
  enb_counter_le_35_1 <= '1' WHEN ctr_2047_sig <= to_unsigned(16#0023#, 16) ELSE
      '0';

  streaming_partition_enb_phase_30_5 <= enb_counter_ge_30_1 AND enb_counter_le_35_1;

  outputgen1: FOR k IN 0 TO 1 GENERATE
    Switch_out1_signed(k) <= signed(Switch_out1(k));
  END GENERATE;

  Switch_out1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Switch_out1_2(0) <= to_signed(0, 50);
      Switch_out1_2(1) <= to_signed(0, 50);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Switch_out1_2(0) <= Switch_out1_signed(0);
        Switch_out1_2(1) <= Switch_out1_signed(1);
      END IF;
    END IF;
  END PROCESS Switch_out1_1_process;


  Data_Type_Conversion1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion1_bypass_reg(0) <= to_signed(0, 50);
      Data_Type_Conversion1_bypass_reg(1) <= to_signed(0, 50);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_1 = '1' THEN
        Data_Type_Conversion1_bypass_reg(0) <= Data_Type_Conversion1_bypass_reg_next(0);
        Data_Type_Conversion1_bypass_reg(1) <= Data_Type_Conversion1_bypass_reg_next(1);
      END IF;
    END IF;
  END PROCESS Data_Type_Conversion1_bypass_process;

  
  Switch_out1_3(0) <= Switch_out1_2(0) WHEN enb_1_2048_1 = '1' ELSE
      Data_Type_Conversion1_bypass_reg(0);
  
  Switch_out1_3(1) <= Switch_out1_2(1) WHEN enb_1_2048_1 = '1' ELSE
      Data_Type_Conversion1_bypass_reg(1);
  Data_Type_Conversion1_bypass_reg_next(0) <= Switch_out1_2(0);
  Data_Type_Conversion1_bypass_reg_next(1) <= Switch_out1_2(1);

  outputgen: FOR k IN 0 TO 1 GENERATE
    data_out(k) <= std_logic_vector(Switch_out1_3(k));
  END GENERATE;

END rtl;

