-- -------------------------------------------------------------
-- 
-- File Name: /home/trevor/research/NIH_SBIR_R44_DC015443/simulink_models/models/noise_suppression/hdlsrc/noise_suppression/noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering
-- Source Path: noise_suppression/dataplane/Adaptive_Wiener_Filter Sample Based Filtering
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.noise_suppression_dataplane_pkg.ALL;

ENTITY noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Sink_Data                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Sink_Channel                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        valid                             :   IN    std_logic;
        enable                            :   IN    std_logic;
        noise_variance                    :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En31
        Source_Data                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Source_Channel                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        Source_Valid                      :   OUT   std_logic
        );
END noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering;


ARCHITECTURE rtl OF noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering IS

  -- Component Declarations
  COMPONENT noise_suppression_deserializer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          valid_in                        :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          data_out                        :   OUT   vector_of_std_logic_vector32(0 TO 1);  -- sfix32_En28 [2]
          valid_out                       :   OUT   std_logic;
          channel_out                     :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  COMPONENT noise_suppression_noise_suppression_blocks
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          valid                           :   IN    std_logic;
          noise_variance                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En31
          data_out                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT noise_suppression_serializer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    vector_of_std_logic_vector32(0 TO 1);  -- sfix32_En28 [2]
          valid_in                        :   IN    std_logic;
          channel_in                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          data_out                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          valid_out                       :   OUT   std_logic;
          channel_out                     :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : noise_suppression_deserializer
    USE ENTITY work.noise_suppression_deserializer(rtl);

  FOR ALL : noise_suppression_noise_suppression_blocks
    USE ENTITY work.noise_suppression_noise_suppression_blocks(rtl);

  FOR ALL : noise_suppression_serializer
    USE ENTITY work.noise_suppression_serializer(rtl);

  -- Signals
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch_reg_next              : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL enable_1                         : std_logic;
  SIGNAL Sink_Data_signed                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayMatch1_reg                  : vector_of_signed32(0 TO 5);  -- sfix32 [6]
  SIGNAL delayMatch1_reg_next             : vector_of_signed32(0 TO 5);  -- sfix32_En28 [6]
  SIGNAL from_passthrough_out1            : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL data_out                         : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL valid_out                        : std_logic;
  SIGNAL channel_out                      : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL from_passthrough_out1_scalarexpand : vector_of_signed32(0 TO 1);  -- sfix32_En28 [2]
  SIGNAL noise_suppression_blocks_out1    : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL noise_suppression_blocks_out1_signed : vector_of_signed32(0 TO 1);  -- sfix32_En28 [2]
  SIGNAL enable_switch_out1               : vector_of_signed32(0 TO 1);  -- sfix32_En28 [2]
  SIGNAL enable_switch_out1_1             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL channel_out_unsigned             : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch2_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL valid_out_1                      : std_logic;
  SIGNAL delayMatch3_reg                  : vector_of_unsigned2(0 TO 5);  -- ufix2 [6]
  SIGNAL delayMatch3_reg_next             : vector_of_unsigned2(0 TO 5);  -- ufix2 [6]
  SIGNAL channel_out_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_out_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL valid_out_2                      : std_logic;
  SIGNAL channel_out_2                    : std_logic_vector(1 DOWNTO 0);  -- ufix2

BEGIN
  u_deserializer : noise_suppression_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              data_in => Sink_Data,  -- sfix32_En28
              valid_in => valid,
              channel_in => Sink_Channel,  -- ufix2
              data_out => data_out,  -- sfix32_En28 [2]
              valid_out => valid_out,
              channel_out => channel_out  -- ufix2
              );

  u_serializer : noise_suppression_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              data_in => enable_switch_out1_1,  -- sfix32_En28 [2]
              valid_in => valid_out_1,
              channel_in => std_logic_vector(channel_out_1),  -- ufix2
              data_out => data_out_1,  -- sfix32_En28
              valid_out => valid_out_2,
              channel_out => channel_out_2  -- ufix2
              );

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg(0) <= '0';
      delayMatch_reg(1) <= '0';
      delayMatch_reg(2) <= '0';
      delayMatch_reg(3) <= '0';
      delayMatch_reg(4) <= '0';
      delayMatch_reg(5) <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
        delayMatch_reg(3) <= delayMatch_reg_next(3);
        delayMatch_reg(4) <= delayMatch_reg_next(4);
        delayMatch_reg(5) <= delayMatch_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  enable_1 <= delayMatch_reg(5);
  delayMatch_reg_next(0) <= enable;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);

  -- 
  Sink_Data_signed <= signed(Sink_Data);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg(0) <= to_signed(0, 32);
      delayMatch1_reg(1) <= to_signed(0, 32);
      delayMatch1_reg(2) <= to_signed(0, 32);
      delayMatch1_reg(3) <= to_signed(0, 32);
      delayMatch1_reg(4) <= to_signed(0, 32);
      delayMatch1_reg(5) <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
        delayMatch1_reg(2) <= delayMatch1_reg_next(2);
        delayMatch1_reg(3) <= delayMatch1_reg_next(3);
        delayMatch1_reg(4) <= delayMatch1_reg_next(4);
        delayMatch1_reg(5) <= delayMatch1_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  from_passthrough_out1 <= delayMatch1_reg(5);
  delayMatch1_reg_next(0) <= Sink_Data_signed;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);
  delayMatch1_reg_next(4) <= delayMatch1_reg(3);
  delayMatch1_reg_next(5) <= delayMatch1_reg(4);

  from_passthrough_out1_scalarexpand(0) <= from_passthrough_out1;
  from_passthrough_out1_scalarexpand(1) <= from_passthrough_out1;

  GEN_LABEL: FOR k IN 0 TO 1 GENERATE
    u_noise_suppression_blocks : noise_suppression_noise_suppression_blocks
      PORT MAP( clk => clk,
                reset => reset,
                enb => enb,
                data_in => data_out(k),  -- sfix32_En28
                valid => valid_out,
                noise_variance => noise_variance,  -- ufix32_En31
                data_out => noise_suppression_blocks_out1(k)  -- sfix32_En28
                );
  END GENERATE;

  outputgen1: FOR k IN 0 TO 1 GENERATE
    noise_suppression_blocks_out1_signed(k) <= signed(noise_suppression_blocks_out1(k));
  END GENERATE;

  
  enable_switch_out1(0) <= from_passthrough_out1_scalarexpand(0) WHEN enable_1 = '0' ELSE
      noise_suppression_blocks_out1_signed(0);
  
  enable_switch_out1(1) <= from_passthrough_out1_scalarexpand(1) WHEN enable_1 = '0' ELSE
      noise_suppression_blocks_out1_signed(1);

  outputgen: FOR k IN 0 TO 1 GENERATE
    enable_switch_out1_1(k) <= std_logic_vector(enable_switch_out1(k));
  END GENERATE;

  channel_out_unsigned <= unsigned(channel_out);

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg(0) <= '0';
      delayMatch2_reg(1) <= '0';
      delayMatch2_reg(2) <= '0';
      delayMatch2_reg(3) <= '0';
      delayMatch2_reg(4) <= '0';
      delayMatch2_reg(5) <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
        delayMatch2_reg(2) <= delayMatch2_reg_next(2);
        delayMatch2_reg(3) <= delayMatch2_reg_next(3);
        delayMatch2_reg(4) <= delayMatch2_reg_next(4);
        delayMatch2_reg(5) <= delayMatch2_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  valid_out_1 <= delayMatch2_reg(5);
  delayMatch2_reg_next(0) <= valid_out;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);
  delayMatch2_reg_next(3) <= delayMatch2_reg(2);
  delayMatch2_reg_next(4) <= delayMatch2_reg(3);
  delayMatch2_reg_next(5) <= delayMatch2_reg(4);

  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch3_reg(0) <= to_unsigned(16#0#, 2);
      delayMatch3_reg(1) <= to_unsigned(16#0#, 2);
      delayMatch3_reg(2) <= to_unsigned(16#0#, 2);
      delayMatch3_reg(3) <= to_unsigned(16#0#, 2);
      delayMatch3_reg(4) <= to_unsigned(16#0#, 2);
      delayMatch3_reg(5) <= to_unsigned(16#0#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch3_reg(0) <= delayMatch3_reg_next(0);
        delayMatch3_reg(1) <= delayMatch3_reg_next(1);
        delayMatch3_reg(2) <= delayMatch3_reg_next(2);
        delayMatch3_reg(3) <= delayMatch3_reg_next(3);
        delayMatch3_reg(4) <= delayMatch3_reg_next(4);
        delayMatch3_reg(5) <= delayMatch3_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  channel_out_1 <= delayMatch3_reg(5);
  delayMatch3_reg_next(0) <= channel_out_unsigned;
  delayMatch3_reg_next(1) <= delayMatch3_reg(0);
  delayMatch3_reg_next(2) <= delayMatch3_reg(1);
  delayMatch3_reg_next(3) <= delayMatch3_reg(2);
  delayMatch3_reg_next(4) <= delayMatch3_reg(3);
  delayMatch3_reg_next(5) <= delayMatch3_reg(4);

  Source_Valid <= valid_out_2;

  Source_Data <= data_out_1;

  Source_Channel <= channel_out_2;

END rtl;

