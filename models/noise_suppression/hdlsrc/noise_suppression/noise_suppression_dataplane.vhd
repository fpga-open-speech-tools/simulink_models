-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\wickh\Documents\NIH\simulink_models\models\noise_suppression\hdlsrc\noise_suppression\noise_suppression_dataplane.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.01725e-08
-- Target subsystem base rate: 1.01725e-08
-- Explicit user oversample request: 2048x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.01725e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- avalon_source_data            ce_out        1.01725e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: noise_suppression_dataplane
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.noise_suppression_dataplane_pkg.ALL;

ENTITY noise_suppression_dataplane IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        avalon_sink_data                  :   IN    vector_of_std_logic_vector32(0 TO 1);  -- sfix32_En28 [2]
        register_control_enable           :   IN    std_logic;
        register_control_noise_variance   :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En15
        ce_out                            :   OUT   std_logic;
        avalon_source_data                :   OUT   vector_of_std_logic_vector32(0 TO 1)  -- sfix32_En28 [2]
        );
END noise_suppression_dataplane;


ARCHITECTURE rtl OF noise_suppression_dataplane IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT noise_suppression_dataplane_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_2048_0                    :   OUT   std_logic;
          enb_1_2048_1                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          Sink_Data                       :   IN    vector_of_std_logic_vector24(0 TO 1);  -- sfix24_En23 [2]
          noise_variance                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En15
          enable                          :   IN    std_logic;
          data_out                        :   OUT   vector_of_std_logic_vector50(0 TO 1)  -- sfix50_En46 [2]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : noise_suppression_dataplane_tc
    USE ENTITY work.noise_suppression_dataplane_tc(rtl);

  FOR ALL : noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering
    USE ENTITY work.noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2048_1                     : std_logic;
  SIGNAL enb_1_2048_0                     : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL avalon_sink_data_signed          : vector_of_signed32(0 TO 1);  -- sfix32_En28 [2]
  SIGNAL avalon_sink_data_1               : vector_of_signed32(0 TO 1);  -- sfix32_En28 [2]
  SIGNAL Data_Type_Conversion_out1        : vector_of_signed24(0 TO 1);  -- sfix24_En23 [2]
  SIGNAL Data_Type_Conversion_out1_1      : vector_of_std_logic_vector24(0 TO 1);  -- ufix24 [2]
  SIGNAL Adaptive_Wiener_Filter_Sample_Based_Filtering_out1 : vector_of_std_logic_vector50(0 TO 1);  -- ufix50 [2]
  SIGNAL Adaptive_Wiener_Filter_Sample_Based_Filtering_out1_signed : vector_of_signed50(0 TO 1);  -- sfix50_En46 [2]
  SIGNAL Data_Type_Conversion1_out1       : vector_of_signed32(0 TO 1);  -- sfix32_En28 [2]

BEGIN
  u_dataplane_tc : noise_suppression_dataplane_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_2048_0 => enb_1_2048_0,
              enb_1_2048_1 => enb_1_2048_1
              );

  u_Adaptive_Wiener_Filter_Sample_Based_Filtering : noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_2048_0 => enb_1_2048_0,
              Sink_Data => Data_Type_Conversion_out1_1,  -- sfix24_En23 [2]
              noise_variance => register_control_noise_variance,  -- ufix16_En15
              enable => register_control_enable,
              data_out => Adaptive_Wiener_Filter_Sample_Based_Filtering_out1  -- sfix50_En46 [2]
              );

  outputgen3: FOR k IN 0 TO 1 GENERATE
    avalon_sink_data_signed(k) <= signed(avalon_sink_data(k));
  END GENERATE;

  avalon_sink_data_1 <= avalon_sink_data_signed;

  Data_Type_Conversion_out1(0) <= avalon_sink_data_1(0)(28 DOWNTO 5);
  Data_Type_Conversion_out1(1) <= avalon_sink_data_1(1)(28 DOWNTO 5);

  outputgen2: FOR k IN 0 TO 1 GENERATE
    Data_Type_Conversion_out1_1(k) <= std_logic_vector(Data_Type_Conversion_out1(k));
  END GENERATE;

  outputgen1: FOR k IN 0 TO 1 GENERATE
    Adaptive_Wiener_Filter_Sample_Based_Filtering_out1_signed(k) <= signed(Adaptive_Wiener_Filter_Sample_Based_Filtering_out1(k));
  END GENERATE;

  Data_Type_Conversion1_out1(0) <= Adaptive_Wiener_Filter_Sample_Based_Filtering_out1_signed(0)(49 DOWNTO 18);
  Data_Type_Conversion1_out1(1) <= Adaptive_Wiener_Filter_Sample_Based_Filtering_out1_signed(1)(49 DOWNTO 18);

  outputgen: FOR k IN 0 TO 1 GENERATE
    avalon_source_data(k) <= std_logic_vector(Data_Type_Conversion1_out1(k));
  END GENERATE;

  ce_out <= enb_1_1_1;

END rtl;

