-- -------------------------------------------------------------
-- 
-- File Name: /home/trevor/research/NIH_SBIR_R44_DC015443/simulink_models/models/noise_suppression/hdlsrc/noise_suppression/noise_suppression_dataplane.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 5.20833e-06
-- Target subsystem base rate: 5.20833e-06
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        5.20833e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- avalon_source_valid           ce_out        5.20833e-06
-- avalon_source_data            ce_out        5.20833e-06
-- avalon_source_channel         ce_out        5.20833e-06
-- avalon_source_error           ce_out        5.20833e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: noise_suppression_dataplane
-- Source Path: noise_suppression/dataplane
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.noise_suppression_dataplane_pkg.ALL;

ENTITY noise_suppression_dataplane IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        avalon_sink_valid                 :   IN    std_logic;
        avalon_sink_data                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        avalon_sink_channel               :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        avalon_sink_error                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        register_control_enable           :   IN    std_logic;
        register_control_noise_variance   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En31
        ce_out                            :   OUT   std_logic;
        avalon_source_valid               :   OUT   std_logic;
        avalon_source_data                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        avalon_source_channel             :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        avalon_source_error               :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
        );
END noise_suppression_dataplane;


ARCHITECTURE rtl OF noise_suppression_dataplane IS

  -- Component Declarations
  COMPONENT noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Sink_Data                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Sink_Channel                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          valid                           :   IN    std_logic;
          enable                          :   IN    std_logic;
          noise_variance                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En31
          Source_Data                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Source_Channel                  :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          Source_Valid                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering
    USE ENTITY work.noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL data_out                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL channel_out                      : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL valid_out                        : std_logic;
  SIGNAL avalon_sink_error_unsigned       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayMatch_reg                   : vector_of_unsigned2(0 TO 7);  -- ufix2 [8]
  SIGNAL delayMatch_reg_next              : vector_of_unsigned2(0 TO 7);  -- ufix2 [8]
  SIGNAL avalon_sink_error_1              : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  -- Control Signals that will be coming from Linux via
  -- memory mapped registers need to have names 
  -- containing the prefix "register_control_"
  -- (all lower case)
  -- 
  -- The Avalon Data Processing Block
  -- performs DSP on the left and right channels.
  -- 
  -- Ignore Errors.
  -- Assuming no errors coming from the ADC and errors going to DAC will be ignored.
  -- Any Error streaming needs to be done inside Avalon Data Processing block.
  -- 
  -- Avalon streaming interface signals need to have the
  -- names containing the prefix "avalon_" 
  -- (all lower case)

  u_Adaptive_Wiener_Filter_Sample_Based_Filtering : noise_suppression_Adaptive_Wiener_Filter_Sample_Based_Filtering
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Sink_Data => avalon_sink_data,  -- sfix32_En28
              Sink_Channel => avalon_sink_channel,  -- ufix2
              valid => avalon_sink_valid,
              enable => register_control_enable,
              noise_variance => register_control_noise_variance,  -- ufix32_En31
              Source_Data => data_out,  -- sfix32_En28
              Source_Channel => channel_out,  -- ufix2
              Source_Valid => valid_out
              );

  avalon_source_valid <= valid_out;

  avalon_sink_error_unsigned <= unsigned(avalon_sink_error);

  enb <= clk_enable;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg(0) <= to_unsigned(16#0#, 2);
      delayMatch_reg(1) <= to_unsigned(16#0#, 2);
      delayMatch_reg(2) <= to_unsigned(16#0#, 2);
      delayMatch_reg(3) <= to_unsigned(16#0#, 2);
      delayMatch_reg(4) <= to_unsigned(16#0#, 2);
      delayMatch_reg(5) <= to_unsigned(16#0#, 2);
      delayMatch_reg(6) <= to_unsigned(16#0#, 2);
      delayMatch_reg(7) <= to_unsigned(16#0#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
        delayMatch_reg(3) <= delayMatch_reg_next(3);
        delayMatch_reg(4) <= delayMatch_reg_next(4);
        delayMatch_reg(5) <= delayMatch_reg_next(5);
        delayMatch_reg(6) <= delayMatch_reg_next(6);
        delayMatch_reg(7) <= delayMatch_reg_next(7);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  avalon_sink_error_1 <= delayMatch_reg(7);
  delayMatch_reg_next(0) <= avalon_sink_error_unsigned;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);
  delayMatch_reg_next(6) <= delayMatch_reg(5);
  delayMatch_reg_next(7) <= delayMatch_reg(6);

  avalon_source_error <= std_logic_vector(avalon_sink_error_1);

  ce_out <= clk_enable;

  avalon_source_data <= data_out;

  avalon_source_channel <= channel_out;

END rtl;

