-- -------------------------------------------------------------
-- 
-- File Name: /mnt/data/NIH/simulink_models/models/bitcrusher/hdlsrc/BC/BC_Left_Channel_Processing.vhd
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: BC_Left_Channel_Processing
-- Source Path: BC/dataplane/Avalon Data Processing/Left Channel Processing
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.BC_dataplane_pkg.ALL;

ENTITY BC_Left_Channel_Processing IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Left_Data_In                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Left_Bypass                       :   IN    std_logic;
        Left_Bits                         :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        Left_Wet_Dry_Mix                  :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8_En7
        Enable                            :   IN    std_logic;
        Left_Data_Out                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
        );
END BC_Left_Channel_Processing;


ARCHITECTURE rtl OF BC_Left_Channel_Processing IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT BC_getbitmask
    PORT( bitlevel                        :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          bitmask                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En28
          );
  END COMPONENT;

  COMPONENT BC_mixer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dry_signal                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          wet_signal                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          wet_dry_mix                     :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8_En7
          output                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : BC_getbitmask
    USE ENTITY work.BC_getbitmask(rtl);

  FOR ALL : BC_mixer
    USE ENTITY work.BC_mixer(rtl);

  -- Signals
  SIGNAL Enable_out5                      : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Enable_out5_1                    : std_logic;
  SIGNAL Left_Data_In_signed              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Sign_out1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL Sign_out1_1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Abs_y                            : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Abs_cast                         : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Abs_out1                         : unsigned(31 DOWNTO 0);  -- ufix32_En28
  SIGNAL bitmask                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL bitmask_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32_En28
  SIGNAL Bitwise_Operator_out1            : unsigned(31 DOWNTO 0);  -- ufix32_En28
  SIGNAL Bitwise_Operator_out1_1          : unsigned(31 DOWNTO 0);  -- ufix32_En28
  SIGNAL Product_cast                     : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Product_mul_temp                 : signed(64 DOWNTO 0);  -- sfix65_En28
  SIGNAL Product_out1                     : signed(63 DOWNTO 0);  -- sfix64_En28
  SIGNAL Product_out1_1                   : signed(63 DOWNTO 0);  -- sfix64_En28
  SIGNAL Data_Type_Conversion2_out1       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Left_Bypass_1                    : std_logic;
  SIGNAL mixer_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mixer_out1_signed                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayMatch_reg                   : vector_of_signed32(0 TO 3);  -- sfix32 [4]
  SIGNAL Left_Data_In_1                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_bypass               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_last_value           : signed(31 DOWNTO 0);  -- sfix32_En28

BEGIN
  -- An enabled subsystem
  -- This subsystem only runs when the data valid signal is enabled (asserted)
  -- 

  u_getbitmask : BC_getbitmask
    PORT MAP( bitlevel => Left_Bits,  -- ufix6
              bitmask => bitmask  -- ufix32_En28
              );

  u_mixer : BC_mixer
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dry_signal => Left_Data_In,  -- sfix32_En28
              wet_signal => std_logic_vector(Data_Type_Conversion2_out1),  -- sfix32_En28
              wet_dry_mix => Left_Wet_Dry_Mix,  -- ufix8_En7
              output => mixer_out1  -- sfix32_En28
              );

  Enable_out5 <= Enable;

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch2_reg(0) <= Enable_out5;
        delayMatch2_reg(1 TO 3) <= delayMatch2_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  Enable_out5_1 <= delayMatch2_reg(3);

  Left_Data_In_signed <= signed(Left_Data_In);

  
  Sign_out1 <= to_signed(1, 32) WHEN Left_Data_In_signed > to_signed(0, 32) ELSE
      to_signed(-1, 32) WHEN Left_Data_In_signed < to_signed(0, 32) ELSE
      to_signed(0, 32);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sign_out1_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Sign_out1_1 <= Sign_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  Abs_cast <= resize(Left_Data_In_signed, 33);
  
  Abs_y <=  - (Abs_cast) WHEN Left_Data_In_signed < to_signed(0, 32) ELSE
      resize(Left_Data_In_signed, 33);
  Abs_out1 <= unsigned(Abs_y(31 DOWNTO 0));

  bitmask_unsigned <= unsigned(bitmask);

  Bitwise_Operator_out1 <= Abs_out1 AND bitmask_unsigned;

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Bitwise_Operator_out1_1 <= to_unsigned(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Bitwise_Operator_out1_1 <= Bitwise_Operator_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product_cast <= signed(resize(Bitwise_Operator_out1_1, 33));
  Product_mul_temp <= Sign_out1_1 * Product_cast;
  Product_out1 <= Product_mul_temp(63 DOWNTO 0);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_1 <= to_signed(0, 64);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_out1_1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Data_Type_Conversion2_out1 <= Product_out1_1(31 DOWNTO 0);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= Left_Bypass;
        delayMatch1_reg(1 TO 3) <= delayMatch1_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Left_Bypass_1 <= delayMatch1_reg(3);

  mixer_out1_signed <= signed(mixer_out1);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_signed(0, 32));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= Left_Data_In_signed;
        delayMatch_reg(1 TO 3) <= delayMatch_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Left_Data_In_1 <= delayMatch_reg(3);

  
  Switch_out1 <= mixer_out1_signed WHEN Left_Bypass_1 = '0' ELSE
      Left_Data_In_1;

  Left_Data_Out_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Switch_out1_last_value <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Switch_out1_last_value <= Switch_out1_bypass;
      END IF;
    END IF;
  END PROCESS Left_Data_Out_bypass_process;


  
  Switch_out1_bypass <= Switch_out1_last_value WHEN Enable_out5_1 = '0' ELSE
      Switch_out1;

  Left_Data_Out <= std_logic_vector(Switch_out1_bypass);

END rtl;

