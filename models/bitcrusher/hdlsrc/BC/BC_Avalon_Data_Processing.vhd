-- -------------------------------------------------------------
-- 
-- File Name: /mnt/data/NIH/simulink_models/models/bitcrusher/hdlsrc/BC/BC_Avalon_Data_Processing.vhd
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: BC_Avalon_Data_Processing
-- Source Path: BC/dataplane/Avalon Data Processing
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY BC_Avalon_Data_Processing IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Sink_Data                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Sink_Channel                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        Left_Bypass                       :   IN    std_logic;
        Left_Bits                         :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        Left_Wet_Dry_Mix                  :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5_En4
        Right_Bypass                      :   IN    std_logic;
        Right_Bits                        :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        Right_Wet_Dry_Mix                 :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5_En4
        Enable                            :   IN    std_logic;
        Source_Data                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Source_Channel                    :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
        );
END BC_Avalon_Data_Processing;


ARCHITECTURE rtl OF BC_Avalon_Data_Processing IS

  -- Component Declarations
  COMPONENT BC_Left_Channel_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Left_Data_In                    :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Left_Bypass                     :   IN    std_logic;
          Left_Bits                       :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          Left_Wet_Dry_Mix                :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5_En4
          Enable                          :   IN    std_logic;
          Left_Data_Out                   :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT BC_Right_Channel_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Right_Data_In                   :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Right_Bypass                    :   IN    std_logic;
          Right_Bits                      :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          Right_Wet_Dry_Mix               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5_En4
          Enable                          :   IN    std_logic;
          Right_Data_Out                  :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : BC_Left_Channel_Processing
    USE ENTITY work.BC_Left_Channel_Processing(rtl);

  FOR ALL : BC_Right_Channel_Processing
    USE ENTITY work.BC_Right_Channel_Processing(rtl);

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Enable_out9                      : std_logic;
  SIGNAL Sink_Channel_unsigned            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL Left_Channel_Processing_out1     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Left_Channel_Processing_out1_signed : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Right_Channel_Processing_out1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Right_Channel_Processing_out1_signed : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Sink_Data_signed                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Multiport_Switch_out1            : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Multiport_Switch_out1_bypass     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Multiport_Switch_out1_last_value : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Sink_Channel_bypass              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Sink_Channel_last_value          : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  -- Select output data
  -- based on channel number
  -- 
  -- Check if Channel 0 
  -- (Left Channel)
  -- 
  -- The Left Channel Processing block 
  -- only executes when channel 0
  -- is detected
  -- 
  -- The Right Channel Processing block 
  -- only executes when channel 1
  -- is detected
  -- 
  -- Check if Channel 1 
  -- (Right Channel)
  -- 
  -- An enabled subsystem
  -- This subsystem only runs when the data valid signal is enabled (asserted)
  -- 

  u_Left_Channel_Processing : BC_Left_Channel_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              Left_Data_In => Sink_Data,  -- sfix32_En28
              Left_Bypass => Left_Bypass,
              Left_Bits => Left_Bits,  -- ufix5
              Left_Wet_Dry_Mix => Left_Wet_Dry_Mix,  -- ufix5_En4
              Enable => Compare_To_Constant2_out1,
              Left_Data_Out => Left_Channel_Processing_out1  -- sfix32_En28
              );

  u_Right_Channel_Processing : BC_Right_Channel_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              Right_Data_In => Sink_Data,  -- sfix32_En28
              Right_Bypass => Right_Bypass,
              Right_Bits => Right_Bits,  -- ufix5
              Right_Wet_Dry_Mix => Right_Wet_Dry_Mix,  -- ufix5_En4
              Enable => Compare_To_Constant1_out1,
              Right_Data_Out => Right_Channel_Processing_out1  -- sfix32_En28
              );

  Enable_out9 <= Enable;

  enb_gated <= Enable_out9 AND enb;

  Sink_Channel_unsigned <= unsigned(Sink_Channel);

  
  Compare_To_Constant2_out1 <= '1' WHEN Sink_Channel_unsigned = to_unsigned(16#0#, 2) ELSE
      '0';

  Left_Channel_Processing_out1_signed <= signed(Left_Channel_Processing_out1);

  
  Compare_To_Constant1_out1 <= '1' WHEN Sink_Channel_unsigned = to_unsigned(16#1#, 2) ELSE
      '0';

  Right_Channel_Processing_out1_signed <= signed(Right_Channel_Processing_out1);

  Sink_Data_signed <= signed(Sink_Data);

  
  Multiport_Switch_out1 <= Left_Channel_Processing_out1_signed WHEN Sink_Channel_unsigned = to_unsigned(16#0#, 2) ELSE
      Right_Channel_Processing_out1_signed WHEN Sink_Channel_unsigned = to_unsigned(16#1#, 2) ELSE
      Sink_Data_signed;

  Source_Data_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiport_Switch_out1_last_value <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_gated = '1' THEN
        Multiport_Switch_out1_last_value <= Multiport_Switch_out1_bypass;
      END IF;
    END IF;
  END PROCESS Source_Data_bypass_process;


  
  Multiport_Switch_out1_bypass <= Multiport_Switch_out1_last_value WHEN Enable_out9 = '0' ELSE
      Multiport_Switch_out1;

  Source_Data <= std_logic_vector(Multiport_Switch_out1_bypass);

  Source_Channel_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sink_Channel_last_value <= to_unsigned(16#0#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb_gated = '1' THEN
        Sink_Channel_last_value <= Sink_Channel_bypass;
      END IF;
    END IF;
  END PROCESS Source_Channel_bypass_process;


  
  Sink_Channel_bypass <= Sink_Channel_last_value WHEN Enable_out9 = '0' ELSE
      Sink_Channel_unsigned;

  Source_Channel <= std_logic_vector(Sink_Channel_bypass);

END rtl;

