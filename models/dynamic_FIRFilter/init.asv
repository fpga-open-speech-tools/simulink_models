%% E. Bailey Galacci
% Flat Earth Inc.
% 10/13/2019

% This script is to initialize the Simple_2_DPRAM_test simulink model

% Parameters of the model are:
%   W_Bits, F_Bits, Addr_Bits, Sel_Bits, 
%   RAM_X_SEL, LED_Bits
%   Ts_system, Ts
%
%
% Inputs of the model are:
%   Avalon Control Signals:
%       Avalon_Source_Valid
%       Avalon_Source_Data
%       Avalon_Source_Channel
%       Avalon_Source_Error
%
%   Register Control Signals:
%       Register_Data
%       Register_Addr
%   
%
% Outputs of the model are:
%   Avalon Sink Signals:
%       Avalon_Sink_Valid
%       Avalon_Sink_Data
%       Avalon_Sink_Channel
%       Avalon_Sink_Error
%

%% To do: set up these model things as an object mp (model parameters)
clear; clc;

MODEL_NOT_REAL = 1;

%% Setting up model parameters:
Fs = 48000; % Hz, this is the standard input rate of the audio codec
Ts = 1/Fs;
ram_size = 4; % Number of bits it addresses at

if (MODEL_NOT_REAL)
    Fs_system = 1;   % this is here solely to use up less space
else
    Fs_system = 50000000; % 50 MHz, this is the clock rate we expect of the DE10
end
Ts_system = 1/Fs_system;
W_Bits = 32; F_Bits = 28;


% THINGS WE CAN MESS AROUND WITH
Addr_Bits = 4;
Sel_Bits = 2; % 2, since there are two RAM blocks and we want a state where we don't write to either
RAM_0_SEL = 0; RAM_1_SEL = 1;
LED_Bits = 8; % there are 8 LEDs we can output to. Might as well use them all.

%% Setting up model inputs:
steps = 64;
stop_time = Ts_system*steps;  %%%% NOTE: set low because simplicity of model
tt_system = (0:Ts_system:stop_time)';   
tt_inputs = (0:Ts_system:stop_time)';

% Avalon Control Signals:
% Avalon Processing Block only executes when valid == 1
Avalon_Source_Valid = [tt_system, ones(length(tt_system), 1)];

% Avalon Data is used as the input read address and select.
%  must be 32 bit unsigned int. Addr is bottom Addr_Bits. Sel is next Sel_Bits
%  originally this is fixdt(1,32,28), but for this test its easier to use unisigned ints.
Avalon_Source_Data = [tt_system, ones(length(tt_system), 1)];

% For now, the system is only implemented on the left channel. So all 0s.
Avalon_Source_Channel = [tt_system, zeros(length(tt_system), 1)];

% Error isn't implemented fully. Set to 0s. 
Avalon_Source_Error = [tt_system, zeros(length(tt_system), 1)];

% Register Control Signals:
% These registers will let us actually write to the RAM blocks. 
% Register_Data will control the 8-bit LED output if Avalon asks for that
% specific Sel & Addr code. 32 bit signed int, but we only care about 8.
Register_Data = [tt_system, ones(length(tt_system), 1)];
% Register_Addr sets which RAM to write to and where. 32 bit uint   
Register_Addr = [tt_system, ones(length(tt_system), 1)];
% Register_En sets when to write to RAM. 32 bit uint   
Register_En = [tt_system, ones(length(tt_system), 1)];

%% Here, we mess around with model inputs for testing purposes.
% first, set up the registers to fill the tables.
i = 1;
for ix = 2^Addr_Bits : -1 : 1
    % first lookup table is a forward count
    Register_Data(i,2) = i;
    Register_Addr(i,2) = i-1;
    i = i+1;
end

for ix = 2^Addr_Bits : -1 : 1
    % first lookup table is a forward count
    Register_Data(i,2) = ix;
    Register_Addr(i,2) = i-1;
    i = i+1;
end

Register_Addr(33:end, 2) = 32; %this sets sel to 2, nullifying the writes to both RAM_0 and RAM_1
%% now that we've filled the tables, lets try reading from them!
Avalon_Source_Data(:,2) = 32; % this is outside the range. 
Avalon_Source_Data(:,2);
% starting at i = 33
addr = 0;
% say, read from addr 0 in table 0. and go up from there.
while(i < steps+2)
    Avalon_Source_Data(i,2) = addr;
    addr = addr + 1;
    
    i = i+1; 
end
% NOTE: expecting addr of 32 to be seen as address 0, but there's a z-delay
% so we shouldn't see that anyways. 