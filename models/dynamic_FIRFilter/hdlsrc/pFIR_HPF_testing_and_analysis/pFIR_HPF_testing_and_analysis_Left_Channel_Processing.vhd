-- -------------------------------------------------------------
-- 
-- File Name: /home/justin/Documents/FEI/simulink_models/models/dynamic_FIRFilter/hdlsrc/pFIR_HPF_testing_and_analysis/pFIR_HPF_testing_and_analysis_Left_Channel_Processing.vhd
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: pFIR_HPF_testing_and_analysis_Left_Channel_Processing
-- Source Path: pFIR_HPF_testing_and_analysis/dataplane/Test FIR with Custom FIR Libraries Sample Based Filtering/Left 
-- Channel Processin
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.pFIR_HPF_testing_and_analysis_dataplane_pkg.ALL;

ENTITY pFIR_HPF_testing_and_analysis_Left_Channel_Processing IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        Left_Data_Sink                    :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        register_control_enable           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        left_data_valid                   :   IN    std_logic;
        Left_Data_Source                  :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
        );
END pFIR_HPF_testing_and_analysis_Left_Channel_Processing;


ARCHITECTURE rtl OF pFIR_HPF_testing_and_analysis_Left_Channel_Processing IS

  -- Component Declarations
  COMPONENT pFIR_HPF_testing_and_analysis_Static_Upclocked_FIR
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          Data_In                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Valid_in                        :   IN    std_logic;
          Data_out                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : pFIR_HPF_testing_and_analysis_Static_Upclocked_FIR
    USE ENTITY work.pFIR_HPF_testing_and_analysis_Static_Upclocked_FIR(rtl);

  -- Signals
  SIGNAL register_control_enable_signed   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayMatch_reg                   : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL register_control_enable_1        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Left_Data_Sink_signed            : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayMatch1_reg                  : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL left_data_sinksource_passthrough : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL left_filtered_out                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL left_filtered_out_signed         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Left_Data_Source_1               : signed(31 DOWNTO 0);  -- sfix32_En28

BEGIN
  -- An enabled subsystem
  -- This subsystem only runs when the data valid signal is enabled (asserted)

  u_Static_Upclocked_FIR : pFIR_HPF_testing_and_analysis_Static_Upclocked_FIR
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2048_0 => enb_1_2048_0,
              Data_In => Left_Data_Sink,  -- sfix32_En28
              Valid_in => left_data_valid,
              Data_out => left_filtered_out  -- sfix32_En28
              );

  register_control_enable_signed <= signed(register_control_enable);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_signed(0, 32));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= register_control_enable_signed;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  register_control_enable_1 <= delayMatch_reg(1);

  
  switch_compare_1 <= '1' WHEN register_control_enable_1 >= to_signed(268435456, 32) ELSE
      '0';

  Left_Data_Sink_signed <= signed(Left_Data_Sink);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => to_signed(0, 32));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= Left_Data_Sink_signed;
        delayMatch1_reg(1) <= delayMatch1_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  left_data_sinksource_passthrough <= delayMatch1_reg(1);

  left_filtered_out_signed <= signed(left_filtered_out);

  
  Left_Data_Source_1 <= left_data_sinksource_passthrough WHEN switch_compare_1 = '0' ELSE
      left_filtered_out_signed;

  Left_Data_Source <= std_logic_vector(Left_Data_Source_1);

END rtl;

